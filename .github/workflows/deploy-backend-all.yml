name: Backend CI/CD (Staging & Optional Production)

on:
  push:
    branches: [staging, test-cicd]
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend-all.yml'
  workflow_dispatch:
    inputs:
      deploy_production:
        description: "Also deploy to production?"
        required: true
        default: "false"
        type: choice
        options:
          - "false"
          - "true"

permissions:
  contents: write
  packages: write
  id-token: write

env:
  NODE_VERSION: '22'
  DOCKER_IMAGE: vibe-backend
  GCP_REGION: asia-south2
  GCP_SERVICE: vibe-backend-staging

jobs:
  versioning:
    name: Versioning
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.tag_version.outputs.new_version || steps.fallback_version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          github_token: ${{ env.GITHUB_TOKEN }}
          release_branches: main,staging,test-cicd
          default_bump: patch
          tag_prefix: ''
          fetch_all_tags: true
          create_annotated_tag: true
          dry_run: false

      - name: Set fallback version if tagging failed
        if: steps.tag_version.outcome == 'failure'
        id: fallback_version
        run: echo "new_version=$(date +'%Y%m%d%H%M')" >> $GITHUB_OUTPUT

  lint:
    name: Lint and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.4.1
          run_install: false

      - name: Install dependencies
        run: |
          cd backend
          if [ ! -f "pnpm-lock.yaml" ]; then
            touch pnpm-lock.yaml
          fi
          pnpm install

      - name: Run linting
        run: |
          cd backend
          pnpm lint || echo "Linting completed with warnings"

      - name: Run tests
        run: |
          cd backend
          pnpm test:ci || echo "Tests completed with warnings"

  build:
    name: Build and Push
    needs: [versioning, lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ needs.versioning.outputs.new_version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:staging
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=staging
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
            SENTRY_DSN=${{ secrets.SENTRY_DSN }}
            SENTRY_ORG=${{ secrets.SENTRY_ORG }}
            DB_URL=${{ secrets.DB_URL }}

  deploy_staging:
    name: Deploy to Cloud Run (Staging)
    needs: [versioning, build]
    runs-on: ubuntu-latest
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.GCP_SERVICE }}
          region: ${{ env.GCP_REGION }}
          image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ needs.versioning.outputs.new_version }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          env_vars: |
            NODE_ENV=staging
            DB_URL=${{ secrets.DB_URL }}
            SENTRY_DSN=${{ secrets.SENTRY_DSN }}
            SENTRY_ORG=${{ secrets.SENTRY_ORG }}
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
            FIREBASE_CLIENT_EMAIL=${{ secrets.FIREBASE_CLIENT_EMAIL }}
            FIREBASE_PRIVATE_KEY=${{ secrets.FIREBASE_PRIVATE_KEY }}
            FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
            FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}
          flags: --allow-unauthenticated

  deploy_production:
    name: Deploy to Cloud Run (Production)
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_production == 'true'
    needs: [versioning, build]
    runs-on: ubuntu-latest
    environment:
      name: production
      # url: https://your-production-url.run.app # TODO: (optional)
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Deploy to Cloud Run (Production)
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: vibe-backend-production
          region: ${{ env.GCP_REGION }}
          image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ needs.versioning.outputs.new_version }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          env_vars: |
            NODE_ENV=production
            DB_URL=${{ secrets.DB_URL }}
            SENTRY_DSN=${{ secrets.SENTRY_DSN }}
            SENTRY_ORG=${{ secrets.SENTRY_ORG }}
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
            FIREBASE_CLIENT_EMAIL=${{ secrets.FIREBASE_CLIENT_EMAIL }}
            FIREBASE_PRIVATE_KEY=${{ secrets.FIREBASE_PRIVATE_KEY }}
            FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
            FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}
          flags: --allow-unauthenticated
