"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6353],{7543:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"React/Advanced State Management with Zustand","title":"Advanced State Management with Zustand","description":"Advanced State Management with Zustand: Middleware, Persistence, and Async Patterns","source":"@site/newdocs/React/Advanced State Management with Zustand.md","sourceDirName":"React","slug":"/React/Advanced State Management with Zustand","permalink":"/vibe/newdocs/React/Advanced State Management with Zustand","draft":false,"unlisted":false,"editUrl":"https://github.com/your-org/\u2026/newdocs/React/Advanced State Management with Zustand.md","tags":[],"version":"current","frontMatter":{},"sidebar":"newSidebar","previous":{"title":"Transactions","permalink":"/vibe/newdocs/Mongo DB/Transactions"},"next":{"title":"Bundle Analysis","permalink":"/vibe/newdocs/React/Bundle Analysis"}}');var r=s(7968),i=s(9880);const o={},l=void 0,a={},d=[{value:"1. Problem Statement",id:"1-problem-statement",level:2},{value:"<strong>Case Study: CollabNotes \u2013 Real-Time Collaborative Notes</strong>",id:"case-study-collabnotes--real-time-collaborative-notes",level:2},{value:"2. Learning Objectives",id:"2-learning-objectives",level:2},{value:"3. Concept Introduction with Analogy",id:"3-concept-introduction-with-analogy",level:2},{value:"<strong>Analogy: The CollabNotes Command Center</strong>",id:"analogy-the-collabnotes-command-center",level:2},{value:"4. Technical Deep Dive",id:"4-technical-deep-dive",level:2},{value:"<strong>A. Zustand Middleware: devtools, persist, immer, and custom logging</strong>",id:"a-zustand-middleware-devtools-persist-immer-and-custom-logging",level:2},{value:"5. Step-by-Step Data Modeling &amp; Code Walkthrough",id:"5-step-by-step-data-modeling--code-walkthrough",level:2},{value:"6. Interactive Challenge / Mini-Project",id:"6-interactive-challenge--mini-project",level:2},{value:"7. Common Pitfalls &amp; Best Practices",id:"7-common-pitfalls--best-practices",level:2},{value:"8. Common Pitfalls &amp; Best Practices (Zustand)",id:"8-common-pitfalls--best-practices-zustand",level:2},{value:"8. Optional: Programmer\u2019s Workflow Checklist",id:"8-optional-programmers-workflow-checklist",level:2}];function c(e){const n={br:"br",code:"code",h2:"h2",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Advanced State Management with Zustand: Middleware, Persistence, and Async Patterns"}),"\n",(0,r.jsx)(n.h2,{id:"1-problem-statement",children:"1. Problem Statement"}),"\n",(0,r.jsx)(n.h2,{id:"case-study-collabnotes--real-time-collaborative-notes",children:(0,r.jsx)(n.strong,{children:"Case Study: CollabNotes \u2013 Real-Time Collaborative Notes"})}),"\n",(0,r.jsx)(n.p,{children:"CollabNotes is a real-time note-taking platform for teams:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Users can create, edit, and delete notes, and see updates from teammates instantly."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Notes, user preferences, and session info must persist across reloads and browser sessions."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Every change (edit, delete, sync) should be logged for audit and undo/redo features."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The app fetches notes from a cloud API and keeps them in sync with local state."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"As the app grows, the team needs minimal boilerplate, type safety, and high performance."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://i.postimg.cc/Y2njHCK4/react4.png",alt:"Sample Image"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"The challenge:"}),(0,r.jsx)(n.br,{}),"\n","How do you architect a state system that is  ",(0,r.jsx)(n.strong,{children:"persistent, observable, modular, and async-ready"}),"\u2014with minimal code, maximum reliability, and no unnecessary re-renders?"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"2-learning-objectives",children:"2. Learning Objectives"}),"\n",(0,r.jsx)(n.p,{children:"By the end of this tutorial, you will:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Use Zustand middleware for devtools, immutability (immer), and state persistence."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Persist only selected parts of state to localStorage/sessionStorage."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Migrate and version persisted state for schema changes."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Log all state changes for audit/history."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Combine Zustand with React Query for async data fetching and syncing."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Avoid common pitfalls and follow best practices for scalable state management."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"3-concept-introduction-with-analogy",children:"3. Concept Introduction with Analogy"}),"\n",(0,r.jsx)(n.h2,{id:"analogy-the-collabnotes-command-center",children:(0,r.jsx)(n.strong,{children:"Analogy: The CollabNotes Command Center"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Middleware"}),"  are like security cameras and safes: they log every change and keep important data safe even if the power goes out."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Persistence"}),"  is the vault: your notes and preferences are always there, even after a crash or reload."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"React Query"}),"  is the courier: it fetches the latest notes from the cloud and syncs them with your local store, so everyone sees the same thing in real time."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"4-technical-deep-dive",children:"4. Technical Deep Dive"}),"\n",(0,r.jsx)(n.h2,{id:"a-zustand-middleware-devtools-persist-immer-and-custom-logging",children:(0,r.jsx)(n.strong,{children:"A. Zustand Middleware: devtools, persist, immer, and custom logging"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"1. Devtools Middleware"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Lets you inspect and time-travel state changes in Redux DevTools."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Should be the  ",(0,r.jsx)(n.strong,{children:"last"}),"  middleware applied."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { create } from 'zustand';\nimport { devtools } from 'zustand/middleware';\n\nconst useNoteStore = create(\n devtools((set) => ({\n   notes: [],\n   addNote: (note) => set((state) => ({ notes: [...state.notes, note] })),\n }))\n);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"2. Persist Middleware"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Persists state across reloads using localStorage/sessionStorage."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Use  ",(0,r.jsx)(n.code,{children:"partialize"}),"  to persist only selected fields."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { persist, createJSONStorage } from 'zustand/middleware';\n\nconst usePreferencesStore = create(\n  persist(\n    (set) => ({\n      theme: 'light',\n      fontSize: 14,\n      setTheme: (theme) => set({ theme }),\n      setFontSize: (size) => set({ fontSize: size }),\n    }),\n    {\n      name: 'collabnotes-preferences',\n      storage: createJSONStorage(() => localStorage),\n      partialize: (state) => ({ theme: state.theme, fontSize: state.fontSize }),\n      version: 2,\n      migrate: (persisted, version) => {\n        if (version < 2) return { ...persisted, fontSize: 14 };\n        return persisted;\n      },\n    }\n  )\n);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"3. Immer Middleware"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Enables immutable updates with a mutable API (like Redux Toolkit)."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { immer } from 'zustand/middleware/immer';\n\nconst useNoteStore = create(\n  immer((set) => ({\n    notes: [],\n    updateNote: (id, text) =>\n      set((state) => {\n        const note = state.notes.find((n) => n.id === id);\n        if (note) note.text = text;\n      }),\n  }))\n);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"4. Custom Logging Middleware"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"-   Log every change for audit/history.\n\nconst logMiddleware = (config) => (set, get, api) =>\nconfig((args) => {\n console.log('Before:', get());\n set(args);\n console.log('After:', get());\n}, get, api);\n\nconst useNoteStore = create(\nlogMiddleware((set) => ({\n // ...state and actions\n}))\n);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"B. State Versioning & Migration"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use  ",(0,r.jsx)(n.code,{children:"version"}),"  and  ",(0,r.jsx)(n.code,{children:"migrate"}),"  in  ",(0,r.jsx)(n.code,{children:"persist"}),"  to safely upgrade persisted state."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"persist(\n  (set) => ({\n    notes: [],\n    lastSynced: null,\n  }),\n  {\n    name: 'notes-storage',\n    version: 2,\n    migrate: (persisted, version) => {\n      if (version < 2) return { ...persisted, lastSynced: null };\n      return persisted;\n    },\n  }\n)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"C. Combining Zustand with React Query"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"React Query"}),"  fetches and caches async data (notes from the cloud)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Zustand"}),"  manages local state and syncs with React Query."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { useQuery } from '@tanstack/react-query';\nimport { create } from 'zustand';\n\nconst useNoteStore = create((set) => ({\n  notes: [],\n  setNotes: (notes) => set({ notes }),\n}));\n\nfunction NotesList() {\n  const setNotes = useNoteStore((s) => s.setNotes);\n  const notes = useNoteStore((s) => s.notes);\n\n  const { data, isLoading } = useQuery(['notes'], fetchNotesFromAPI, {\n    onSuccess: setNotes,\n  });\n\n  if (isLoading) return <div>Loading...</div>;\n  return (\n    <ul>\n      {notes.map((n) => (\n        <li key={n.id}>{n.text}</li>\n      ))}\n    </ul>\n  );\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"5-step-by-step-data-modeling--code-walkthrough",children:"5. Step-by-Step Data Modeling & Code Walkthrough"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"A. Persisted Preferences Store with Migration"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\n\nconst usePreferencesStore = create(\n  persist(\n    (set) => ({\n      theme: 'light',\n      fontSize: 14,\n      setTheme: (theme) => set({ theme }),\n      setFontSize: (size) => set({ fontSize: size }),\n    }),\n    {\n      name: 'collabnotes-preferences',\n      storage: createJSONStorage(() => localStorage),\n      partialize: (state) => ({ theme: state.theme, fontSize: state.fontSize }),\n      version: 2,\n      migrate: (persisted, version) => {\n        if (version < 2) return { ...persisted, fontSize: 14 };\n        return persisted;\n      },\n    }\n  )\n);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"B. Notes Store with Devtools, Immer, and Logging"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { create } from 'zustand';\nimport { devtools, immer } from 'zustand/middleware';\n\nconst logMiddleware = (config) => (set, get, api) =>\n  config((args) => {\n    console.log('Before:', get());\n    set(args);\n    console.log('After:', get());\n  }, get, api);\n\nconst useNoteStore = create(\n  devtools(\n    immer(\n      logMiddleware((set) => ({\n        notes: [],\n        addNote: (note) =>\n          set((state) => {\n            state.notes.push(note);\n          }),\n        updateNote: (id, text) =>\n          set((state) => {\n            const note = state.notes.find((n) => n.id === id);\n            if (note) note.text = text;\n          }),\n        deleteNote: (id) =>\n          set((state) => {\n            state.notes = state.notes.filter((n) => n.id !== id);\n          }),\n      }))\n    )\n  )\n);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"C. Syncing Notes with React Query"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { useQuery } from '@tanstack/react-query';\nimport useNoteStore from './store/noteStore';\n\nfunction NotesList() {\n  const setNotes = useNoteStore((s) => s.setNotes);\n  const notes = useNoteStore((s) => s.notes);\n\n  const { data, isLoading } = useQuery(['notes'], fetchNotesFromAPI, {\n    onSuccess: setNotes,\n  });\n\n  if (isLoading) return <div>Loading...</div>;\n  return (\n    <ul>\n      {notes.map((n) => (\n        <li key={n.id}>{n.text}</li>\n      ))}\n    </ul>\n  );\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"6-interactive-challenge--mini-project",children:"6. Interactive Challenge / Mini-Project"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Your Turn!"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Create a persisted Zustand store for user session:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Fields:  ",(0,r.jsx)(n.code,{children:"userId: string"}),",  ",(0,r.jsx)(n.code,{children:"token: string"}),",  ",(0,r.jsx)(n.code,{children:"expiresAt: number"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Only persist  ",(0,r.jsx)(n.code,{children:"userId"}),"  and  ",(0,r.jsx)(n.code,{children:"token"}),", not  ",(0,r.jsx)(n.code,{children:"expiresAt"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Add a migration to handle a new field,  ",(0,r.jsx)(n.code,{children:"role: 'admin' | 'user'"}),"  (default 'user'), in version 2."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Use devtools and immer middleware for a note history log:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Actions:  ",(0,r.jsx)(n.code,{children:"addHistoryEntry"}),",  ",(0,r.jsx)(n.code,{children:"clearHistory"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Log each entry as  ",(0,r.jsx)(n.code,{children:"{ noteId: string, action: string, timestamp: number }"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Combine Zustand and React Query:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Fetch a list of collaborators from an API."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Store collaborators in Zustand."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Display collaborators in a component, updating automatically when data is fetched."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"7-common-pitfalls--best-practices",children:"7. Common Pitfalls & Best Practices"}),"\n",(0,r.jsx)(n.h2,{id:"8-common-pitfalls--best-practices-zustand",children:"8. Common Pitfalls & Best Practices (Zustand)"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Pitfall"}),(0,r.jsx)(n.th,{children:"Best Practice"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Persisting too much state"}),(0,r.jsxs)(n.td,{children:["Use ",(0,r.jsx)(n.code,{children:"partialize"})," to persist only what\u2019s needed"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Not versioning persisted state"}),(0,r.jsxs)(n.td,{children:["Use ",(0,r.jsx)(n.code,{children:"version"})," and ",(0,r.jsx)(n.code,{children:"migrate"})," for schema changes"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Middleware order mistakes"}),(0,r.jsxs)(n.td,{children:["Apply ",(0,r.jsx)(n.code,{children:"devtools"})," last"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Not using selectors in Zustand"}),(0,r.jsx)(n.td,{children:"Use selectors to prevent unnecessary renders"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Mixing async fetch with store"}),(0,r.jsx)(n.td,{children:"Use React Query for fetching, Zustand for UI"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"8-optional-programmers-workflow-checklist",children:"8. Optional: Programmer\u2019s Workflow Checklist"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Use middleware (",(0,r.jsx)(n.code,{children:"persist"}),",  ",(0,r.jsx)(n.code,{children:"devtools"}),",  ",(0,r.jsx)(n.code,{children:"immer"}),") as needed."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Use  ",(0,r.jsx)(n.code,{children:"partialize"}),"  to control what gets persisted."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Add  ",(0,r.jsx)(n.code,{children:"version"}),"  and  ",(0,r.jsx)(n.code,{children:"migrate"}),"  for evolving state."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Use selectors for efficient reactivity."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Combine Zustand with React Query for async data."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Test stores and migrations independently."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},9880:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var t=s(4700);const r={},i=t.createContext(r);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);