"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8260],{3033:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>l});var i=s(4700);const r={},t=i.createContext(r);function c(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(t.Provider,{value:n},e.children)}},6025:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"Typescript/Generics","title":"Generics","description":"Topic 2: Generics (Reusable, Type-Safe Components and Functions)","source":"@site/newdocs/Typescript/10. Generics.md","sourceDirName":"Typescript","slug":"/Typescript/Generics","permalink":"/vibe/newdocs/Typescript/Generics","draft":false,"unlisted":false,"editUrl":"https://github.com/your-org/\u2026/newdocs/Typescript/10. Generics.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{},"sidebar":"newSidebar","previous":{"title":"Conditional Logic in TypeScript","permalink":"/vibe/newdocs/Typescript/Conditional Logics/Conditional Logic in TypeScript"},"next":{"title":"Advanced Types","permalink":"/vibe/newdocs/Typescript/Advanced Types"}}');var r=s(7968),t=s(3033);const c={},l=void 0,d={},a=[{value:"1. Problem Statement",id:"1-problem-statement",level:2},{value:"EduFlow\u2019s Growing Toolbox Challenge",id:"eduflows-growing-toolbox-challenge",level:2},{value:"2. Learning Objectives",id:"2-learning-objectives",level:2},{value:"3. Concept Introduction with Analogy",id:"3-concept-introduction-with-analogy",level:2},{value:"The Magic Toolbox Analogy",id:"the-magic-toolbox-analogy",level:2},{value:"What Are Generics?",id:"what-are-generics",level:2},{value:"<strong>Type Inference with Generics</strong>",id:"type-inference-with-generics",level:2},{value:"<strong>Generic Functions vs. Any</strong>",id:"generic-functions-vs-any",level:2},{value:"<strong>Generic Classes</strong>",id:"generic-classes",level:2},{value:"<strong>Generic Interfaces and Types</strong>",id:"generic-interfaces-and-types",level:2},{value:"<strong>Generic Constraints</strong>",id:"generic-constraints",level:2},{value:"<strong>Multiple Type Parameters</strong>",id:"multiple-type-parameters",level:2},{value:"<strong>Default Type Parameters</strong>",id:"default-type-parameters",level:2},{value:"<strong>Utility Types (Built-in Generics)</strong>",id:"utility-types-built-in-generics",level:2},{value:"Example: Generic Function",id:"example-generic-function",level:2},{value:"4. Step-by-Step Data Modeling",id:"4-step-by-step-data-modeling",level:2},{value:"5. Live Code Walkthrough",id:"5-live-code-walkthrough",level:2},{value:"6. Challenge",id:"6-challenge",level:2},{value:"7. Quick Recap &amp; Key Takeaways",id:"7-quick-recap--key-takeaways",level:2},{value:"8. Optional: Programmer\u2019s Workflow Checklist",id:"8-optional-programmers-workflow-checklist",level:2},{value:"9. Coming up next",id:"9-coming-up-next",level:2}];function o(e){const n={blockquote:"blockquote",br:"br",code:"code",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Topic 2: Generics (Reusable, Type-Safe Components and Functions)"}),"\n",(0,r.jsx)(n.h2,{id:"1-problem-statement",children:"1. Problem Statement"}),"\n",(0,r.jsx)(n.h2,{id:"eduflows-growing-toolbox-challenge",children:"EduFlow\u2019s Growing Toolbox Challenge"}),"\n",(0,r.jsxs)(n.p,{children:["EduFlow Academy is expanding its content types: quizzes, video lessons, coding exercises, and more.",(0,r.jsx)(n.br,{}),"\n","The development team notices they keep writing very similar code for handling lists of different content types, grading submissions, and managing feedback."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.img,{src:"https://i.postimg.cc/593nqCws/topic-2.png",alt:"Tool Box Challenge"}),"\n",(0,r.jsx)(n.strong,{children:"The problem:"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Duplicated code everywhere, hard to maintain."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Every new content type means rewriting similar functions and classes."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Risk of bugs and inconsistent behavior."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Your mission:"}),(0,r.jsx)(n.br,{}),"\n","Create reusable, flexible tools that work with  ",(0,r.jsx)(n.strong,{children:"any"}),"  kind of content or data, while keeping the safety and clarity of TypeScript\u2019s types."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Expected outcome:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Write generic classes and functions that adapt to different data types."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Avoid code duplication and improve maintainability."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Keep type safety so errors are caught early."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"2-learning-objectives",children:"2. Learning Objectives"}),"\n",(0,r.jsx)(n.p,{children:"By the end of this tutorial, you will be able to:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Understand what generics are and why they matter."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Write generic functions and classes that work with any data type."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Use generics to build reusable components for EduFlow\u2019s diverse content."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Maintain type safety while writing flexible code."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"3-concept-introduction-with-analogy",children:"3. Concept Introduction with Analogy"}),"\n",(0,r.jsx)(n.h2,{id:"the-magic-toolbox-analogy",children:"The Magic Toolbox Analogy"}),"\n",(0,r.jsx)(n.p,{children:"Imagine you have a magical toolbox that can change shape to hold any tool you need:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Today it\u2019s a box for quiz papers."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Tomorrow it transforms into a shelf for video lessons."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Next week it becomes a cabinet for coding exercises."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Generics in TypeScript work like this magical toolbox. You write one tool or function, and it adapts to whatever data you give it-without losing track of what\u2019s inside."}),"\n",(0,r.jsx)(n.h2,{id:"what-are-generics",children:"What Are Generics?"}),"\n",(0,r.jsxs)(n.p,{children:["Generics allow you to write  ",(0,r.jsx)(n.strong,{children:"reusable components"}),"  that work with multiple types while retaining type information.\nThey are a form of  ",(0,r.jsx)(n.strong,{children:"parametric polymorphism"}),": you write code with type \u201cparameters\u201d (like  ",(0,r.jsx)(n.code,{children:"<T>"}),") that are filled in with actual types when your code is used."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Without generics:"}),"  You write the same function/class over and over for each type."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"With generics:"}),"  You write it once, and TypeScript ensures it works for any type you specify"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["A  ",(0,r.jsx)(n.strong,{children:"type parameter"}),"  is a placeholder for a type, just like a function parameter is a placeholder for a value."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"function identity<T>(value: T): T {\nreturn value;\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"T"}),"  is a type parameter."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"identity<number>(42)"}),"  returns a  ",(0,r.jsx)(n.code,{children:"number"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:'identity<string>("hello")'}),"  returns a  ",(0,r.jsx)(n.code,{children:"string"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["TypeScript  ",(0,r.jsx)(n.strong,{children:"infers"}),"  ",(0,r.jsx)(n.code,{children:"T"}),"  if you don\u2019t specify it:  ",(0,r.jsx)(n.code,{children:"identity(true)"}),"  \u2192  ",(0,r.jsx)(n.code,{children:"T"}),"  is  ",(0,r.jsx)(n.code,{children:"boolean"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"type-inference-with-generics",children:(0,r.jsx)(n.strong,{children:"Type Inference with Generics"})}),"\n",(0,r.jsxs)(n.p,{children:["TypeScript is smart:",(0,r.jsx)(n.br,{}),"\n","If you call  ",(0,r.jsx)(n.code,{children:'identity("test")'}),", it knows  ",(0,r.jsx)(n.code,{children:"T"}),"  is  ",(0,r.jsx)(n.code,{children:"string"}),"  and enforces that everywhere inside the function."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'const result = identity("test"); // Type: string\n'})}),"\n",(0,r.jsxs)(n.p,{children:["If you try to use  ",(0,r.jsx)(n.code,{children:'identity<number>("oops")'}),", TypeScript will error:"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Argument of type 'string' is not assignable to parameter of type 'number'."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"generic-functions-vs-any",children:(0,r.jsx)(n.strong,{children:"Generic Functions vs. Any"})}),"\n",(0,r.jsx)(n.p,{children:"Compare:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"function echoAny(arg: any): any { return arg; }\nfunction echoGeneric<T>(arg: T): T { return arg; }\n\nlet x = echoAny(123); // x: any (no type safety)\nlet y = echoGeneric(123); // y: number (type-safe)\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["Generics preserve type information,  ",(0,r.jsx)(n.code,{children:"any"}),"  does not."]})}),"\n",(0,r.jsx)(n.h2,{id:"generic-classes",children:(0,r.jsx)(n.strong,{children:"Generic Classes"})}),"\n",(0,r.jsx)(n.p,{children:"You can use generics in classes to make them reusable for any type."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'class Box<T> {\ncontents: T;\nconstructor(value: T) {\n  this.contents = value;\n}\n}\n\nconst stringBox = new Box("hello"); // Box<string>\nconst numberBox = new Box(42);      // Box<number>\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Each instance of  ",(0,r.jsx)(n.code,{children:"Box"}),"  remembers the type you gave it."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"generic-interfaces-and-types",children:(0,r.jsx)(n.strong,{children:"Generic Interfaces and Types"})}),"\n",(0,r.jsx)(n.p,{children:"You can define interfaces and type aliases with generics:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface ApiResponse<T> {\ndata: T;\nstatus: number;\n}\n\ntype Pair<K, V> = { key: K; value: V };\n"})}),"\n",(0,r.jsx)(n.h2,{id:"generic-constraints",children:(0,r.jsx)(n.strong,{children:"Generic Constraints"})}),"\n",(0,r.jsxs)(n.p,{children:["You can restrict what types a generic can accept using ",(0,r.jsx)(n.code,{children:"extends"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'interface HasId { id: string; }\n\nfunction printId<T extends HasId>(item: T): void {\nconsole.log(item.id);\n}\n\nprintId({ id: "abc", name: "Alice" }); // OK\nprintId({ name: "Bob" }); // Error: Property \'id\' is missing\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"T extends HasId"}),"  means \u201cT must have at least the properties of HasId\u201d."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"multiple-type-parameters",children:(0,r.jsx)(n.strong,{children:"Multiple Type Parameters"})}),"\n",(0,r.jsx)(n.p,{children:"Generics can take more than one type parameter:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'function merge<A, B>(a: A, b: B): A & B {\nreturn { ...a, ...b };\n}\n\nconst merged = merge({ id: 1 }, { name: "Alice" }); // { id: 1, name: "Alice" }\n'})}),"\n",(0,r.jsx)(n.h2,{id:"default-type-parameters",children:(0,r.jsx)(n.strong,{children:"Default Type Parameters"})}),"\n",(0,r.jsx)(n.p,{children:"You can provide default types for generics:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'type ApiResponse<T = string> = {\ndata: T;\nstatus: number;\n\nconst resp: ApiResponse = { data: "OK", status: 200 }; // T is string by default\n};\n'})}),"\n",(0,r.jsx)(n.h2,{id:"utility-types-built-in-generics",children:(0,r.jsx)(n.strong,{children:"Utility Types (Built-in Generics)"})}),"\n",(0,r.jsx)(n.p,{children:"TypeScript provides many built-in generic types:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Partial<T>"}),": All properties optional."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Readonly<T>"}),": All properties readonly."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Record<K, T>"}),": Object with keys of type K and values of type T."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Pick<T, K>"}),": Object with only properties K from T."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Omit<T, K>"}),": Object with all properties of T except K."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'type User = { id: string; name: string; age: number; };\ntype UserPreview = Pick<User, "id" | "name">; // { id: string; name: string }\n'})}),"\n",(0,r.jsx)(n.h2,{id:"example-generic-function",children:"Example: Generic Function"}),"\n",(0,r.jsx)(n.h2,{id:"4-step-by-step-data-modeling",children:"4. Step-by-Step Data Modeling"}),"\n",(0,r.jsx)(n.p,{children:"Let\u2019s start with a simple list class that can hold any kind of content:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"\nclass List<T> {\n private items: T[] = [];\n\n add(item: T) {\n   this.items.push(item);\n }\n\n getAll(): T[] {\n   return [...this.items];\n }\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"T"}),"  is a placeholder for any type you want to use."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["When you create a  ",(0,r.jsx)(n.code,{children:"List"}),", you specify what type it holds (e.g.,  ",(0,r.jsx)(n.code,{children:"Quiz"}),",  ",(0,r.jsx)(n.code,{children:"Lesson"}),")."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"5-live-code-walkthrough",children:"5. Live Code Walkthrough"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"A. The Pain Without Generics"})}),"\n",(0,r.jsxs)(n.p,{children:["Suppose EduFlow wants to store feedback for quizzes and lessons.",(0,r.jsx)(n.br,{}),"\n","Without generics, you\u2019d write two almost identical classes:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// One for quizzes\nclass QuizFeedbackBox {\n private feedbacks: string[] = [];\n addFeedback(feedback: string) { this.feedbacks.push(feedback); }\n getAllFeedback(): string[] { return [...this.feedbacks]; }\n}\n\n// One for lessons\nclass LessonFeedbackBox {\n private feedbacks: string[] = [];\n addFeedback(feedback: string) { this.feedbacks.push(feedback); }\n getAllFeedback(): string[] { return [...this.feedbacks]; }\n}\n\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Problem:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Lots of copy-pasting."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"If you want to store feedback as objects (not just strings), you have to rewrite everything again."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Easy to make mistakes or forget to update both classes."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"B. The Magic of Generics"})}),"\n",(0,r.jsx)(n.p,{children:"Now, let\u2019s solve it with a single, flexible class:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Generic FeedbackBox: works for any type!\nclass FeedbackBox<T> {\n private feedbacks: T[] = [];\n\n addFeedback(feedback: T) {\n   this.feedbacks.push(feedback);\n }\n\n getAllFeedback(): T[] {\n   return [...this.feedbacks];\n }\n}\n\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"T"}),"  is a placeholder for any type (string, object, number, etc.)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["When you use  ",(0,r.jsx)(n.code,{children:"FeedbackBox"}),", you decide what  ",(0,r.jsx)(n.code,{children:"T"}),"  is."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"C. Using the Generic Class"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'// For quiz feedback (as strings)\nconst quizFeedback = new FeedbackBox<string>();\nquizFeedback.addFeedback("Great quiz!");\nquizFeedback.addFeedback("Too hard!");\nconsole.log(quizFeedback.getAllFeedback()); // ["Great quiz!", "Too hard!"]\n\n// For lesson feedback (as objects)\ntype LessonFeedback = { rating: number; comment: string };\nconst lessonFeedback = new FeedbackBox<LessonFeedback>();\nlessonFeedback.addFeedback({ rating: 5, comment: "Loved it!" });\nconsole.log(lessonFeedback.getAllFeedback()); // [{ rating: 5, comment: "Loved it!" }]\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Why is this better?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"You write the code once, use it everywhere."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"TypeScript checks that you only add the right kind of feedback (prevents mistakes)."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"If you want to store new types of feedback in the future, you don\u2019t need to rewrite the class."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"D. Generic Functions in Action"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"function getFirstItem<T>(items: T[]): T | undefined {\n return items[0];\n}\n\nconst firstQuizFeedback = getFirstItem(quizFeedback.getAllFeedback()); // string\nconst firstLessonFeedback = getFirstItem(lessonFeedback.getAllFeedback()); // LessonFeedback object\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The function works for any array type."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"TypeScript always knows what type you\u2019re working with."}),"\n"]}),"\n",(0,r.jsx)(n.li,{}),"\n"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Feature"}),(0,r.jsx)(n.th,{children:"Syntax Example"}),(0,r.jsx)(n.th,{children:"Purpose"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Generic Func"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"function f<T>(x: T): T { ... }"})}),(0,r.jsx)(n.td,{children:"Reusable, type-safe functions"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Generic Class"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"class Box<T> { ... }"})}),(0,r.jsx)(n.td,{children:"Reusable, type-safe classes"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Constraint"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"function f<T extends U>(x: T) { ... }"})}),(0,r.jsx)(n.td,{children:"Restrict types"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Multiple Params"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"function f<A, B>(a: A, b: B)"})}),(0,r.jsx)(n.td,{children:"Combine types"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Default Param"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"type Resp<T = string> = ..."})}),(0,r.jsx)(n.td,{children:"Fallback type"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Utility Types"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"Partial<T>"}),", ",(0,r.jsx)(n.code,{children:"Pick<T, K>"}),", etc."]}),(0,r.jsx)(n.td,{children:"Common transformations"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"6-challenge",children:"6. Challenge"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Your Turn!"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Write a generic class  ",(0,r.jsx)(n.code,{children:"FeedbackBox<T>"}),"  that stores feedback items of any type and lets you retrieve them all."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Write a generic function  ",(0,r.jsx)(n.code,{children:"getFirstItem<T>"}),"  that returns the first item from any array."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"7-quick-recap--key-takeaways",children:"7. Quick Recap & Key Takeaways"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Generics allow you to write flexible, reusable code."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"They keep type safety by remembering what type you\u2019re working with."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"You can create generic classes and functions that work with any data type."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"This reduces duplication and improves maintainability."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"8-optional-programmers-workflow-checklist",children:"8. Optional: Programmer\u2019s Workflow Checklist"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Look for repeated code that only differs by data type."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Replace specific types with generics (",(0,r.jsx)(n.code,{children:"<T>"}),")."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Use generics in classes and functions."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Test with multiple data types to ensure flexibility and safety."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"9-coming-up-next",children:"9. Coming up next"}),"\n",(0,r.jsxs)(n.p,{children:["Master  ",(0,r.jsx)(n.strong,{children:"Advanced Types"}),"-your toolkit for combining, transforming, and adapting types to handle complex real-world data scenarios in EduFlow!",(0,r.jsx)(n.br,{}),"\n","Think of it as customizing your magical toolbox with special attachments."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);