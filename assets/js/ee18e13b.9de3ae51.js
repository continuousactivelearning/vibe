"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9835],{4318:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(4700);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}},8615:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"System Design & Architecture/Backend/Directory Structure","title":"Directory Structure","description":"Why this structure?","source":"@site/docs/System Design & Architecture/Backend/2. Directory Structure.md","sourceDirName":"System Design & Architecture/Backend","slug":"/System Design & Architecture/Backend/Directory Structure","permalink":"/vibe/docs/System Design & Architecture/Backend/Directory Structure","draft":false,"unlisted":false,"editUrl":"https://github.com/continuousactivelearning/vibe/edit/main/docs/docs/System Design & Architecture/Backend/2. Directory Structure.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Tech Stack","permalink":"/vibe/docs/System Design & Architecture/Backend/Tech Stack"},"next":{"title":"Core Architectural Layers","permalink":"/vibe/docs/System Design & Architecture/Backend/Core Architectural Layers"}}');var r=t(7968),i=t(4318);const o={},a=void 0,c={},l=[];function d(e){const n={code:"code",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"backend/\n\u251c\u2500\u2500 plop-templates/         # Scaffolding for new code artifacts\n\u2502   \u251c\u2500\u2500 controller.hbs      # Template for Controllers\n\u2502   \u251c\u2500\u2500 repository.hbs      # Template for Repositories\n\u2502   \u251c\u2500\u2500 service.hbs         # Template for Services\n\u2502   \u2514\u2500\u2500 module-base/        # Base files for a new module\n\u2502       \u251c\u2500\u2500 container.ts.hbs\n\u2502       \u251c\u2500\u2500 index.ts.hbs\n\u2502       \u2514\u2500\u2500 types.ts.hbs\n\u251c\u2500\u2500 src/                    # Main TypeScript source\n\u2502   \u251c\u2500\u2500 bootstrap/          # Module loader and application startup\n\u2502   \u2502   \u2514\u2500\u2500 loadModules.ts  # Dynamically imports and registers modules\n\u2502   \u251c\u2500\u2500 config/             # Environment & integration configs\n\u2502   \u2502   \u251c\u2500\u2500 ai.ts           # AI / GenAI credentials and setup\n\u2502   \u2502   \u251c\u2500\u2500 app.ts          # Express app configuration (CORS, bodyParser)\n\u2502   \u2502   \u251c\u2500\u2500 db.ts           # MongoDB connection pool and retry logic\n\u2502   \u2502   \u251c\u2500\u2500 index.ts        # Aggregates all config exports\n\u2502   \u2502   \u251c\u2500\u2500 sentry.ts       # Sentry initialization and instrumentation\n\u2502   \u2502   \u251c\u2500\u2500 smtp.ts         # Email SMTP transporter settings\n\u2502   \u2502   \u2514\u2500\u2500 storage.ts      # Integration with cloud storage (e.g., GCS/S3)\n\u2502   \u251c\u2500\u2500 container.ts        # InversifyJS DI container setup\n\u2502   \u251c\u2500\u2500 index.ts            # Application entry point (bootstrapping)\n\u2502   \u251c\u2500\u2500 instrument.ts       # Sentry instrumentation hooks\n\u2502   \u251c\u2500\u2500 inversify-adapter.ts# Adapter to integrate Inversify with routing-controllers\n\u2502   \u251c\u2500\u2500 modules/            # Domain modules, each with controllers/services/repos\n\u2502   \u2502   \u251c\u2500\u2500 anomalies/      # User and course anomaly detection logic\n\u2502   \u2502   \u251c\u2500\u2500 auth/           # Authentication and user management\n\u2502   \u2502   \u251c\u2500\u2500 courses/        # Course and content management\n\u2502   \u2502   \u251c\u2500\u2500 genAI/          # Generative AI integrations (e.g., question generation)\n\u2502   \u2502   \u251c\u2500\u2500 notifications/  # Email, invites, and in-app notifications\n\u2502   \u2502   \u251c\u2500\u2500 quizzes/        # Quiz engine: questions, attempts, grading\n\u2502   \u2502   \u251c\u2500\u2500 settings/       # Proctoring and custom user/course settings\n\u2502   \u2502   \u2514\u2500\u2500 users/          # Enrollment, progress tracking, watch-time metrics\n\u2502   \u251c\u2500\u2500 shared/             # Reusable utilities and cross-cutting code\n\u2502   \u2502   \u251c\u2500\u2500 classes/        # Base classes (e.g., BaseService, BaseRepository)\n\u2502   \u2502   \u251c\u2500\u2500 constants/      # App-wide constants (status codes, roles)\n\u2502   \u2502   \u251c\u2500\u2500 database/       # MongoDB client and connection helpers\n\u2502   \u2502   \u251c\u2500\u2500 functions/      # Small utility functions (OpenAPI generation, auth checks)\n\u2502   \u2502   \u251c\u2500\u2500 interfaces/     # TypeScript interfaces and DTO definitions\n\u2502   \u2502   \u2514\u2500\u2500 middleware/     # Express middleware (logging, error handling)\n\u2502   \u251c\u2500\u2500 types.ts            # Global symbols and types for DI bindings\n\u2502   \u2514\u2500\u2500 utils/              # Miscellaneous helper functions\n\u2502       \u251c\u2500\u2500 env.ts          # Environment variable loader + validation\n\u2502       \u251c\u2500\u2500 index.ts        # Re-export of utility functions\n\u2502       \u251c\u2500\u2500 logDetails.ts   # Prints startup route summary and config\n\u2502       \u2514\u2500\u2500 to-bool.ts      # Safe boolean parsing from strings\n\u251c\u2500\u2500 .env                    # Local environment variables (gitignored)\n\u251c\u2500\u2500 .example.env            # Sample `.env` with required keys\n\u251c\u2500\u2500 Dockerfile              # Docker image for single-service deployment\n\u251c\u2500\u2500 Dockerfile-all          # Docker image bundling all modules\n\u251c\u2500\u2500 firebase.json           # Firebase project and auth config\n\u251c\u2500\u2500 package.json            # NPM scripts and dependency list\n\u251c\u2500\u2500 plopfile.cjs            # Plop generator configuration\n\u251c\u2500\u2500 tsconfig.json           # TypeScript compiler settings\n\u251c\u2500\u2500 typedoc.json            # API documentation config\n\u251c\u2500\u2500 vite.config.ts          # (Optional) Frontend build config\n\u2514\u2500\u2500 README.md               # High-level project overview\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Why this structure?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Modularity"}),": Each domain (",(0,r.jsx)(n.code,{children:"modules/"}),") is isolated for clear ownership and test boundaries."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Scaffold Consistency"}),": ",(0,r.jsx)(n.code,{children:"plop-templates/"})," ensure new features follow a standard pattern (Controllers \u2192 Services \u2192 Repositories)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Separation of Concerns"}),": Config, bootstrap, DI setup, and shared utilities each live in their own folders to reduce coupling."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);