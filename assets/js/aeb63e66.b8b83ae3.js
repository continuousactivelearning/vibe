"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[361],{5062:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"React/Routing","title":"Routing","description":"Routing in React: Type-Safe Route Parameters with React Router & TypeScript","source":"@site/newdocs/React/Routing.md","sourceDirName":"React","slug":"/React/Routing","permalink":"/vibe/newdocs/React/Routing","draft":false,"unlisted":false,"editUrl":"https://github.com/your-org/\u2026/newdocs/React/Routing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"newSidebar","previous":{"title":"Memoization","permalink":"/vibe/newdocs/React/Memoization"},"next":{"title":"State Management in React","permalink":"/vibe/newdocs/React/State Management in React"}}');var s=t(7968),r=t(9880);const a={},o=void 0,d={},c=[{value:"1. Problem Statement",id:"1-problem-statement",level:2},{value:"<strong>Case Study: Medix Patient Portal</strong>",id:"case-study-medix-patient-portal",level:2},{value:"2. Learning Objectives",id:"2-learning-objectives",level:2},{value:"3. Concept Introduction with Analogy",id:"3-concept-introduction-with-analogy",level:2},{value:"<strong>Analogy: The Hospital Reception Desk</strong>",id:"analogy-the-hospital-reception-desk",level:2},{value:"4. Technical Deep Dive",id:"4-technical-deep-dive",level:2},{value:"<strong>D. Type-Safe Route Config and Advanced Patterns</strong>",id:"d-type-safe-route-config-and-advanced-patterns",level:2},{value:"Common Pitfalls &amp; Best Practices (React Router Params)",id:"common-pitfalls--best-practices-react-router-params",level:2},{value:"5. Step-by-Step Data Modeling &amp; Code Walkthrough",id:"5-step-by-step-data-modeling--code-walkthrough",level:2},{value:"6. Interactive Challenge / Mini-Project",id:"6-interactive-challenge--mini-project",level:2},{value:"7. Common Pitfalls &amp; Best Practices",id:"7-common-pitfalls--best-practices",level:2},{value:"Common Pitfalls &amp; Best Practices (Routing &amp; Params)",id:"common-pitfalls--best-practices-routing--params",level:2},{value:"8. Optional: Programmer\u2019s Workflow Checklist",id:"8-optional-programmers-workflow-checklist",level:2}];function l(e){const n={br:"br",code:"code",h2:"h2",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Routing in React: Type-Safe Route Parameters with React Router & TypeScript"}),"\n",(0,s.jsx)(n.h2,{id:"1-problem-statement",children:"1. Problem Statement"}),"\n",(0,s.jsx)(n.h2,{id:"case-study-medix-patient-portal",children:(0,s.jsx)(n.strong,{children:"Case Study: Medix Patient Portal"})}),"\n",(0,s.jsx)(n.p,{children:"Medix is building a patient portal:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Each patient, doctor, and appointment has a unique ID in the URL (e.g.,  ",(0,s.jsx)(n.code,{children:"/patients/:patientId/appointments/:appointmentId"}),")."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"The dashboard must display details for the correct patient/appointment and prevent type errors (e.g., using a string where a number is expected)."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Developers want to catch mistakes at compile-time, not after deployment (e.g., a route handler expecting a  ",(0,s.jsx)(n.code,{children:"number"}),"  but getting  ",(0,s.jsx)(n.code,{children:"undefined"}),")."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"The codebase must remain maintainable as routes grow more complex."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)("img",{src:"https://i.postimg.cc/QVG237XG/ract5.png",alt:"Sample Image",width:"400"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"The challenge:"}),(0,s.jsx)(n.br,{}),"\n","How do you define, use, and enforce type-safe dynamic route parameters in React Router, so your navigation and data fetching are both robust and error-free?"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"2-learning-objectives",children:"2. Learning Objectives"}),"\n",(0,s.jsx)(n.p,{children:"By the end of this tutorial, you will:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Define dynamic routes in React Router with parameters (e.g.,  ",(0,s.jsx)(n.code,{children:"/patients/:patientId"}),")."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Use TypeScript interfaces and generics to type route params."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Extract and validate params in components using  ",(0,s.jsx)(n.code,{children:"useParams"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Prevent common runtime errors (e.g., missing/undefined params, wrong types)."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Explore advanced patterns for type-safe navigation and route config."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"3-concept-introduction-with-analogy",children:"3. Concept Introduction with Analogy"}),"\n",(0,s.jsx)(n.h2,{id:"analogy-the-hospital-reception-desk",children:(0,s.jsx)(n.strong,{children:"Analogy: The Hospital Reception Desk"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Routes"}),"  are like appointment slips: Each slip has fields (patient ID, appointment ID) that must be filled out correctly."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"TypeScript"}),"  is the receptionist: It checks every slip for missing or mistyped info before sending it to the doctor."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"React Router"}),"  is the hospital\u2019s navigation system: It makes sure each patient/doctor/appointment page receives the right information, in the right format, every time."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"4-technical-deep-dive",children:"4. Technical Deep Dive"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A. Defining Dynamic Routes with Parameters"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["In React Router, you define parameters in the path using  ",(0,s.jsx)(n.code,{children:":paramName"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'<Route path="/patients/:patientId/appointments/:appointmentId" element={<AppointmentDetails />} />\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"These parameters are parsed from the URL and made available to your component."}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["B. Extracting and Typing Route Parameters with  ",(0,s.jsx)(n.code,{children:"useParams"})]})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The  ",(0,s.jsx)(n.code,{children:"useParams"}),"  hook returns an object with the params from the URL."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"In TypeScript, you can specify the expected param types using a generic"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { useParams } from 'react-router-dom';\n\ninterface AppointmentParams {\n  patientId: string;\n  appointmentId: string;\n}\n\nconst AppointmentDetails: React.FC = () => {\n  const { patientId, appointmentId } = useParams<AppointmentParams>();\n  // patientId and appointmentId are now strongly typed as string\n  return (\n    <div>\n      <h1>Patient: {patientId}</h1>\n      <h2>Appointment: {appointmentId}</h2>\n    </div>\n  );\n};\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"If you expect a number, convert and validate:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const { appointmentId } = useParams<AppointmentParams>();\nconst numericId = Number(appointmentId);\nif (isNaN(numericId)) return <div>Invalid appointment ID</div>;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"C. Passing and Navigating with Parameters"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use the  ",(0,s.jsx)(n.code,{children:"Link"}),"  or  ",(0,s.jsx)(n.code,{children:"useNavigate"}),"  to create URLs with params:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { Link } from 'react-router-dom';\n\n<Link to={`/patients/${patientId}/appointments/${appointmentId}`}>View Appointment</Link>\n"})}),"\n",(0,s.jsx)(n.p,{children:"For programmatic navigation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { useNavigate } from 'react-router-dom';\nconst navigate = useNavigate();\nnavigate(`/patients/${patientId}/appointments/${appointmentId}`);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"d-type-safe-route-config-and-advanced-patterns",children:(0,s.jsx)(n.strong,{children:"D. Type-Safe Route Config and Advanced Patterns"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Libraries like [react-router-typesafe-routes] and [react-router-typed-object] provide helpers for even stricter typing, including:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Compile-time errors for missing/wrong params."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Type-safe navigation helpers."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"You can also infer types from route path strings using TypeScript conditional types and template literals."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"common-pitfalls--best-practices-react-router-params",children:"Common Pitfalls & Best Practices (React Router Params)"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Pitfall"}),(0,s.jsx)(n.th,{children:"Best Practice"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Accessing params without typing"}),(0,s.jsxs)(n.td,{children:["Always use ",(0,s.jsx)(n.code,{children:"useParams<YourParams>()"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:["Expecting query params in ",(0,s.jsx)(n.code,{children:"useParams"})]}),(0,s.jsxs)(n.td,{children:["Only path params are returned by ",(0,s.jsx)(n.code,{children:"useParams"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Forgetting to validate param types"}),(0,s.jsxs)(n.td,{children:["Convert and check (e.g., ",(0,s.jsx)(n.code,{children:"parseInt"}),", ",(0,s.jsx)(n.code,{children:"isNaN"}),")"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Using params before they\u2019re loaded"}),(0,s.jsx)(n.td,{children:"Handle undefined cases for async routes"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"5-step-by-step-data-modeling--code-walkthrough",children:"5. Step-by-Step Data Modeling & Code Walkthrough"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"A. Define Routes with Parameters"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport AppointmentDetails from './AppointmentDetails';\n\nconst App = () => (\n  <BrowserRouter>\n    <Routes>\n      <Route path=\"/patients/:patientId/appointments/:appointmentId\" element={<AppointmentDetails />} />\n    </Routes>\n  </BrowserRouter>\n);\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"B. Extract and Type Params in the Component"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// AppointmentDetails.tsx\nimport { useParams } from 'react-router-dom';\n\ninterface AppointmentParams {\n patientId: string;\n appointmentId: string;\n}\n\nconst AppointmentDetails: React.FC = () => {\n const { patientId, appointmentId } = useParams<AppointmentParams>();\n\n // Validate and use parameters\n if (!patientId || !appointmentId) {\n   return <div>Missing or invalid parameters</div>;\n }\n\n // Optionally convert to number if needed\n const apptId = Number(appointmentId);\n if (isNaN(apptId)) {\n   return <div>Invalid appointment ID</div>;\n }\n\n return (\n   <div>\n     <h1>Patient: {patientId}</h1>\n     <h2>Appointment: {apptId}</h2>\n     {/* Fetch and display appointment details */}\n   </div>\n );\n};\n\nexport default AppointmentDetails;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"C. Navigating with Typed Params"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { Link } from 'react-router-dom';\n\nconst PatientRow: React.FC<{ patientId: string }> = ({ patientId }) => (\n  <Link to={`/patients/${patientId}/appointments/123`}>View Appointment 123</Link>\n);\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"D. Advanced: Type-Safe Navigation with Helper Libraries"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"With [react-router-typesafe-routes]"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import { route, useTypedParams } from "react-router-typesafe-routes";\nconst routes = route({ patient: route({ path: "patients/:patientId" }) });\n// In component:\nconst { patientId } = useTypedParams(routes.patient);\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"With [react-router-typed-object]"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const params = ROUTES["/patients/:patientId/appointments/:appointmentId"].path.useParams();\n// params.patientId and params.appointmentId are typed as string\n'})}),"\n",(0,s.jsx)(n.h2,{id:"6-interactive-challenge--mini-project",children:"6. Interactive Challenge / Mini-Project"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Your Turn!"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Define a route  ",(0,s.jsx)(n.code,{children:"/doctors/:doctorId/patients/:patientId"}),"  and a  ",(0,s.jsx)(n.code,{children:"DoctorPatientDetails"}),"  component."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Use a typed interface for params and extract them in the component."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Validate that both IDs are present and numeric; display an error if not."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Add a link from a doctor list to a specific doctor/patient page, passing the IDs as parameters."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"7-common-pitfalls--best-practices",children:"7. Common Pitfalls & Best Practices"}),"\n",(0,s.jsx)(n.h2,{id:"common-pitfalls--best-practices-routing--params",children:"Common Pitfalls & Best Practices (Routing & Params)"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Pitfall"}),(0,s.jsx)(n.th,{children:"Best Practice"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Not typing params"}),(0,s.jsxs)(n.td,{children:["Always use ",(0,s.jsx)(n.code,{children:"useParams<YourParams>()"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Not validating param types"}),(0,s.jsx)(n.td,{children:"Check and convert as needed"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:["Expecting query params in ",(0,s.jsx)(n.code,{children:"useParams"})]}),(0,s.jsxs)(n.td,{children:["Use ",(0,s.jsx)(n.code,{children:"useSearchParams"})," for query strings"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Hardcoding route strings"}),(0,s.jsx)(n.td,{children:"Use helper libraries for type-safe navigation"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"8-optional-programmers-workflow-checklist",children:"8. Optional: Programmer\u2019s Workflow Checklist"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Define route params in the path using  ",(0,s.jsx)(n.code,{children:":param"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Create a TypeScript interface for param types."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Always use  ",(0,s.jsx)(n.code,{children:"useParams<YourParams>()"}),"  in components."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Validate and convert params as needed (e.g., parseInt)."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Use  ",(0,s.jsx)(n.code,{children:"Link"}),"  or  ",(0,s.jsx)(n.code,{children:"useNavigate"}),"  for navigation, passing params as strings."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Consider helper libraries for large/complex route configs."}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},9880:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(4700);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);