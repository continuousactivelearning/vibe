"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[816],{3033:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>t});var i=s(4700);const r={},l=i.createContext(r);function c(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(l.Provider,{value:n},e.children)}},7410:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"contributing/conventions/naming-guide","title":"Naming Conventions","description":"This document outlines the naming conventions for our TypeScript codebase, as enforced by gts and our project guidelines.","source":"@site/docs/contributing/conventions/naming-guide.md","sourceDirName":"contributing/conventions","slug":"/contributing/conventions/naming-guide","permalink":"/vibe/docs/contributing/conventions/naming-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/continuousactivelearning/vibe/edit/main/docs/docs/contributing/conventions/naming-guide.md","tags":[],"version":"current","frontMatter":{"title":"Naming Conventions"},"sidebar":"tutorialSidebar","previous":{"title":"Commit Convention","permalink":"/vibe/docs/contributing/conventions/commit-guide"},"next":{"title":"Pull Request Convention","permalink":"/vibe/docs/contributing/conventions/pr-guide"}}');var r=s(7968),l=s(3033);const c={title:"Naming Conventions"},t="Naming Conventions",o={},d=[{value:"Files",id:"files",level:2},{value:"Variables and Functions",id:"variables-and-functions",level:2},{value:"Classes",id:"classes",level:2},{value:"Interfaces",id:"interfaces",level:2},{value:"Enums",id:"enums",level:2},{value:"Generics",id:"generics",level:2},{value:"Additional Guidelines",id:"additional-guidelines",level:2}];function a(e){const n={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"naming-conventions",children:"Naming Conventions"})}),"\n",(0,r.jsxs)(n.p,{children:["This document outlines the naming conventions for our TypeScript codebase, as enforced by ",(0,r.jsx)(n.a,{href:"https://github.com/google/gts",children:"gts"})," and our project guidelines."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"files",children:"Files"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Files Containing a Single Class or Function:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Class File:"})," If a file contains a single class, the file name should exactly match the class name (using PascalCase).",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.em,{children:"Example:"})," A file containing the ",(0,r.jsx)(n.code,{children:"UserService"})," class should be named ",(0,r.jsx)(n.code,{children:"UserService.ts"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Function File:"})," If a file contains a single function, the file name should exactly match the function name (using camelCase).",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.em,{children:"Example:"})," A file containing the function ",(0,r.jsx)(n.code,{children:"getUser"})," should be named ",(0,r.jsx)(n.code,{children:"getUser.ts"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Other Files:"}),(0,r.jsx)(n.br,{}),"\n","For files containing multiple classes or functions, use PascalCase with context relavent name.",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.em,{children:"Example:"})," ",(0,r.jsx)(n.code,{children:"UtilsHelper.ts"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"variables-and-functions",children:"Variables and Functions"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Variables & Function Names:"}),(0,r.jsx)(n.br,{}),"\n","Use ",(0,r.jsx)(n.strong,{children:"camelCase"}),".",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.em,{children:"Examples:"})," ",(0,r.jsx)(n.code,{children:"getUser"}),", ",(0,r.jsx)(n.code,{children:"calculateTotal"}),", ",(0,r.jsx)(n.code,{children:"userName"})]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"classes",children:"Classes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Class Names:"}),(0,r.jsx)(n.br,{}),"\n","Use ",(0,r.jsx)(n.strong,{children:"PascalCase"}),".",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.em,{children:"Example:"})," ",(0,r.jsx)(n.code,{children:"UserService"})]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"interfaces",children:"Interfaces"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Interface Names:"}),(0,r.jsx)(n.br,{}),"\n","Prefix interface names with an ",(0,r.jsx)(n.strong,{children:"I"})," and use ",(0,r.jsx)(n.strong,{children:"PascalCase"}),".",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.em,{children:"Examples:"})," ",(0,r.jsx)(n.code,{children:"IUser"}),", ",(0,r.jsx)(n.code,{children:"IAuthConfig"})]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"enums",children:"Enums"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Enum Names:"}),(0,r.jsx)(n.br,{}),"\n","Use ",(0,r.jsx)(n.strong,{children:"PascalCase"})," for enum names.",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.em,{children:"Examples:"})," ",(0,r.jsx)(n.code,{children:"UserRole"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Enum Values:"}),(0,r.jsx)(n.br,{}),"\n","Use ",(0,r.jsx)(n.strong,{children:"UPPER_SNAKE_CASE"})," for enum values.",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.em,{children:"Examples:"})," ",(0,r.jsx)(n.code,{children:"ADMIN"}),", ",(0,r.jsx)(n.code,{children:"USER"})]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"generics",children:"Generics"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Generic Type Parameters:"}),(0,r.jsx)(n.br,{}),"\n","Use a single uppercase letter or a descriptive name if necessary.",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.em,{children:"Examples:"})," ",(0,r.jsx)(n.code,{children:"T"}),", ",(0,r.jsx)(n.code,{children:"K"}),", ",(0,r.jsx)(n.code,{children:"V"})]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"additional-guidelines",children:"Additional Guidelines"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Remove Module Name Prefixes:"}),(0,r.jsx)(n.br,{}),"\n","Do not include module names in file or type names."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Consistency:"}),(0,r.jsx)(n.br,{}),"\n","Use these conventions consistently across the codebase for clarity and maintainability."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["For more details, please refer to the ",(0,r.jsx)(n.a,{href:"https://github.com/google/gts",children:"gts documentation"})," and ask in discussions if you have any questions."]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);