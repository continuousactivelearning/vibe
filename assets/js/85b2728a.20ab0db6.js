"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8932],{4318:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(4700);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}},6450:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"React/State Management in React","title":"State Management in React","description":"State Management in React: Context Providers & Zustand (with TypeScript)","source":"@site/newdocs/React/State Management in React.md","sourceDirName":"React","slug":"/React/State Management in React","permalink":"/vibe/newdocs/React/State Management in React","draft":false,"unlisted":false,"editUrl":"https://github.com/your-org/\u2026/newdocs/React/State Management in React.md","tags":[],"version":"current","frontMatter":{},"sidebar":"newSidebar","previous":{"title":"Routing","permalink":"/vibe/newdocs/React/Routing"},"next":{"title":"TSX & Typed Components_","permalink":"/vibe/newdocs/React/TSX & Typed Components_"}}');var r=t(7968),i=t(4318);const a={},o=void 0,l={},c=[{value:"1. Problem Statement",id:"1-problem-statement",level:2},{value:"<strong>Case Study: TaskFlow Project Management</strong>",id:"case-study-taskflow-project-management",level:2},{value:"2. Learning Objectives",id:"2-learning-objectives",level:2},{value:"3. Concept Introduction with Analogy",id:"3-concept-introduction-with-analogy",level:2},{value:"<strong>Analogy: The TaskFlow Control Center</strong>",id:"analogy-the-taskflow-control-center",level:2},{value:"4. Technical Deep Dive",id:"4-technical-deep-dive",level:2},{value:"<strong>Type-Safe Context Example: Theme</strong>",id:"type-safe-context-example-theme",level:2},{value:"<strong>Why Zustand?</strong>",id:"why-zustand",level:2},{value:"<strong>3. Async Actions and Middleware</strong>",id:"3-async-actions-and-middleware",level:2},{value:"State Management: Context Provider vs Zustand",id:"state-management-context-provider-vs-zustand",level:2},{value:"5. Step-by-Step Data Modeling &amp; Code Walkthrough",id:"5-step-by-step-data-modeling--code-walkthrough",level:2},{value:"6. Interactive Challenge / Mini-Project",id:"6-interactive-challenge--mini-project",level:2},{value:"7. Common Pitfalls &amp; Best Practices",id:"7-common-pitfalls--best-practices",level:2},{value:"Common Pitfalls &amp; Best Practices (Context vs Zustand)",id:"common-pitfalls--best-practices-context-vs-zustand",level:2},{value:"8. Optional: Programmer\u2019s Workflow Checklist",id:"8-optional-programmers-workflow-checklist",level:2}];function d(e){const n={br:"br",code:"code",h2:"h2",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"State Management in React: Context Providers & Zustand (with TypeScript)"}),"\n",(0,r.jsx)(n.h2,{id:"1-problem-statement",children:"1. Problem Statement"}),"\n",(0,r.jsx)(n.h2,{id:"case-study-taskflow-project-management",children:(0,r.jsx)(n.strong,{children:"Case Study: TaskFlow Project Management"})}),"\n",(0,r.jsx)(n.p,{children:"TaskFlow is a project management app:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Users can add, edit, and complete tasks from anywhere in the app."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The theme (light/dark) and user profile must be available globally."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"As the app grows, prop drilling and context performance become issues."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The team wants a state management solution that is  ",(0,r.jsx)(n.strong,{children:"type-safe"}),", easy to test, and scales from small to large features."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)("img",{src:"https://i.postimg.cc/nLjNCTCb/react6.png",alt:"Sample Image",width:"400"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"The challenge:"}),(0,r.jsx)(n.br,{}),"\n","How do you architect state management so that global data (user, theme, tasks) is accessible, type-safe, and performant\u2014without unnecessary re-renders or boilerplate?"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"2-learning-objectives",children:"2. Learning Objectives"}),"\n",(0,r.jsx)(n.p,{children:"By the end of this tutorial, you will:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Understand when to use Context Providers vs. Zustand."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Create a type-safe React Context Provider."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Build and use a Zustand store with TypeScript."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Combine Context and Zustand for scalable, maintainable state."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Avoid common pitfalls (re-renders, type errors, boilerplate)."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"3-concept-introduction-with-analogy",children:"3. Concept Introduction with Analogy"}),"\n",(0,r.jsx)(n.h2,{id:"analogy-the-taskflow-control-center",children:(0,r.jsx)(n.strong,{children:"Analogy: The TaskFlow Control Center"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Context Providers"}),"  are like a central PA system: announcements (state) are broadcast to all rooms (components) that listen, but every room hears every change."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Zustand"}),"  is like a smart intercom: each room subscribes only to the messages it cares about, and only those rooms react when something changes\u2014saving energy and avoiding noise."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"4-technical-deep-dive",children:"4. Technical Deep Dive"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"A. Context Providers with TypeScript"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"When to Use Context"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Best for  ",(0,r.jsx)(n.strong,{children:"global, rarely-changing state"}),"  (theme, auth, locale)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Avoid for large, frequently-changing data (e.g., task lists)."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"type-safe-context-example-theme",children:(0,r.jsx)(n.strong,{children:"Type-Safe Context Example: Theme"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import React, { useState, useContext } from 'react';\n\n// 1. Define the context type\ninterface ThemeContextType {\n theme: 'light' | 'dark';\n toggleTheme: () => void;\n}\n\n// 2. Create the context\nconst ThemeContext = React.createContext<ThemeContextType | undefined>(undefined);\n\n// 3. Provider implementation\nexport const ThemeProvider = ({ children }) => {\n const [theme, setTheme] = useState<'light' | 'dark'>('light');\n const toggleTheme = () => setTheme(t => (t === 'light' ? 'dark' : 'light'));\n\n return (\n   <ThemeContext.Provider value={{ theme, toggleTheme }}>\n     {children}\n   </ThemeContext.Provider>\n );\n};\n\n// 4. Custom hook for safe consumption\nexport const useTheme = () => {\n const context = useContext(ThemeContext);\n if (!context) throw new Error('useTheme must be used within ThemeProvider');\n return context;\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { useTheme } from './ThemeProvider';\n\nfunction ThemeSwitcher() {\n const { theme, toggleTheme } = useTheme();\n return (\n   <button onClick={toggleTheme}>\n     Switch to {theme === 'light' ? 'dark' : 'light'}\n   </button>\n );\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Key Points:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Types are enforced at every level."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"If a component is outside the provider, you get a clear error."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"No prop drilling\u2014any component can access the theme."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"B. Zustand: Modern, Type-Safe Global State"})}),"\n",(0,r.jsx)(n.h2,{id:"why-zustand",children:(0,r.jsx)(n.strong,{children:"Why Zustand?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Minimal API, no boilerplate, no reducers or providers needed."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Selective subscription:"}),"  Components only re-render for the state they use."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Great TypeScript support out of the box."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Handles async actions, middleware, and even persistence."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Install Zustand"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"`npm install zustand` \n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"1. Define the State Interface"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// store/userStore.ts\nimport { create } from 'zustand';\n\ninterface User {\n id: string;\n name: string;\n email: string;\n}\n\ninterface UserStore {\n user: User | null;\n setUser: (user: User) => void;\n clearUser: () => void;\n}\n\nconst useUserStore = create<UserStore>((set) => ({\n user: null,\n setUser: (user) => set({ user }),\n clearUser: () => set({ user: null }),\n}));\n\nexport default useUserStore;\n\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"2. Using the Store in Components"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import useUserStore from './store/userStore';\n\nfunction Profile() {\n const user = useUserStore((state) => state.user);\n const clearUser = useUserStore((state) => state.clearUser);\n\n if (!user) return <div>Not logged in</div>;\n return (\n   <div>\n     <h2>{user.name} ({user.email})</h2>\n     <button onClick={clearUser}>Logout</button>\n   </div>\n );\n}\n\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Selector pattern:"}),"  Components only re-render when the selected state changes."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"No context provider needed:"}),"  Just import and use the store anywhere."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"3-async-actions-and-middleware",children:(0,r.jsx)(n.strong,{children:"3. Async Actions and Middleware"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"interface Task {\n id: string;\n title: string;\n completed: boolean;\n}\n\ninterface TaskStore {\n tasks: Task[];\n fetchTasks: () => Promise<void>;\n addTask: (title: string) => void;\n}\n\nconst useTaskStore = create<TaskStore>((set) => ({\n tasks: [],\n fetchTasks: async () => {\n   const response = await fetch('/api/tasks');\n   const tasks = await response.json();\n   set({ tasks });\n },\n addTask: (title) =>\n   set((state) => ({\n     tasks: [...state.tasks, { id: Date.now().toString(), title, completed: false }],\n   })),\n}));\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"C. Combining Context and Zustand"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Use  ",(0,r.jsx)(n.strong,{children:"Context"}),"  for global app settings (theme, locale, auth)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Use  ",(0,r.jsx)(n.strong,{children:"Zustand"}),"  for business/domain state (tasks, projects, notifications)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"You can wrap Zustand stores in context if you want to provide custom hooks or middleware, but it\u2019s often not necessary."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"D. Comparison and Best Practices"})}),"\n",(0,r.jsx)(n.h2,{id:"state-management-context-provider-vs-zustand",children:"State Management: Context Provider vs Zustand"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Feature"}),(0,r.jsx)(n.th,{children:"Context Provider"}),(0,r.jsx)(n.th,{children:"Zustand"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Boilerplate"}),(0,r.jsx)(n.td,{children:"Medium (provider, hooks)"}),(0,r.jsx)(n.td,{children:"Minimal (just a hook)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Type Safety"}),(0,r.jsx)(n.td,{children:"Manual (define types)"}),(0,r.jsx)(n.td,{children:"Built-in via generics"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Performance"}),(0,r.jsx)(n.td,{children:"Risk of over-render"}),(0,r.jsx)(n.td,{children:"Fine-grained subscriptions"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Async Actions"}),(0,r.jsx)(n.td,{children:"Manual (custom logic)"}),(0,r.jsx)(n.td,{children:"Native support"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Persistence"}),(0,r.jsx)(n.td,{children:"Manual"}),(0,r.jsx)(n.td,{children:"Built-in (middleware)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Best For"}),(0,r.jsx)(n.td,{children:"Theme, locale, auth"}),(0,r.jsx)(n.td,{children:"Tasks, user, large state"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"5-step-by-step-data-modeling--code-walkthrough",children:"5. Step-by-Step Data Modeling & Code Walkthrough"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"A. User Context Provider (Theme Example)"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// context/ThemeContext.tsx\nimport React, { useState, useContext } from 'react';\n\ninterface ThemeContextType {\n theme: 'light' | 'dark';\n toggleTheme: () => void;\n}\n\nconst ThemeContext = React.createContext<ThemeContextType | undefined>(undefined);\n\nexport const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n const [theme, setTheme] = useState<'light' | 'dark'>('light');\n const toggleTheme = () => setTheme(t => (t === 'light' ? 'dark' : 'light'));\n return (\n   <ThemeContext.Provider value={{ theme, toggleTheme }}>\n     {children}\n   </ThemeContext.Provider>\n );\n};\n\nexport const useTheme = () => {\n const ctx = useContext(ThemeContext);\n if (!ctx) throw new Error('useTheme must be used within ThemeProvider');\n return ctx;\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"B. Zustand Store for Tasks"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// store/taskStore.ts\nimport { create } from 'zustand';\n\ninterface Task {\nid: string;\ntitle: string;\ncompleted: boolean;\n}\n\ninterface TaskStore {\ntasks: Task[];\naddTask: (title: string) => void;\ntoggleTask: (id: string) => void;\n}\n\nconst useTaskStore = create<TaskStore>((set) => ({\ntasks: [],\naddTask: (title) =>\n  set((state) => ({\n    tasks: [...state.tasks, { id: Date.now().toString(), title, completed: false }],\n  })),\ntoggleTask: (id) =>\n  set((state) => ({\n    tasks: state.tasks.map((task) =>\n      task.id === id ? { ...task, completed: !task.completed } : task\n    ),\n  })),\n}));\n\nexport default useTaskStore;\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"C. Using Zustand Store in Components"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import useTaskStore from './store/taskStore';\n\nfunction TaskList() {\nconst tasks = useTaskStore((state) => state.tasks);\nconst toggleTask = useTaskStore((state) => state.toggleTask);\n\nreturn (\n <ul>\n   {tasks.map((task) => (\n     <li key={task.id}>\n       <label>\n         <input\n           type=\"checkbox\"\n           checked={task.completed}\n           onChange={() => toggleTask(task.id)}\n         />\n         {task.title}\n       </label>\n     </li>\n   ))}\n </ul>\n);\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"6-interactive-challenge--mini-project",children:"6. Interactive Challenge / Mini-Project"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Your Turn!"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Create a Zustand store for notifications:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Each notification has  ",(0,r.jsx)(n.code,{children:"id"}),",  ",(0,r.jsx)(n.code,{children:"message"}),",  ",(0,r.jsx)(n.code,{children:"type"}),"  (",(0,r.jsx)(n.code,{children:"'info' | 'error' | 'success'"}),"), and  ",(0,r.jsx)(n.code,{children:"read: boolean"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Add actions:  ",(0,r.jsx)(n.code,{children:"addNotification"}),",  ",(0,r.jsx)(n.code,{children:"markAsRead"}),", and  ",(0,r.jsx)(n.code,{children:"clearNotifications"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Use the store in a NotificationList component to display unread notifications and mark them as read."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"7-common-pitfalls--best-practices",children:"7. Common Pitfalls & Best Practices"}),"\n",(0,r.jsx)(n.h2,{id:"common-pitfalls--best-practices-context-vs-zustand",children:"Common Pitfalls & Best Practices (Context vs Zustand)"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Pitfall"}),(0,r.jsx)(n.th,{children:"Best Practice"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Using Context for large, changing state"}),(0,r.jsx)(n.td,{children:"Use Zustand for business/domain state"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Not typing store/actions"}),(0,r.jsx)(n.td,{children:"Always type state and actions for safety"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Unnecessary re-renders in Context"}),(0,r.jsx)(n.td,{children:"Use Zustand\u2019s selectors for performance"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Mixing concerns in one store"}),(0,r.jsx)(n.td,{children:"Split stores by domain (user, tasks, etc.)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Not using custom hooks for Context"}),(0,r.jsx)(n.td,{children:"Always wrap context in a custom hook"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"8-optional-programmers-workflow-checklist",children:"8. Optional: Programmer\u2019s Workflow Checklist"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Use Context for global, rarely-changing settings."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Use Zustand for business/domain state (tasks, notifications, etc.)."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Define TypeScript interfaces for all state and actions."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Use selectors in Zustand to avoid unnecessary re-renders."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Test stores independently from UI components."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);