"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6279],{4318:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>c});var t=s(4700);const i={},l=t.createContext(i);function r(e){const n=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(l.Provider,{value:n},e.children)}},4378:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"React/Zustand Slices and Modular State Architecture","title":"Zustand Slices and Modular State Architecture","description":"Zustand  Slices & Modular  State Architecture: Scaling a Collaborative  Design Platform","source":"@site/newdocs/React/Zustand Slices and Modular State Architecture.md","sourceDirName":"React","slug":"/React/Zustand Slices and Modular State Architecture","permalink":"/vibe/newdocs/React/Zustand Slices and Modular State Architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/your-org/\u2026/newdocs/React/Zustand Slices and Modular State Architecture.md","tags":[],"version":"current","frontMatter":{},"sidebar":"newSidebar","previous":{"title":"Testing & Debugging React Apps with TypeScript","permalink":"/vibe/newdocs/React/Testing & Debugging React Apps with TypeScript"},"next":{"title":"Introduction to TypeScript","permalink":"/vibe/newdocs/Typescript/Introduction to TypeScript/1.1 Introduction to Typescript"}}');var i=s(7968),l=s(4318);const r={},c=void 0,o={},a=[{value:"1. Problem  Statement",id:"1-problem--statement",level:2},{value:"<strong>Case Study: DesignHub \u2013 Real-Time Collaborative  Design</strong>",id:"case-study-designhub--real-time-collaborative--design",level:2},{value:"2. Learning Objectives",id:"2-learning-objectives",level:2},{value:"3. Concept Introduction  with Analogy",id:"3-concept-introduction--with-analogy",level:2},{value:"<strong>Analogy: The DesignHub Control Tower</strong>",id:"analogy-the-designhub-control-tower",level:2},{value:"4. Technical  Deep Dive",id:"4-technical--deep-dive",level:2},{value:"5. Step-by-Step Data Modeling &amp; Code Walkthrough",id:"5-step-by-step-data-modeling--code-walkthrough",level:2},{value:"6. Interactive Challenge / Mini-Project",id:"6-interactive-challenge--mini-project",level:2},{value:"7. Common Pitfalls &amp; Best Practices",id:"7-common-pitfalls--best-practices",level:2},{value:"Common Pitfalls &amp; Best Practices (Zustand Slices)",id:"common-pitfalls--best-practices-zustand-slices",level:2},{value:"8. Optional: Programmer\u2019s Workflow Checklist",id:"8-optional-programmers-workflow-checklist",level:2}];function d(e){const n={br:"br",code:"code",h2:"h2",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Zustand  Slices & Modular  State Architecture: Scaling a Collaborative  Design Platform"}),"\n",(0,i.jsx)(n.h2,{id:"1-problem--statement",children:"1. Problem  Statement"}),"\n",(0,i.jsx)(n.h2,{id:"case-study-designhub--real-time-collaborative--design",children:(0,i.jsx)(n.strong,{children:"Case Study: DesignHub \u2013 Real-Time Collaborative  Design"})}),"\n",(0,i.jsx)(n.p,{children:"DesignHub is  a Figma-like platform  where:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Users  can create, edit, and comment  on design files  in real time."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Each feature  (files, users, comments, notifications, preferences) is managed by  a different team."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"State must  be modular: easy  to test, maintain, and scale as  features grow."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Performance  is critical\u2014only components  using changed  state should  re-render."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Teams  want to use middleware  (devtools, persistence, logging) on  specific state  slices."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)("img",{src:"https://i.postimg.cc/0jRMJ8xG/react9.png",alt:"Sample Image",width:"400"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"The challenge:"}),(0,i.jsx)(n.br,{}),"\n","How do you  architect a global  state system  that is  ",(0,i.jsx)(n.strong,{children:"modular, type-safe, and scalable"}),"\u2014so each feature  team can own  their slice, and  the app remains  fast and maintainable?"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"2-learning-objectives",children:"2. Learning Objectives"}),"\n",(0,i.jsx)(n.p,{children:"By the end of  this tutorial, you will:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Understand  what Zustand  slices are and  why they matter."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Architect  modular state  using slices  for different  features."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Combine  slices into a  single store  with full type  safety."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Apply  middleware to  specific slices  or the whole  store."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Test  and maintain  slices independently."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Avoid pitfalls  like tight coupling  and unnecessary  re-renders."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"3-concept-introduction--with-analogy",children:"3. Concept Introduction  with Analogy"}),"\n",(0,i.jsx)(n.h2,{id:"analogy-the-designhub-control-tower",children:(0,i.jsx)(n.strong,{children:"Analogy: The DesignHub Control Tower"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Slices"}),"  are  like specialized  teams in a control  tower: one team  manages flights, one manages  weather, one  manages communications."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Each team  (slice) has its  own dashboard, rules, and logs\u2014but they all  work together  in the same tower  (store)."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"If  the weather team  updates a forecast, only the weather  dashboard changes\u2014not the flight  or comms dashboards."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"4-technical--deep-dive",children:"4. Technical  Deep Dive"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"A. What Are Zustand  Slices?"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["A  ",(0,i.jsx)(n.strong,{children:"slice"}),"  is  a function that  returns a piece  of state and  its actions, with  its own types."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Slices are  composed together  to create the  full store."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Each  slice can have  its own middleware, selectors, and  tests."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why slices?"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Modularity: Each  feature owns  its state logic."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Scalability: Add  or remove features  without touching  unrelated code."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Testability: Test  slices in isolation."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Performance: Components subscribe  only to the state  they use."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"B. Defining Slices: Example  Types"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// store/slices/userSlice.ts\nexport interface UserSlice {\n  user: { id: string; name: string } | null;\n  setUser: (user: { id: string; name: string }) => void;\n  clearUser: () => void;\n}\n\nexport const createUserSlice = (set) => ({\n  user: null,\n  setUser: (user) => set({ user }),\n  clearUser: () => set({ user: null }),\n});\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// store/slices/fileSlice.ts\nexport interface File {\n  id: string;\n  name: string;\n  content: string;\n}\nexport interface FileSlice {\n  files: File[];\n  addFile: (file: File) => void;\n  updateFile: (id: string, content: string) => void;\n}\n\nexport const createFileSlice = (set, get) => ({\n  files: [],\n  addFile: (file) => set((state) => ({ files: [...state.files, file] })),\n  updateFile: (id, content) =>\n    set((state) => ({\n      files: state.files.map((f) =>\n        f.id === id ? { ...f, content } : f\n      ),\n    })),\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"C. Combining Slices into a Single Store"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import { create } from 'zustand';\nimport { devtools, persist } from 'zustand/middleware';\nimport { createUserSlice, UserSlice } from './slices/userSlice';\nimport { createFileSlice, FileSlice } from './slices/fileSlice';\n\ntype DesignHubStore = UserSlice & FileSlice;\n\nexport const useDesignHubStore = create<DesignHubStore>()(\n  devtools(\n    persist(\n      (set, get) => ({\n        ...createUserSlice(set, get),\n        ...createFileSlice(set, get),\n        // Add more slices here\n      }),\n      { name: 'designhub-store' }\n    )\n  )\n);\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Order matters:"}),"  Middleware like  ",(0,i.jsx)(n.code,{children:"devtools"}),"  and  ",(0,i.jsx)(n.code,{children:"persist"}),"  can wrap the whole store or individual slices."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"D. Using Slices in Components"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import { useDesignHubStore } from './store';\n\nfunction UserProfile() {\n  const user = useDesignHubStore((s) => s.user);\n  const setUser = useDesignHubStore((s) => s.setUser);\n\n  if (!user) return <button onClick={() => setUser({ id: 'u1', name: 'Alex' })}>Login</button>;\n  return <div>Welcome, {user.name}</div>;\n}\n\nfunction FileList() {\n  const files = useDesignHubStore((s) => s.files);\n  const addFile = useDesignHubStore((s) => s.addFile);\n\n  return (\n    <div>\n      <button onClick={() => addFile({ id: Date.now().toString(), name: 'New', content: '' })}>\n        Add File\n      </button>\n      <ul>\n        {files.map((f) => (\n          <li key={f.id}>{f.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"E. Testing and Maintaining Slices"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Slices can be tested independently by calling their factory functions with mock  ",(0,i.jsx)(n.code,{children:"set"}),"  and  ",(0,i.jsx)(n.code,{children:"get"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Example (Jest)"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import { createUserSlice } from './userSlice';\n\ntest('setUser sets user', () => {\n  let state = { user: null };\n  const set = (fn) => { state = { ...state, ...fn(state) }; };\n  const slice = createUserSlice(set);\n  slice.setUser({ id: 'u2', name: 'Sam' });\n  expect(state.user.name).toBe('Sam');\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"5-step-by-step-data-modeling--code-walkthrough",children:"5. Step-by-Step Data Modeling & Code Walkthrough"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"A. Create Feature Slices"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// store/slices/commentSlice.ts\nexport interface Comment {\n  id: string;\n  fileId: string;\n  author: string;\n  text: string;\n}\nexport interface CommentSlice {\n  comments: Comment[];\n  addComment: (comment: Comment) => void;\n  getCommentsByFile: (fileId: string) => Comment[];\n}\nexport const createCommentSlice = (set, get) => ({\n  comments: [],\n  addComment: (comment) => set((state) => ({ comments: [...state.comments, comment] })),\n  getCommentsByFile: (fileId) => get().comments.filter((c) => c.fileId === fileId),\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"B. Combine All Slices in the Store"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import { create } from 'zustand';\nimport { devtools, persist } from 'zustand/middleware';\nimport { createUserSlice, UserSlice } from './slices/userSlice';\nimport { createFileSlice, FileSlice } from './slices/fileSlice';\nimport { createCommentSlice, CommentSlice } from './slices/commentSlice';\n\ntype DesignHubStore = UserSlice & FileSlice & CommentSlice;\n\nexport const useDesignHubStore = create<DesignHubStore>()(\n  devtools(\n    persist(\n      (set, get) => ({\n        ...createUserSlice(set, get),\n        ...createFileSlice(set, get),\n        ...createCommentSlice(set, get),\n      }),\n      { name: 'designhub-store' }\n    )\n  )\n);\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"C. Using Slices in the App"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function CommentsPanel({ fileId }) {\n  const comments = useDesignHubStore((s) => s.getCommentsByFile(fileId));\n  const addComment = useDesignHubStore((s) => s.addComment);\n\n  return (\n    <div>\n      <ul>\n        {comments.map((c) => (\n          <li key={c.id}>{c.author}: {c.text}</li>\n        ))}\n      </ul>\n      <button onClick={() => addComment({ id: Date.now().toString(), fileId, author: 'Alex', text: 'Hello!' })}>\n        Add Comment\n      </button>\n    </div>\n  );\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"6-interactive-challenge--mini-project",children:"6. Interactive Challenge / Mini-Project"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Your Turn!"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Create a  ",(0,i.jsx)(n.code,{children:"notificationsSlice"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Fields:  ",(0,i.jsx)(n.code,{children:"notifications: { id: string; message: string; read: boolean }[]"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Actions:  ",(0,i.jsx)(n.code,{children:"addNotification"}),",  ",(0,i.jsx)(n.code,{children:"markAsRead"}),",  ",(0,i.jsx)(n.code,{children:"clearNotifications"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Add the slice to the main store."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Build a  ",(0,i.jsx)(n.code,{children:"NotificationsPanel"}),"  component that displays unread notifications and lets users mark them as read."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"7-common-pitfalls--best-practices",children:"7. Common Pitfalls & Best Practices"}),"\n",(0,i.jsx)(n.h2,{id:"common-pitfalls--best-practices-zustand-slices",children:"Common Pitfalls & Best Practices (Zustand Slices)"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Pitfall"}),(0,i.jsx)(n.th,{children:"Best Practice"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Mixing unrelated state in one slice"}),(0,i.jsx)(n.td,{children:"Keep slices focused on a single feature"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Tight coupling between slices"}),(0,i.jsx)(n.td,{children:"Use actions/selectors, not direct state access"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Not typing slices"}),(0,i.jsx)(n.td,{children:"Always define interfaces for each slice"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Middleware order mistakes"}),(0,i.jsxs)(n.td,{children:["Apply ",(0,i.jsx)(n.code,{children:"devtools"}),"/",(0,i.jsx)(n.code,{children:"persist"})," after combining slices"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Not testing slices independently"}),(0,i.jsxs)(n.td,{children:["Test each slice with mock ",(0,i.jsx)(n.code,{children:"set"}),"/",(0,i.jsx)(n.code,{children:"get"})]})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"8-optional-programmers-workflow-checklist",children:"8. Optional: Programmer\u2019s Workflow Checklist"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Define an interface and factory for each slice."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Combine slices in the main store with middleware."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Use selectors to subscribe only to needed state."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Test slices in isolation with mock set/get."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Document slice boundaries and responsibilities."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);