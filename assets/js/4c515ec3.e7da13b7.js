"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3842],{2485:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"getting-started/project-structure","title":"Project Structure","description":"\ud83d\udcc1 Project Structure","source":"@site/docs/getting-started/project-structure.md","sourceDirName":"getting-started","slug":"/getting-started/project-structure","permalink":"/vibe/docs/getting-started/project-structure","draft":false,"unlisted":false,"editUrl":"https://github.com/continuousactivelearning/vibe/edit/main/docs/docs/getting-started/project-structure.md","tags":[],"version":"current","frontMatter":{"title":"Project Structure"},"sidebar":"tutorialSidebar","previous":{"title":"Installation","permalink":"/vibe/docs/getting-started/intro"},"next":{"title":"Concepts","permalink":"/vibe/docs/category/concepts"}}');var s=t(7968),o=t(3033);const i={title:"Project Structure"},c=void 0,d={},a=[{value:"\ud83d\udcc1 Project Structure",id:"-project-structure",level:2},{value:"\ud83d\uddc2\ufe0f Root Directory",id:"\ufe0f-root-directory",level:3},{value:"\ud83d\udd19 Backend Structure (<code>/backend</code>)",id:"-backend-structure-backend",level:3},{value:"\ud83d\udd0d Notes",id:"-notes",level:3}];function l(e){const n={code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-project-structure",children:"\ud83d\udcc1 Project Structure"}),"\n",(0,s.jsx)(n.p,{children:"This project is organized into a modular monorepo format with separate folders for the backend, frontend, documentation, and configuration. Below is an overview of the core structure:"}),"\n",(0,s.jsx)(n.h3,{id:"\ufe0f-root-directory",children:"\ud83d\uddc2\ufe0f Root Directory"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"/\n\u251c\u2500\u2500 .github/              # GitHub workflows and actions\n\u251c\u2500\u2500 .husky/               # Git hooks for pre-commit/CI setup\n\u251c\u2500\u2500 backend/              # Backend source code (Node.js + TypeScript)\n\u251c\u2500\u2500 docs/                 # Documentation site (Docusaurus)\n\u251c\u2500\u2500 frontend/             # Frontend codebase (React/Next.js/etc.)\n\u251c\u2500\u2500 .gitignore            # Git ignored files\n\u251c\u2500\u2500 package.json          # Project metadata and scripts\n\u251c\u2500\u2500 pnpm-lock.yaml        # Lockfile for deterministic installs\n\u251c\u2500\u2500 setup.py              # (Setup script)\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h3,{id:"-backend-structure-backend",children:["\ud83d\udd19 Backend Structure (",(0,s.jsx)(n.code,{children:"/backend"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:["The backend is written in ",(0,s.jsx)(n.strong,{children:"TypeScript"})," using ",(0,s.jsx)(n.strong,{children:"TypeDI"})," for dependency injection and ",(0,s.jsx)(n.strong,{children:"routing-controllers"})," for routing. It follows a modular domain-based architecture."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"/backend\n\u2514\u2500\u2500 src/\n    \u251c\u2500\u2500 config/               # App-wide configuration files\n    \u2502   \u251c\u2500\u2500 app.ts            # Express app initialization\n    \u2502   \u251c\u2500\u2500 db.ts             # Database connection logic\n    \u2502   \u2514\u2500\u2500 sentry.ts         # Sentry error tracking setup\n\n    \u251c\u2500\u2500 modules/              # Domain-based modules\n    \u2502   \u251c\u2500\u2500 auth/             # Authentication module\n    \u2502   \u2514\u2500\u2500 courses/          # Courses module (feature-driven)\n    \u2502       \u251c\u2500\u2500 classes/         # DTOs using class-validator & class-transformer\n    \u2502       \u251c\u2500\u2500 controllers/     # API controllers using routing-controllers\n    \u2502       \u251c\u2500\u2500 utils/           # Course-specific utility functions\n    \u2502       \u251c\u2500\u2500 tests/           # Unit/integration tests for courses\n    \u2502       \u2514\u2500\u2500 index.ts         # Module entry point for registration\n\n    \u251c\u2500\u2500 shared/               # Reusable logic across modules\n    \u2502   \u251c\u2500\u2500 constants/        # Application-wide static constants\n    \u2502   \u251c\u2500\u2500 database/         # Shared database helpers and logic\n    \u2502   \u251c\u2500\u2500 errors/           # Custom error classes and handlers\n    \u2502   \u251c\u2500\u2500 functions/        # General reusable utility functions\n    \u2502   \u251c\u2500\u2500 interfaces/       # Common TypeScript interfaces and types\n    \u2502   \u251c\u2500\u2500 middleware/       # Express and TypeDI middlewares\n    \u2502   \u2514\u2500\u2500 types.ts          # Global type definitions\n\n    \u251c\u2500\u2500 utils/                # Global utility helpers\n    \u2502   \u251c\u2500\u2500 env.ts            # Load and validate environment variables\n    \u2502   \u251c\u2500\u2500 to-bool.ts        # Convert values to boolean\n    \u2502   \u2514\u2500\u2500 index.ts          # Utility exports entrypoint\n\n    \u2514\u2500\u2500 tests/                # Global or shared test logic\n\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"classes/"})}),": Defines request DTOs using ",(0,s.jsx)(n.code,{children:"class-validator"})," and ",(0,s.jsx)(n.code,{children:"class-transformer"})," for validation and transformation."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"controllers/"})}),": Contains route handlers decorated using ",(0,s.jsx)(n.code,{children:"@Controller"}),", ",(0,s.jsx)(n.code,{children:"@Post"}),", etc."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"utils/"})}),": Module-specific helper logic."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"shared/"})}),": Centralized helpers, middleware, interfaces, and constants reused across modules."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:["This structure promotes ",(0,s.jsx)(n.strong,{children:"separation of concerns"}),", ",(0,s.jsx)(n.strong,{children:"testability"}),", and ",(0,s.jsx)(n.strong,{children:"code reusability"}),", making it scalable for large codebases."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"-notes",children:"\ud83d\udd0d Notes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Modular Structure"}),": Each module inside ",(0,s.jsx)(n.code,{children:"src/modules/"})," may/may not be independent and may contain its own controllers, services, routes, and DB access logic."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Shared Layer"}),": All cross-cutting concerns (like database, error handling, interfaces) are located inside ",(0,s.jsx)(n.code,{children:"src/shared/"})," for reuse."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"TypeDI & Routing-controllers"}),": Dependency injection and route handling are managed via ",(0,s.jsx)(n.code,{children:"TypeDI"})," and ",(0,s.jsx)(n.code,{children:"routing-controllers"}),"."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},3033:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var r=t(4700);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);