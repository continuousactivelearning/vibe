"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2893],{3033:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>l});var r=s(4700);const o={},i=r.createContext(o);function t(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),r.createElement(i.Provider,{value:n},e.children)}},3181:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"Express/MVC Pattern","title":"MVC Pattern","description":"Building a Scalable Library System with MVC and Modular Design","source":"@site/newdocs/Express/8. MVC Pattern.md","sourceDirName":"Express","slug":"/Express/MVC Pattern","permalink":"/vibe/newdocs/Express/MVC Pattern","draft":false,"unlisted":false,"editUrl":"https://github.com/your-org/\u2026/newdocs/Express/8. MVC Pattern.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{},"sidebar":"newSidebar","previous":{"title":"Request Validation","permalink":"/vibe/newdocs/Express/Request Validation"},"next":{"title":"Github Tutorial 1","permalink":"/vibe/newdocs/Github Tutorial/Github Tutorial 1"}}');var o=s(7968),i=s(3033);const t={},l=void 0,c={},d=[{value:"1. Problem Statement",id:"1-problem-statement",level:2},{value:"<strong>Chaos at &quot;Maplewood Public Library&quot;</strong>",id:"chaos-at-maplewood-public-library",level:2},{value:"2. Learning Objectives",id:"2-learning-objectives",level:2},{value:"3. Concept Introduction with Analogy",id:"3-concept-introduction-with-analogy",level:2},{value:"<strong>Analogy: The Library\u2019s Organizational Chart</strong>",id:"analogy-the-librarys-organizational-chart",level:2},{value:"5. Step-by-Step Data Modeling &amp; Code Walkthrough",id:"5-step-by-step-data-modeling--code-walkthrough",level:2},{value:"<strong>A. Project Structure</strong>",id:"a-project-structure",level:2},{value:"<strong>B. Model: Define the Book Structure</strong>",id:"b-model-define-the-book-structure",level:2},{value:"<strong>C. Repository: Separate Storage Logic</strong>",id:"c-repository-separate-storage-logic",level:2},{value:"<strong>D. Service: Enforce Business Rules</strong>",id:"d-service-enforce-business-rules",level:2},{value:"<strong>E. Controller: Handle User Requests</strong>",id:"e-controller-handle-user-requests",level:2},{value:"<strong>F. Dependency Injection Setup</strong>",id:"f-dependency-injection-setup",level:2},{value:"6. Challenge",id:"6-challenge",level:2},{value:"7. Common Pitfalls &amp; Best Practices",id:"7-common-pitfalls--best-practices",level:2},{value:"8. Quick Recap &amp; Key Takeaways",id:"8-quick-recap--key-takeaways",level:2},{value:"9 Optional: Programmer\u2019s Workflow Checklist (MVC Pattern)",id:"9-optional-programmers-workflow-checklist-mvc-pattern",level:2},{value:"10. Coming up next",id:"10-coming-up-next",level:2}];function a(e){const n={br:"br",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Building a Scalable Library System with MVC and Modular Design"}),"\n",(0,o.jsx)(n.h2,{id:"1-problem-statement",children:"1. Problem Statement"}),"\n",(0,o.jsx)(n.h2,{id:"chaos-at-maplewood-public-library",children:(0,o.jsx)(n.strong,{children:'Chaos at "Maplewood Public Library"'})}),"\n",(0,o.jsx)(n.p,{children:"Maplewood Public Library\u2019s software system is in disarray:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:'Rules like "members can\u2019t borrow more than 5 books" are buried in code that handles website requests. When policies change, updates risk breaking other parts of the system.'}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"The team wants to add new features (e.g., online reservations, late fines) but struggles because data access and business logic are tangled together."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Testing is nearly impossible-every small change requires rewriting large parts of the code."}),"\n"]}),"\n"]}),"\n",(0,o.jsx)("img",{src:"https://i.postimg.cc/X7YJvTf5/Chat-GPT-Image-May-19-2025-04-38-15-PM.png",width:"300px"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"The challenge:"}),(0,o.jsx)(n.br,{}),"\n","How do you redesign the system so that:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Rules and policies are clearly separated and easy to update?"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Data storage details don\u2019t interfere with how books are managed or loans are processed?"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"New features can be added without fear of breaking existing functionality?"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"2-learning-objectives",children:"2. Learning Objectives"}),"\n",(0,o.jsx)(n.p,{children:"By the end of this lesson, you\u2019ll be able to:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Structure code using  ",(0,o.jsx)(n.strong,{children:"MVC (Model-View-Controller)"}),"  to separate rules, data, and user interactions."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Use the  ",(0,o.jsx)(n.strong,{children:"Repository Pattern"}),"  to isolate data storage details from business logic."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Apply  ",(0,o.jsx)(n.strong,{children:"Dependency Injection"}),"  to create modular, testable components."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"3-concept-introduction-with-analogy",children:"3. Concept Introduction with Analogy"}),"\n",(0,o.jsx)(n.h2,{id:"analogy-the-librarys-organizational-chart",children:(0,o.jsx)(n.strong,{children:"Analogy: The Library\u2019s Organizational Chart"})}),"\n",(0,o.jsx)(n.p,{children:"Imagine the library has three teams:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Front Desk (Controller):"}),"  Handles member requests (checkouts, returns)."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Policy Team (Service):"}),"  Manages rules (loan limits, fines)."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Archives Team (Repository):"}),"  Stores and retrieves books from the shelves."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Each team works independently:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["The front desk doesn\u2019t care  ",(0,o.jsx)(n.em,{children:"how"}),"  books are stored-it just asks the archives team to fetch them."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["The policy team enforces rules without knowing  ",(0,o.jsx)(n.em,{children:"where"}),"  books are kept."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"If the archives team reorganizes the shelves (changes storage systems), the other teams keep working as usual."}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"This separation prevents chaos and lets the library adapt to changes smoothly."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"A. MVC Pattern: Separating Concerns"})}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Layer"}),(0,o.jsx)(n.th,{children:"Responsibility"}),(0,o.jsx)(n.th,{children:"Example in Library"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Model"}),(0,o.jsx)(n.td,{children:"Data structure and validation"}),(0,o.jsx)(n.td,{children:"Book, Member classes"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"View"}),(0,o.jsx)(n.td,{children:"Presentation (JSON, HTML)"}),(0,o.jsx)(n.td,{children:"API responses"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Controller"}),(0,o.jsx)(n.td,{children:"Handles user requests/responses"}),(0,o.jsx)(n.td,{children:"BookController routes"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Service"}),(0,o.jsx)(n.td,{children:"Business logic (e.g., loan rules)"}),(0,o.jsx)(n.td,{children:"Calculating fines, reservations"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Repository"}),(0,o.jsx)(n.td,{children:"Data storage/retrieval"}),(0,o.jsx)(n.td,{children:"Fetching books from storage"})]})]})]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"B. Repository Pattern: Isolate Storage Details"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Repository Interface:"}),"  Defines  ",(0,o.jsx)(n.em,{children:"what"}),"  operations are available (e.g.,  ",(0,o.jsx)(n.code,{children:"findAllBooks()"}),",  ",(0,o.jsx)(n.code,{children:"saveBook()"}),")."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Implementation:"}),"  Handles  ",(0,o.jsx)(n.em,{children:"how"}),"  data is stored (e.g., in-memory, files, databases)."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Why?"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Change storage systems without rewriting business logic."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Test services with fake repositories (no real storage needed)."}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"C. Dependency Injection: Building Modular Systems"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Dependency Injection (DI):"}),"  Provide components with their dependencies (e.g., services, repositories) instead of letting them create their own."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Benefits:"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Swap components easily (e.g., switch storage systems for testing)."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Avoid tight coupling between layers."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"5-step-by-step-data-modeling--code-walkthrough",children:"5. Step-by-Step Data Modeling & Code Walkthrough"}),"\n",(0,o.jsx)(n.h2,{id:"a-project-structure",children:(0,o.jsx)(n.strong,{children:"A. Project Structure"})}),"\n",(0,o.jsx)("img",{src:"https://i.postimg.cc/bvSpTRHw/day10.png",width:"500px"}),"\n",(0,o.jsx)(n.h2,{id:"b-model-define-the-book-structure",children:(0,o.jsx)(n.strong,{children:"B. Model: Define the Book Structure"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// src/models/Book.ts  \nexport interface Book {  \nid: string;  \ntitle: string;  \nauthor: string;  \nisBorrowed: boolean;  \n}  \n"})}),"\n",(0,o.jsx)(n.h2,{id:"c-repository-separate-storage-logic",children:(0,o.jsx)(n.strong,{children:"C. Repository: Separate Storage Logic"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// src/repositories/interfaces/IBookRepository.ts  \nexport interface IBookRepository {  \nfindAll(): Promise<Book[]>;  \nfindById(id: string): Promise<Book | null>;  \nsave(book: Book): Promise<void>;  \n}  \n\n// src/repositories/InMemoryBookRepository.ts  \nimport { IBookRepository } from './interfaces/IBookRepository';  \nimport { Book } from '../models/Book';  \n\nexport class InMemoryBookRepository implements IBookRepository {  \nprivate books: Book[] = [];  \n\nasync findAll(): Promise<Book[]> {  \n  return this.books;  \n}  \n\nasync findById(id: string): Promise<Book | null> {  \n  return this.books.find(book => book.id === id) || null;  \n}  \n\nasync save(book: Book): Promise<void> {  \n  this.books.push(book);  \n}  \n}  \n"})}),"\n",(0,o.jsx)(n.h2,{id:"d-service-enforce-business-rules",children:(0,o.jsx)(n.strong,{children:"D. Service: Enforce Business Rules"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// src/services/BookService.ts  \nimport { IBookRepository } from '../repositories/interfaces/IBookRepository';  \nimport { Book } from '../models/Book';  \n\nexport class BookService {  \nconstructor(private bookRepository: IBookRepository) {}  \n\nasync borrowBook(bookId: string): Promise<Book> {  \n  const book = await this.bookRepository.findById(bookId);  \n  if (!book) throw new Error('Book not found');  \n  if (book.isBorrowed) throw new Error('Book already borrowed');  \n\n  const updatedBook = { ...book, isBorrowed: true };  \n  await this.bookRepository.save(updatedBook);  \n  return updatedBook;  \n}  \n}  \n"})}),"\n",(0,o.jsx)(n.h2,{id:"e-controller-handle-user-requests",children:(0,o.jsx)(n.strong,{children:"E. Controller: Handle User Requests"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// src/controllers/BookController.ts  \nimport { Request, Response } from 'express';  \nimport { BookService } from '../services/BookService';  \n\nexport class BookController {  \nconstructor(private bookService: BookService) {}  \n\nasync borrowBook(req: Request, res: Response): Promise<void> {  \n  try {  \n    const book = await this.bookService.borrowBook(req.params.id);  \n    res.json(book);  \n  } catch (error) {  \n    res.status(400).json({ error: error.message });  \n  }  \n}  \n}  \n"})}),"\n",(0,o.jsx)(n.h2,{id:"f-dependency-injection-setup",children:(0,o.jsx)(n.strong,{children:"F. Dependency Injection Setup"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// src/app.ts  \nimport express from 'express';  \nimport { BookController } from './controllers/BookController';  \nimport { BookService } from './services/BookService';  \nimport { InMemoryBookRepository } from './repositories/InMemoryBookRepository';  \n\nconst app = express();  \napp.use(express.json());  \n\n// Initialize components  \nconst bookRepository = new InMemoryBookRepository();  \nconst bookService = new BookService(bookRepository);  \nconst bookController = new BookController(bookService);  \n\n// Routes  \napp.post('/books/:id/borrow', (req, res) => bookController.borrowBook(req, res));  \n\nconst port = 3000;  \napp.listen(port, () => {  \nconsole.log(`Library system running on port ${port}`);  \n});  \n"})}),"\n",(0,o.jsx)(n.h2,{id:"6-challenge",children:"6. Challenge"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Your Turn!"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Add a  ",(0,o.jsx)(n.code,{children:"returnBook"}),"  method to  ",(0,o.jsx)(n.code,{children:"BookService"}),"  and  ",(0,o.jsx)(n.code,{children:"BookController"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Ensure the repository updates the book\u2019s status when returned."}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"7-common-pitfalls--best-practices",children:"7. Common Pitfalls & Best Practices"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:(0,o.jsx)(n.strong,{children:"Pitfall"})}),(0,o.jsx)(n.th,{children:(0,o.jsx)(n.strong,{children:"Best Practice"})})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Mixing data access in business logic"}),(0,o.jsx)(n.td,{children:"Always use repositories for storage access"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Hardcoding storage details"}),(0,o.jsx)(n.td,{children:"Depend on interfaces, not implementations"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Not testing with mocks"}),(0,o.jsx)(n.td,{children:"Use fake repositories for unit tests"})]})]})]}),"\n",(0,o.jsx)(n.h2,{id:"8-quick-recap--key-takeaways",children:"8. Quick Recap & Key Takeaways"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Separate layers"}),"  (controllers, services, repositories) for clarity."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Repository Pattern"}),"  hides storage details from business rules."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Dependency Injection"}),"  makes components reusable and testable."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"9-optional-programmers-workflow-checklist-mvc-pattern",children:"9 Optional: Programmer\u2019s Workflow Checklist (MVC Pattern)"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Identify the main resources"}),"  in your application (e.g., Book, User, Event)."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Define Models"}),"  for each resource (data structure, validation rules)."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Create Controllers"}),"  for each resource to handle user/API requests and responses."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Write Services"}),"  to contain business logic (rules, calculations, policies)."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Keep Controllers thin"}),"-they should only coordinate input/output and call services."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Never access data storage directly from controllers"}),"-always go through services."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"If using repositories:"}),"  Only services should interact with repositories for data access."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Organize code into folders:"}),"  ",(0,o.jsx)(n.code,{children:"/models"}),",  ",(0,o.jsx)(n.code,{children:"/controllers"}),",  ",(0,o.jsx)(n.code,{children:"/services"}),"  (and  ",(0,o.jsx)(n.code,{children:"/repositories"}),"  if needed)."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Document the responsibility of each layer"}),"  so team members know where to add new logic."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Test each layer independently"}),"  (e.g., unit test services without controllers)."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Review regularly:"}),"  Refactor if business logic creeps into controllers or data access leaks into services."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"10-coming-up-next",children:"10. Coming up next"}),"\n",(0,o.jsxs)(n.p,{children:["Learn to use automated dependency injection tools (like  ",(0,o.jsx)(n.code,{children:"tsyringe"}),") to manage complex systems effortlessly!"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}}}]);