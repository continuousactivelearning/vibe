"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4551],{4318:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>a});var t=s(4700);const o={},r=t.createContext(o);function i(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(r.Provider,{value:n},e.children)}},9092:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"System Design & Architecture/Backend/Module Breakdown/GenAI","title":"GenAI","description":"Automates course creation from video content by orchestrating AI server communication via webhooks and SSE streams. The module handles job lifecycle management, user approvals, and real-time progress updates.","source":"@site/docs/System Design & Architecture/Backend/4. Module Breakdown/4. GenAI.md","sourceDirName":"System Design & Architecture/Backend/4. Module Breakdown","slug":"/System Design & Architecture/Backend/Module Breakdown/GenAI","permalink":"/vibe/docs/System Design & Architecture/Backend/Module Breakdown/GenAI","draft":false,"unlisted":false,"editUrl":"https://github.com/continuousactivelearning/vibe/edit/main/docs/docs/System Design & Architecture/Backend/4. Module Breakdown/4. GenAI.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Courses","permalink":"/vibe/docs/System Design & Architecture/Backend/Module Breakdown/Courses"},"next":{"title":"Notifications","permalink":"/vibe/docs/System Design & Architecture/Backend/Module Breakdown/Notifications"}}');var o=s(7968),r=s(4318);const i={},a=void 0,c={},d=[{value:"\ud83d\uddc2\ufe0f Folder Structure",id:"\ufe0f-folder-structure",level:3},{value:"\ud83c\udfaf Core Functionality",id:"-core-functionality",level:3},{value:"\ud83d\udd01 Typical Workflow",id:"-typical-workflow",level:3}];function l(e){const n={code:"code",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Automates course creation from video content by orchestrating AI server communication via webhooks and SSE streams. The module handles job lifecycle management, user approvals, and real-time progress updates."}),"\n",(0,o.jsx)(n.h3,{id:"\ufe0f-folder-structure",children:"\ud83d\uddc2\ufe0f Folder Structure"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"genAI/\n\u251c\u2500\u2500 controllers/\n\u2502   \u251c\u2500\u2500 GenAIController.ts       # API endpoints for job management and live updates\n\u2502   \u251c\u2500\u2500 WebhookController.ts     # Receives AI server webhooks and dispatches SSE events\n\u251c\u2500\u2500 services/\n\u2502   \u251c\u2500\u2500 GenAIService.ts          # Core logic for job orchestration and state transitions\n\u2502   \u251c\u2500\u2500 WebhookService.ts        # HTTP client to AI server for task control and aborts\n\u2502   \u2514\u2500\u2500 SseService.ts            # Manages Server-Sent Events connections and broadcasts\n\u251c\u2500\u2500 repositories/\n\u2502   \u2514\u2500\u2500 GenAIRepository.ts       # Persists job and task data separately for optimized queries\n\u251c\u2500\u2500 classes/\n\u2502   \u251c\u2500\u2500 validators/              # DTOs for job creation, approvals, edits, and status\n\u2502   \u2514\u2500\u2500 transformers/            # Response schemas and mapper functions\n\u251c\u2500\u2500 abilities/                   # CASL policies for job-level permissions\n\u251c\u2500\u2500 types.ts                     # Inversify DI tokens\n\u2514\u2500\u2500 container.ts                 # Binds controllers, services, and repositories\n"})}),"\n",(0,o.jsx)(n.h3,{id:"-core-functionality",children:"\ud83c\udfaf Core Functionality"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.strong,{children:"GenAI module"})," facilitates end-to-end automation of course generation from video content by coordinating with an external AI server and providing a seamless developer and user experience:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Job Orchestration"}),": Validates incoming requests, persists job metadata, and queues tasks for segmentation, transcription, question generation, and content assembly."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"AI Server Coordination"}),": Utilizes ",(0,o.jsx)(n.code,{children:"WebhookService"})," to send control messages\u2014such as start, continue, abort, and rerun\u2014to the AI engine and handles its asynchronous responses via webhooks."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Task Management"}),": Records individual task states (e.g., segmentation, summarization, question creation) in a dedicated task collection to allow granular progress tracking and error handling."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"User Approval Workflow"}),": Offers endpoints to approve or modify AI-generated outputs at each stage\u2014segment maps, question data, and transcripts\u2014before proceeding to the next task."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Real-Time Feedback"}),": Establishes a Server\u2011Sent Events (SSE) stream for front\u2011end clients to receive live updates on job progress, task completions, and actionable prompts."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Webhooks Handling"}),": Implements a webhook endpoint to receive AI server callbacks, update job and task records in the database, and broadcast events to connected SSE clients."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"-typical-workflow",children:"\ud83d\udd01 Typical Workflow"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Initiation"}),": The front-end invokes the module to create a new GenAI job, providing video or playlist identifiers along with target course/version information. The controller validates and delegates to ",(0,o.jsx)(n.code,{children:"GenAIService"}),", which persists the job."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Task Execution"}),": ",(0,o.jsx)(n.code,{children:"GenAIService"})," dispatches tasks to the AI server via ",(0,o.jsx)(n.code,{children:"WebhookService"}),". Each subtask\u2014such as cutting video segments, generating text transcripts, and crafting quiz questions\u2014is tracked separately in the task repository."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Webhook Reception"}),": As the AI engine completes tasks, it triggers webhooks to our ",(0,o.jsx)(n.code,{children:"WebhookController"}),". This controller updates both job-level and task-level records and relays status events over the SSE channel."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Live Updates"}),": Front-end clients subscribing to the SSE endpoint receive JSON\u2011encoded events indicating progress metrics, task results, or error notifications, enabling dynamic UI updates."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"User Interactions"}),": At critical points, users can approve AI results (e.g., refining segment boundaries, editing questions, adjusting transcripts) via API calls. Successful approvals automatically enqueue the next task."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Completion"}),": Upon final approval, the module assembles the AI\u2011generated segments, questions, and metadata into structured course content, ready for review or publication."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);