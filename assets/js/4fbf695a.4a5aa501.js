"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5636],{4146:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>a});var l=s(4700);const i={},r=l.createContext(i);function c(e){const n=l.useContext(r);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),l.createElement(r.Provider,{value:n},e.children)}},8258:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>l,toc:()=>o});const l=JSON.parse('{"id":"Typescript/let & const/4.1 let & const","title":"TypeScript \u2013 let & const","description":"1. Problem Statement","source":"@site/newdocs/Typescript/4. let & const/4.1 let & const.md","sourceDirName":"Typescript/4. let & const","slug":"/Typescript/let & const/4.1 let & const","permalink":"/vibe/newdocs/Typescript/let & const/4.1 let & const","draft":false,"unlisted":false,"editUrl":"https://github.com/your-org/\u2026/newdocs/Typescript/4. let & const/4.1 let & const.md","tags":[],"version":"current","frontMatter":{},"sidebar":"newSidebar","previous":{"title":"Variables in TypeScript","permalink":"/vibe/newdocs/Typescript/Variables in TypeScript/3.1 Variables in Typescript"},"next":{"title":"The  any  Type in TypeScript","permalink":"/vibe/newdocs/Typescript/Any type in TypeScript/5.1 Any type in Typescript"}}');var i=s(7968),r=s(4146);const c={},a="TypeScript \u2013 let & const",t={},o=[{value:"1. Problem Statement",id:"1-problem-statement",level:2},{value:"2. Learning Objectives",id:"2-learning-objectives",level:2},{value:"3. Concept Introduction with Analogy",id:"3-concept-introduction-with-analogy",level:2},{value:"Analogy: Lockers and Safes in a Secure Facility",id:"analogy-lockers-and-safes-in-a-secure-facility",level:3},{value:"4. Technical Deep Dive",id:"4-technical-deep-dive",level:2},{value:"Declaring Variables with <code>let</code>",id:"declaring-variables-with-let",level:3},{value:"Variable Scope",id:"variable-scope",level:2},{value:"Redeclaration Rules",id:"redeclaration-rules",level:2},{value:"Same Name in Different Blocks",id:"same-name-in-different-blocks",level:2},{value:"Declaring Variables with <code>const</code>",id:"declaring-variables-with-const",level:2},{value:"Const Rules: No Redeclaration or Reassignment",id:"const-rules-no-redeclaration-or-reassignment",level:2},{value:"5. Step-by-Step Data Modeling &amp; Code Walkthrough",id:"5-step-by-step-data-modeling--code-walkthrough",level:2},{value:"6. Interactive Challenge",id:"6-interactive-challenge",level:2},{value:"8. Common Pitfalls &amp; Best Practices",id:"8-common-pitfalls--best-practices",level:2},{value:"8. Quick Recap &amp; Key Takeaways",id:"8-quick-recap--key-takeaways",level:2},{value:"9. Optional: Programmer\u2019s Workflow Checklist",id:"9-optional-programmers-workflow-checklist",level:2}];function d(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"typescript--let--const",children:"TypeScript \u2013 let & const"})}),"\n",(0,i.jsx)(n.h2,{id:"1-problem-statement",children:"1. Problem Statement"}),"\n",(0,i.jsx)(n.p,{children:"Imagine you are developing a modern application where data must be handled safely and predictably."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Some values should be able to change as your program runs (like a user\u2019s score or the current page)."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Other values should never change once set (like a mathematical constant or the name of your application)."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"You want to avoid bugs caused by accidentally changing or reusing variables in the wrong place."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"The challenge:"}),(0,i.jsx)(n.br,{}),"\n","How do you declare variables in TypeScript so that you control where and how they can be changed, and prevent accidental mistakes in your code?"]}),"\n",(0,i.jsx)(n.h2,{id:"2-learning-objectives",children:"2. Learning Objectives"}),"\n",(0,i.jsx)(n.p,{children:"By the end of this lesson, you will be able to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Declare variables using ",(0,i.jsx)(n.code,{children:"let"})," and ",(0,i.jsx)(n.code,{children:"const"})," in TypeScript."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Understand the difference between block scope and function/global scope."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Recognize when to use ",(0,i.jsx)(n.code,{children:"let"})," versus ",(0,i.jsx)(n.code,{children:"const"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Avoid common mistakes with variable redeclaration and reassignment."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"3-concept-introduction-with-analogy",children:"3. Concept Introduction with Analogy"}),"\n",(0,i.jsx)(n.h3,{id:"analogy-lockers-and-safes-in-a-secure-facility",children:"Analogy: Lockers and Safes in a Secure Facility"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Let variables"})," are like lockers: you can open them, put in new items, or swap items out, but only if you have access to that room (block)."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Const variables"})," are like safes with a combination set once: you can put something in when you first use it, but after that, it\u2019s locked forever and can\u2019t be changed."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Both lockers and safes are only accessible in the room (block) where they\u2019re placed."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["This system keeps your valuables safe and prevents accidental mix-ups, just like ",(0,i.jsx)(n.code,{children:"let"})," and ",(0,i.jsx)(n.code,{children:"const"})," keep your data safe in TypeScript."]}),"\n",(0,i.jsx)(n.h2,{id:"4-technical-deep-dive",children:"4. Technical Deep Dive"}),"\n",(0,i.jsxs)(n.h3,{id:"declaring-variables-with-let",children:["Declaring Variables with ",(0,i.jsx)(n.code,{children:"let"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"let"})," keyword declares a variable with ",(0,i.jsx)(n.strong,{children:"block scope"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"You must follow the rules for naming identifiers."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"You can assign a type and a value, or just a type."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"let var_name: var_type = value;\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'let car_name: string = "Brezza";\nlet car_price: number = 1000000;\nconsole.log(car_name);   // Output: Brezza\nconsole.log(car_price);  // Output: 1000000\n'})}),"\n",(0,i.jsx)(n.h2,{id:"variable-scope",children:"Variable Scope"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Variables declared with ",(0,i.jsx)(n.code,{children:"let"})," are ",(0,i.jsx)(n.strong,{children:"block scoped"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["You cannot access a ",(0,i.jsx)(n.code,{children:"let"})," variable outside the block where it is declared."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"let bool: boolean = true;\nif (bool) {\n    let result: number = 10;\n    console.log(result); // Accessible here\n}\n// console.log(result); // Error: result is not defined here\n"})}),"\n",(0,i.jsx)(n.h2,{id:"redeclaration-rules",children:"Redeclaration Rules"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["You ",(0,i.jsx)(n.strong,{children:"cannot re-declare"})," a variable with ",(0,i.jsx)(n.code,{children:"let"})," in the same scope."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'let animal: string = "cat";\n// let animal: string = "dog"; // Error: Cannot redeclare block-scoped variable \'animal\'\nconsole.log(animal); // Output: cat\n'})}),"\n",(0,i.jsx)(n.h2,{id:"same-name-in-different-blocks",children:"Same Name in Different Blocks"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["You ",(0,i.jsx)(n.strong,{children:"can"})," declare variables with the same name in different blocks."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"let bool: boolean = false;\nif (bool) {\n    let num: number = 1;\n    console.log(num); // Only in this block\n} else {\n    let num: number = 2;\n    console.log(num); // Only in this block\n}\n// Both num variables are separate and do not conflict.\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"declaring-variables-with-const",children:["Declaring Variables with ",(0,i.jsx)(n.code,{children:"const"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"const"})," keyword declares a ",(0,i.jsx)(n.strong,{children:"constant"})," (cannot be changed after assignment)."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Must be initialized at the time of declaration."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Has block scope, just like ",(0,i.jsx)(n.code,{children:"let"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const var_name: var_type = value;\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const lang: string = 'TypeScript';\nconst PI: number = 3.14;\nconsole.log(`Language: ${lang}`);      // Output: Language: TypeScript\nconsole.log(`Value of PI: ${PI}`);     // Output: Value of PI: 3.14\n"})}),"\n",(0,i.jsx)(n.h2,{id:"const-rules-no-redeclaration-or-reassignment",children:"Const Rules: No Redeclaration or Reassignment"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["You ",(0,i.jsx)(n.strong,{children:"cannot re-declare"})," or ",(0,i.jsx)(n.strong,{children:"reassign"})," a ",(0,i.jsx)(n.code,{children:"const"})," variable in the same scope."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"if (true) {\n    const PI: number = 3.14;\n    console.log(PI);\n    // const PI: number = 3.14; // Error: Cannot redeclare block-scoped variable 'PI'.\n    // PI = 3.15; // Error: Cannot assign to 'PI' because it is a constant.\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"5-step-by-step-data-modeling--code-walkthrough",children:"5. Step-by-Step Data Modeling & Code Walkthrough"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.strong,{children:["Declare a variable with ",(0,i.jsx)(n.code,{children:"let"}),":"]})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'let userName:  string  =  "Alex";` \n'})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.strong,{children:["Declare a constant with ",(0,i.jsx)(n.code,{children:"const"}),":"]})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:" const  MAX_USERS:  number  =  100;\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Block scope demonstration:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'if (true) {\n let sessionId: string = "abc123";\n console.log(sessionId); // Works here\n}\n // console.log(sessionId); // Error: sessionId is not defined here\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.strong,{children:["No redeclaration or reassignment with ",(0,i.jsx)(n.code,{children:"const"}),":"]})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const appName: string = "MyApp";\n// appName = "YourApp"; // Error: Cannot assign to \'appName\'\n'})}),"\n",(0,i.jsx)(n.h2,{id:"6-interactive-challenge",children:"6. Interactive Challenge"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Your Turn!"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Declare a variable ",(0,i.jsx)(n.code,{children:"score"})," with ",(0,i.jsx)(n.code,{children:"let"})," and assign it a number."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Inside a block (e.g., an ",(0,i.jsx)(n.code,{children:"if"})," statement), declare another ",(0,i.jsx)(n.code,{children:"score"})," variable with a different value and print it."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Declare a constant ",(0,i.jsx)(n.code,{children:"COUNTRY"})," and assign it your favorite country."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Try to change the value of ",(0,i.jsx)(n.code,{children:"COUNTRY"})," and observe what happens."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Try to re-declare ",(0,i.jsx)(n.code,{children:"score"})," in the same block and see the result."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"8-common-pitfalls--best-practices",children:"8. Common Pitfalls & Best Practices"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Always initialize ",(0,i.jsx)(n.code,{children:"const"})," variables when declaring them."]})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Use ",(0,i.jsx)(n.code,{children:"let"})," for variables that change, ",(0,i.jsx)(n.code,{children:"const"})," for variables that never change."]})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Don\u2019t try to access block-scoped variables outside their block."})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Never redeclare a ",(0,i.jsx)(n.code,{children:"let"})," or ",(0,i.jsx)(n.code,{children:"const"})," variable in the same scope."]})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Prefer ",(0,i.jsx)(n.code,{children:"const"})," by default for safety; use ",(0,i.jsx)(n.code,{children:"let"})," only when necessary."]})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"8-quick-recap--key-takeaways",children:"8. Quick Recap & Key Takeaways"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"let"})," and ",(0,i.jsx)(n.code,{children:"const"})," provide block scope and prevent accidental redeclaration."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"let"})," for variables that may change, ",(0,i.jsx)(n.code,{children:"const"})," for values that should never change."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Both ",(0,i.jsx)(n.code,{children:"let"})," and ",(0,i.jsx)(n.code,{children:"const"})," are safer and more predictable than traditional variable declarations."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Always initialize ",(0,i.jsx)(n.code,{children:"const"})," variables and avoid reassigning them."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"9-optional-programmers-workflow-checklist",children:"9. Optional: Programmer\u2019s Workflow Checklist"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"let"})," for variables that may change."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"const"})," for variables that should never change."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Never redeclare a variable with ",(0,i.jsx)(n.code,{children:"let"})," or ",(0,i.jsx)(n.code,{children:"const"})," in the same scope."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Always initialize ",(0,i.jsx)(n.code,{children:"const"})," variables."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Keep variable scope as small as possible (prefer block scope)."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Test variable access inside and outside blocks to understand scope."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);