"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7294],{4642:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"React/Lazy Loading","title":"Lazy Loading","description":"Lazy Loading & Code Splitting in React: Dynamic Imports for Performance","source":"@site/newdocs/React/Lazy Loading.md","sourceDirName":"React","slug":"/React/Lazy Loading","permalink":"/vibe/newdocs/React/Lazy Loading","draft":false,"unlisted":false,"editUrl":"https://github.com/your-org/\u2026/newdocs/React/Lazy Loading.md","tags":[],"version":"current","frontMatter":{},"sidebar":"newSidebar","previous":{"title":"Bundle Analysis","permalink":"/vibe/newdocs/React/Bundle Analysis"},"next":{"title":"Memoization","permalink":"/vibe/newdocs/React/Memoization"}}');var l=s(7968),r=s(9880);const t={},o=void 0,a={},d=[{value:"1. Problem Statement",id:"1-problem-statement",level:2},{value:"<strong>Case Study: EduStream Learning Platform</strong>",id:"case-study-edustream-learning-platform",level:2},{value:"2. Learning Objectives",id:"2-learning-objectives",level:2},{value:"3. Concept Introduction with Analogy",id:"3-concept-introduction-with-analogy",level:2},{value:"<strong>Analogy: The Modular Classroom</strong>",id:"analogy-the-modular-classroom",level:2},{value:"4. Technical Deep Dive",id:"4-technical-deep-dive",level:2},{value:"<strong>1. React.lazy()</strong>",id:"1-reactlazy",level:2},{value:"<strong>2. Route-Based Code Splitting</strong>",id:"2-route-based-code-splitting",level:2},{value:"5. Step-by-Step Data Modeling &amp; Code Walkthrough",id:"5-step-by-step-data-modeling--code-walkthrough",level:2},{value:"6. Interactive Challenge / Mini-Project",id:"6-interactive-challenge--mini-project",level:2},{value:"7. Common Pitfalls &amp; Best Practices",id:"7-common-pitfalls--best-practices",level:2},{value:"Common Pitfalls &amp; Best Practices (Code Splitting &amp; Lazy Loading)",id:"common-pitfalls--best-practices-code-splitting--lazy-loading",level:2},{value:"9. Optional: Programmer\u2019s Workflow Checklist",id:"9-optional-programmers-workflow-checklist",level:2}];function c(n){const e={br:"br",code:"code",h2:"h2",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...n.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(e.p,{children:"Lazy Loading & Code Splitting in React: Dynamic Imports for Performance"}),"\n",(0,l.jsx)(e.h2,{id:"1-problem-statement",children:"1. Problem Statement"}),"\n",(0,l.jsx)(e.h2,{id:"case-study-edustream-learning-platform",children:(0,l.jsx)(e.strong,{children:"Case Study: EduStream Learning Platform"})}),"\n",(0,l.jsx)(e.p,{children:"EduStream is a large online education platform:"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"It offers courses, quizzes, video lectures, forums, and a dashboard\u2014all as separate features."}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Most users only use a few features per session (e.g., watching a video or taking a quiz)."}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Loading the entire app upfront slows down the initial experience, especially on slow networks."}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"The team wants to load only the code needed for the current page or feature, and fetch the rest on demand."}),"\n"]}),"\n"]}),"\n",(0,l.jsx)("img",{src:"  https://i.postimg.cc/2y6Jhfw6/Chat-GPT-Image-May-31-2025-12-43-02-AM.png",alt:"Sample Image",width:"400"}),"\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.strong,{children:"The challenge:"}),(0,l.jsx)(e.br,{}),"\n","How do you split your React app into smaller bundles and load them only when needed\u2014improving initial load times, reducing bandwidth, and keeping the user experience smooth?"]}),"\n",(0,l.jsx)(e.hr,{}),"\n",(0,l.jsx)(e.h2,{id:"2-learning-objectives",children:"2. Learning Objectives"}),"\n",(0,l.jsx)(e.p,{children:"By the end of this tutorial, you will:"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Understand what code splitting and lazy loading are, and why they matter for React apps."}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:["Use dynamic  ",(0,l.jsx)(e.code,{children:"import()"}),"  and  ",(0,l.jsx)(e.code,{children:"React.lazy()"}),"  to load components only when needed."]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:["Implement  ",(0,l.jsx)(e.code,{children:"React.Suspense"}),"  to handle loading states for lazy-loaded components."]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Apply both route-based and component-based code splitting for maximum performance."}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Understand best practices, pitfalls, and how to handle errors and loading states."}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.hr,{}),"\n",(0,l.jsx)(e.h2,{id:"3-concept-introduction-with-analogy",children:"3. Concept Introduction with Analogy"}),"\n",(0,l.jsx)(e.h2,{id:"analogy-the-modular-classroom",children:(0,l.jsx)(e.strong,{children:"Analogy: The Modular Classroom"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Imagine EduStream as a school with many classrooms (features)."}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Instead of opening all classrooms at once (loading all code), you unlock each classroom only when a student needs it (lazy loading)."}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"The janitor (React) keeps the main hall (core app) open, but unlocks classrooms (feature bundles) on demand, saving energy and time."}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.hr,{}),"\n",(0,l.jsx)(e.h2,{id:"4-technical-deep-dive",children:"4. Technical Deep Dive"}),"\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"A. What is Code Splitting & Lazy Loading?"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.strong,{children:"Code splitting"}),"  breaks your app into smaller chunks (bundles) so users only download what they need."]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.strong,{children:"Lazy loading"}),"  means loading code (components, modules) only when it\u2019s actually required, not upfront."]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.strong,{children:"Dynamic imports"}),"  (",(0,l.jsx)(e.code,{children:"import()"}),") and  ",(0,l.jsx)(e.code,{children:"React.lazy()"}),"  are the main tools for this in React."]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"Why?"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.strong,{children:"Faster initial load"}),": Only essential code is loaded first."]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.strong,{children:"Better user experience"}),": Users interact with the app sooner."]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.strong,{children:"Efficient resource use"}),": Less bandwidth, less memory, especially for large apps and slow networks."]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.hr,{}),"\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"B. Dynamic Imports: The Foundation"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:["Use  ",(0,l.jsx)(e.code,{children:"import()"}),"  to load modules asynchronously."]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Returns a promise that resolves to the module."}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Can be used conditionally, in event handlers, or anywhere in your code\u2014not just at the top."}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-js",children:"\n// Only load the math module if needed\nfunction handleCalculate() {\n  import('./math').then((math) => {\n    console.log(math.add(1, 2));\n  });\n}\n-   This reduces the initial bundle size, as  `math`  is only loaded when  `handleCalculate`  is called .\n"})}),"\n",(0,l.jsx)(e.hr,{}),"\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"C. React.lazy() and Suspense: Lazy Loading Components"})}),"\n",(0,l.jsx)(e.h2,{id:"1-reactlazy",children:(0,l.jsx)(e.strong,{children:"1. React.lazy()"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Wraps a dynamic import so you can use it as a component."}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Loads the component only when it\u2019s rendered for the first time."}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-js",children:"import React, { Suspense } from 'react';\n\nconst VideoPlayer = React.lazy(() => import('./VideoPlayer'));\n\nfunction App() {\n  return (\n    <div>\n      <h1>Welcome to EduStream</h1>\n      <Suspense fallback={<div>Loading video player...</div>}>\n        <VideoPlayer />\n      </Suspense>\n    </div>\n  );\n}\n"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.strong,{children:"Suspense"}),"  provides a fallback UI while the component is loading."]}),"\n"]}),"\n",(0,l.jsx)(e.hr,{}),"\n",(0,l.jsx)(e.h2,{id:"2-route-based-code-splitting",children:(0,l.jsx)(e.strong,{children:"2. Route-Based Code Splitting"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:["Ideal for large, distinct sections (e.g.,  ",(0,l.jsx)(e.code,{children:"/courses"}),",  ",(0,l.jsx)(e.code,{children:"/dashboard"}),",  ",(0,l.jsx)(e.code,{children:"/forum"}),")."]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Each route loads its own bundle."}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-js",children:"import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport { Suspense, lazy } from 'react';\n\nconst Dashboard = lazy(() => import('./Dashboard'));\nconst Courses = lazy(() => import('./Courses'));\nconst Forum = lazy(() => import('./Forum'));\n\nfunction App() {\n  return (\n    <Router>\n      <Suspense fallback={<div>Loading page...</div>}>\n        <Routes>\n          <Route path=\"/\" element={<Dashboard />} />\n          <Route path=\"/courses\" element={<Courses />} />\n          <Route path=\"/forum\" element={<Forum />} />\n        </Routes>\n      </Suspense>\n    </Router>\n  );\n}\n"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Only the code for the current route is loaded, reducing the initial bundle size."}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"3. Component-Based Code Splitting"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Use for large, rarely-used, or non-essential components (e.g., a chart, modal, or admin panel)."}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Load the component only when needed, even within a page."}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-js",children:"const Chart = React.lazy(() => import('./Chart'));\n\nfunction AnalyticsPanel({ showChart }) {\n  return (\n    <div>\n      <h2>Analytics</h2>\n      {showChart && (\n        <Suspense fallback={<div>Loading chart...</div>}>\n          <Chart />\n        </Suspense>\n      )}\n    </div>\n  );\n}\n"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"This keeps the main bundle lean, loading heavy components only when used."}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"D. Best Practices and Pitfalls"})}),"\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"Best Practices:"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.strong,{children:"Start with route-based splitting"}),", then optimize further with component-based splitting."]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.strong,{children:"Always provide a good fallback UI"}),"  with  ",(0,l.jsx)(e.code,{children:"Suspense"}),"  to avoid blank screens."]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.strong,{children:"Lazy load only non-critical components"}),"\u2014keep headers, nav, and essential UI in the main bundle."]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.strong,{children:"Use error boundaries"}),"  to catch loading errors and show user-friendly messages."]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:[(0,l.jsx)(e.strong,{children:"Optimize chunk sizes"}),"  with Webpack or Vite to avoid large lazy-loaded bundles."]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"Pitfalls:"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Lazy loading too many small components can increase network requests and overhead."}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Large lazy-loaded chunks can still cause delays\u2014split wisely."}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:["Forgetting  ",(0,l.jsx)(e.code,{children:"Suspense"}),"  fallback leads to blank screens while loading."]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Dynamic import paths must be static strings (not variables) for bundlers to split correctly."}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.hr,{}),"\n",(0,l.jsx)(e.h2,{id:"5-step-by-step-data-modeling--code-walkthrough",children:"5. Step-by-Step Data Modeling & Code Walkthrough"}),"\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"A. Lazy Loading a Feature Component"})}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-js",children:"import React, { Suspense } from 'react';\n\n// Lazy load the Quiz component\nconst Quiz = React.lazy(() => import('./Quiz'));\n\nfunction CoursePage() {\n  const [showQuiz, setShowQuiz] = React.useState(false);\n  return (\n    <div>\n      <h2>Course Content</h2>\n      <button onClick={() => setShowQuiz(true)}>Take Quiz</button>\n      {showQuiz && (\n        <Suspense fallback={<div>Loading quiz...</div>}>\n          <Quiz />\n        </Suspense>\n      )}\n    </div>\n  );\n}\n"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:'The Quiz code is only loaded when the user clicks "Take Quiz"'}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"B. Route-Based Code Splitting Example"})}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-js",children:"import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport { Suspense, lazy } from 'react';\n\nconst VideoLecture = lazy(() => import('./VideoLecture'));\nconst Forum = lazy(() => import('./Forum'));\n\nfunction EduStreamApp() {\n  return (\n    <Router>\n      <Suspense fallback={<div>Loading page...</div>}>\n        <Routes>\n          <Route path=\"/lecture/:id\" element={<VideoLecture />} />\n          <Route path=\"/forum\" element={<Forum />} />\n        </Routes>\n      </Suspense>\n    </Router>\n  );\n}\n"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Each page loads its own bundle, reducing initial load time."}),"\n"]}),"\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"C. Dynamic Import for Conditional Loading"})}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-js",children:"function loadHelpWidget() {\n  import('./HelpWidget').then(({ default: HelpWidget }) => {\n    // Render or use HelpWidget as needed\n  });\n}\n"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"Useful for loading third-party libraries, modals, or admin tools only when needed."}),"\n"]}),"\n",(0,l.jsx)(e.hr,{}),"\n",(0,l.jsx)(e.h2,{id:"6-interactive-challenge--mini-project",children:"6. Interactive Challenge / Mini-Project"}),"\n",(0,l.jsx)(e.p,{children:(0,l.jsx)(e.strong,{children:"Your Turn!"})}),"\n",(0,l.jsxs)(e.ol,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:["Create a  ",(0,l.jsx)(e.code,{children:"ProfileSettings"}),'  component that is only loaded when the user clicks a "Settings" button.']}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:["Use  ",(0,l.jsx)(e.code,{children:"React.lazy()"}),"  and  ",(0,l.jsx)(e.code,{children:"Suspense"}),"  to load the component with a loading spinner."]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:["Add a route  ",(0,l.jsx)(e.code,{children:"/admin"}),"  that lazy-loads an  ",(0,l.jsx)(e.code,{children:"AdminPanel"}),"  component only when visited."]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Show how to handle loading errors with an error boundary."}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.h2,{id:"7-common-pitfalls--best-practices",children:"7. Common Pitfalls & Best Practices"}),"\n",(0,l.jsx)(e.h2,{id:"common-pitfalls--best-practices-code-splitting--lazy-loading",children:"Common Pitfalls & Best Practices (Code Splitting & Lazy Loading)"}),"\n",(0,l.jsxs)(e.table,{children:[(0,l.jsx)(e.thead,{children:(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.th,{children:"Pitfall"}),(0,l.jsx)(e.th,{children:"Best Practice"})]})}),(0,l.jsxs)(e.tbody,{children:[(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:"Lazy loading too many small components"}),(0,l.jsx)(e.td,{children:"Focus on big, rarely-used, or route-level chunks"})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:"No Suspense fallback"}),(0,l.jsxs)(e.td,{children:["Always wrap lazy components in ",(0,l.jsx)(e.code,{children:"Suspense"})]})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:"Large lazy-loaded chunks"}),(0,l.jsx)(e.td,{children:"Use Webpack/Vite to optimize chunk sizes"})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:"Not handling loading errors"}),(0,l.jsx)(e.td,{children:"Use error boundaries for user-friendly errors"})]}),(0,l.jsxs)(e.tr,{children:[(0,l.jsx)(e.td,{children:"Dynamic import paths as variables"}),(0,l.jsxs)(e.td,{children:["Use static strings for ",(0,l.jsx)(e.code,{children:"import()"})," paths"]})]})]})]}),"\n",(0,l.jsx)(e.h2,{id:"9-optional-programmers-workflow-checklist",children:"9. Optional: Programmer\u2019s Workflow Checklist"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:["Use  ",(0,l.jsx)(e.code,{children:"React.lazy()"}),"  for dynamic imports of components."]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsxs)(e.p,{children:["Wrap all lazy components in  ",(0,l.jsx)(e.code,{children:"Suspense"}),"  with a good fallback UI."]}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Start with route-based code splitting, then optimize with component-based splitting."}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Use error boundaries for robust error handling."}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Test lazy loading on slow networks and devices."}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"Optimize chunk sizes and analyze bundles with Webpack/Vite tools."}),"\n"]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,l.jsx)(e,{...n,children:(0,l.jsx)(c,{...n})}):c(n)}},9880:(n,e,s)=>{s.d(e,{R:()=>t,x:()=>o});var i=s(4700);const l={},r=i.createContext(l);function t(n){const e=i.useContext(r);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(l):n.components||l:t(n.components),i.createElement(r.Provider,{value:e},n.children)}}}]);