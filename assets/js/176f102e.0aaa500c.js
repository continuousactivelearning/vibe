"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7827],{2144:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"System Design & Architecture/Backend/Module Breakdown/Quizzes","title":"Quizzes","description":"A comprehensive system for managing quizzes, question banks, attempts, and grading workflows with modular, testable components.","source":"@site/docs/System Design & Architecture/Backend/4. Module Breakdown/6. Quizzes.md","sourceDirName":"System Design & Architecture/Backend/4. Module Breakdown","slug":"/System Design & Architecture/Backend/Module Breakdown/Quizzes","permalink":"/vibe/docs/System Design & Architecture/Backend/Module Breakdown/Quizzes","draft":false,"unlisted":false,"editUrl":"https://github.com/continuousactivelearning/vibe/edit/main/docs/docs/System Design & Architecture/Backend/4. Module Breakdown/6. Quizzes.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Notifications","permalink":"/vibe/docs/System Design & Architecture/Backend/Module Breakdown/Notifications"},"next":{"title":"Module Breakdown","permalink":"/vibe/docs/System Design & Architecture/Backend/Module Breakdown"}}');var i=n(7968),r=n(4318);const o={},a=void 0,c={},l=[{value:"\ud83d\uddc2\ufe0f Folder Structure",id:"\ufe0f-folder-structure",level:3},{value:"\ud83c\udfaf Component Responsibilities",id:"-component-responsibilities",level:3},{value:"\ud83d\udd01 Interaction Flow",id:"-interaction-flow",level:3}];function d(e){const s={code:"code",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.p,{children:"A comprehensive system for managing quizzes, question banks, attempts, and grading workflows with modular, testable components."}),"\n",(0,i.jsx)(s.h3,{id:"\ufe0f-folder-structure",children:"\ud83d\uddc2\ufe0f Folder Structure"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"quizzes/\n\u251c\u2500\u2500 abilities/                   # CASL policies for quiz, question, attempt, and bank permissions\n\u2502   \u251c\u2500\u2500 attemptAbilities.ts\n\u2502   \u251c\u2500\u2500 questionAbilities.ts\n\u2502   \u251c\u2500\u2500 questionBankAbilities.ts\n\u2502   \u2514\u2500\u2500 quizAbilities.ts\n\u251c\u2500\u2500 classes/                      # DTO validators and response transformers\n\u2502   \u251c\u2500\u2500 validators/               # Input schemas: QuizValidators, QuestionValidators, AttemptValidators\n\u2502   \u2514\u2500\u2500 transformers/             # Output schemas and mappers: QuizResponse, QuestionData, AttemptResult\n\u251c\u2500\u2500 controllers/                  # API endpoints\n\u2502   \u251c\u2500\u2500 QuizController.ts         # Create, retrieve, update, delete quizzes\n\u2502   \u251c\u2500\u2500 QuestionBankController.ts # Manage question banks and import/export\n\u2502   \u251c\u2500\u2500 QuestionController.ts     # CRUD for individual questions\n\u2502   \u251c\u2500\u2500 AttemptController.ts      # Handle quiz attempts, submissions, and retrieval\n\u251c\u2500\u2500 interfaces/                   # TypeScript contracts\n\u251c\u2500\u2500 question-processing/          # Pluggable question logic\n\u2502   \u251c\u2500\u2500 QuestionProcessor.ts      # Core pipeline for rendering and grading\n\u2502   \u251c\u2500\u2500 graders/                  # Individual grading strategies (multiple choice, free text)\n\u2502   \u251c\u2500\u2500 renderers/                # Question renderers for different formats\n\u2502   \u251c\u2500\u2500 tag-parser/               # Parses custom tags in question text\n\u2502   \u2514\u2500\u2500 validators/               # Business-rule validators for question consistency\n\u251c\u2500\u2500 services/                     # Business logic\n\u2502   \u251c\u2500\u2500 QuizService.ts            # Orchestrates quiz creation, versioning, and deletion\n\u2502   \u251c\u2500\u2500 QuestionBankService.ts    # Bank import, export, and search\n\u2502   \u251c\u2500\u2500 QuestionService.ts        # Manages individual question lifecycle\n\u2502   \u2514\u2500\u2500 AttemptService.ts         # Evaluates submissions, calculates scores, tracks progress\n\u251c\u2500\u2500 utils/                        # Shared functions (e.g., pagination, randomization)\n\u251c\u2500\u2500 container.ts                  # Binds controllers, services, repos, and abilities using InversifyJS\n\u251c\u2500\u2500 types.ts                      # DI symbols for all components in module\n\u2514\u2500\u2500 tests/                        # Unit and integration tests\n"})}),"\n",(0,i.jsx)(s.h3,{id:"-component-responsibilities",children:"\ud83c\udfaf Component Responsibilities"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Controllers"}),": Expose RESTful endpoints; validate input via DTOs; enforce CASL policies via ",(0,i.jsx)(s.code,{children:"@Authorized"})," and ability decorators."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Services"}),": Contain core business workflows\u2014quiz lifecycle, bank management, question operations, attempt grading and scoring."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Repositories"}),": Abstract MongoDB operations for quizzes, questions, banks, and attempts; support transactions and pagination."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Abilities"}),": Define fine-grained access rules for CRUD operations and attempt submissions."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Question Processing"}),": Modular pipeline to render questions, parse custom tags, validate business rules, and apply grading strategies."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Interfaces & Types"}),": Ensure type-safe contracts for grading algorithms, repository methods, and DTOs."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Dependency Injection"}),": ",(0,i.jsx)(s.code,{children:"container.ts"})," binds interfaces to implementations using Inversify\u2019s ",(0,i.jsx)(s.code,{children:"@injectable"})," and ",(0,i.jsx)(s.code,{children:"@inject"}),", promoting loose coupling and easy testing."]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"-interaction-flow",children:"\ud83d\udd01 Interaction Flow"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Quiz Definition"}),": Instructors create quizzes and attach question banks via ",(0,i.jsx)(s.code,{children:"QuizController"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Question Management"}),": Questions authored via ",(0,i.jsx)(s.code,{children:"QuestionController"}),", validated, and stored in banks."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Attempt Lifecycle"}),": Students initiate attempts (",(0,i.jsx)(s.code,{children:"AttemptController"}),"), answers processed through ",(0,i.jsx)(s.code,{children:"AttemptService"})," using ",(0,i.jsx)(s.code,{children:"QuestionProcessor"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Scoring & Feedback"}),": Graders compute scores; results persisted and accessible to users."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Integration"}),": Module interacts with ",(0,i.jsx)(s.strong,{children:"Auth"})," for user identity, ",(0,i.jsx)(s.strong,{children:"Users"})," for progress tracking."]}),"\n"]})]})}function u(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},4318:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>a});var t=n(4700);const i={},r=t.createContext(i);function o(e){const s=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);