"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3909],{3033:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var r=s(4700);const t={},i=r.createContext(t);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:n},e.children)}},6583:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Typescript/Design Patterns","title":"Design Patterns","description":"Topic 5: Design Patterns  (Singleton, Factory, Observer, Strategy with TypeScript Implementations)","source":"@site/newdocs/Typescript/13. Design Patterns.md","sourceDirName":"Typescript","slug":"/Typescript/Design Patterns","permalink":"/vibe/newdocs/Typescript/Design Patterns","draft":false,"unlisted":false,"editUrl":"https://github.com/your-org/\u2026/newdocs/Typescript/13. Design Patterns.md","tags":[],"version":"current","sidebarPosition":13,"frontMatter":{},"sidebar":"newSidebar","previous":{"title":"Mastering Functions in TypeScript","permalink":"/vibe/newdocs/Typescript/Mastering Functions/Mastering Functions in TypeScript"},"next":{"title":"Optional and Default Parameters in TypeScript","permalink":"/vibe/newdocs/Typescript/Optional and Default Parameters/Optional and Default Parameters in TypeScript"}}');var t=s(7968),i=s(3033);const a={},l=void 0,o={},c=[{value:"1. Problem Statement",id:"1-problem-statement",level:2},{value:"2. Learning Objectives",id:"2-learning-objectives",level:2},{value:"3. Concept Introduction with Analogy",id:"3-concept-introduction-with-analogy",level:2},{value:"The Caf\xe9 Playbook Analogy",id:"the-caf\xe9-playbook-analogy",level:2},{value:"What Are Design Patterns?",id:"what-are-design-patterns",level:2},{value:"The Four Patterns (with Simple Explanations &amp; Analogies)",id:"the-four-patterns-with-simple-explanations--analogies",level:2},{value:"a. Singleton",id:"a-singleton",level:2},{value:"b. Factory",id:"b-factory",level:2},{value:"c. Observer",id:"c-observer",level:2},{value:"4. Strategy",id:"4-strategy",level:2},{value:"6. Challenge",id:"6-challenge",level:2},{value:"7. Quick Recap &amp; Key Takeaways",id:"7-quick-recap--key-takeaways",level:2},{value:"8. (Optional) Programmer\u2019s Workflow Checklist",id:"8-optional-programmers-workflow-checklist",level:2},{value:"9. Coming up next:",id:"9-coming-up-next",level:2}];function d(e){const n={br:"br",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Topic 5: Design Patterns  (Singleton, Factory, Observer, Strategy with TypeScript Implementations)"}),"\n",(0,t.jsx)(n.h2,{id:"1-problem-statement",children:"1. Problem Statement"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"CoffeeShip Caf\xe9\u2019s Growing Pains"})}),"\n",(0,t.jsx)(n.p,{children:"CoffeeShip Caf\xe9 is booming, but challenges are brewing:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Sometimes, two managers try to run the shop at once, causing confusion."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Adding new drinks to the menu is a headache."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"When a drink is prepared, inventory, baristas, and the customer all need updates-if one is missed, chaos erupts."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"The caf\xe9 wants to offer seasonal promotions and different ways to prepare drinks, but changing the workflow is risky."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:"https://i.postimg.cc/vTPDMM6J/day-4-tut2.png",alt:"Coffee shop challenge"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"How can CoffeeShip Caf\xe9 keep operations smooth, reliable, and ready to grow-even as new drinks, staff, and features are added?"})}),"\n",(0,t.jsx)(n.h2,{id:"2-learning-objectives",children:"2. Learning Objectives"}),"\n",(0,t.jsx)(n.p,{children:"By the end of this lesson, you\u2019ll be able to:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Recognize and implement Singleton, Factory, Observer, and Strategy design patterns in TypeScript."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Apply these patterns to solve real-world scaling and coordination problems."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Build systems that are modular, maintainable, and easy to extend."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"3-concept-introduction-with-analogy",children:"3. Concept Introduction with Analogy"}),"\n",(0,t.jsx)(n.h2,{id:"the-caf\xe9-playbook-analogy",children:"The Caf\xe9 Playbook Analogy"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Singleton:"}),"  Only one head manager can run the caf\xe9 at any time."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Factory:"}),"  The kitchen has a recipe book for making any drink, so new drinks can be added easily."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Observer:"}),"  When a drink is ready, all relevant staff (inventory, barista, customer) are instantly notified-no one is left out."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Strategy:"}),"  The barista can use different preparation styles (fast, eco, strong) for each order, and can swap styles as needed."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"what-are-design-patterns",children:"What Are Design Patterns?"}),"\n",(0,t.jsxs)(n.p,{children:["Design patterns are  ",(0,t.jsx)(n.strong,{children:"repeatable solutions to common problems"}),"  that come up when designing software systems.\nThink of them as \u201cbest practice templates\u201d or \u201crecipes\u201d that experienced developers use to solve certain types of challenges.",(0,t.jsx)(n.br,{}),"\n","They aren\u2019t finished code, but rather  ",(0,t.jsx)(n.strong,{children:"ways of organizing your program"}),"  so it\u2019s easier to build, change, and understand."]}),"\n",(0,t.jsx)(n.h2,{id:"the-four-patterns-with-simple-explanations--analogies",children:"The Four Patterns (with Simple Explanations & Analogies)"}),"\n",(0,t.jsx)(n.h2,{id:"a-singleton",children:"a. Singleton"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"What it is:"}),(0,t.jsx)(n.br,{}),"\n","Ensures there is  ",(0,t.jsx)(n.strong,{children:"only one instance"}),"  of a particular object throughout your entire application"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Analogy:"}),(0,t.jsx)(n.br,{}),"\n","Like a caf\xe9 with only one manager-no matter how many times you ask for the manager, you always get the same person."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Why use it:"}),(0,t.jsx)(n.br,{}),"\n","To manage things that should only exist once, such as a settings manager, database connection, or logging service.\n",(0,t.jsx)(n.strong,{children:"Example:"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"class CafeManager {\n private static instance: CafeManager;\n private constructor() {}\n static getInstance(): CafeManager {\n   if (!CafeManager.instance) {\n     CafeManager.instance = new CafeManager();\n   }\n   return CafeManager.instance;\n }\n}\n// Usage:\nconst manager1 = CafeManager.getInstance();\nconst manager2 = CafeManager.getInstance();\nconsole.log(manager1 === manager2); // true\n\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Key point:"}),(0,t.jsx)(n.br,{}),"\n","There\u2019s always just one manager."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"b-factory",children:"b. Factory"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"What it is:"}),(0,t.jsx)(n.br,{}),"\n","Provides a way to  ",(0,t.jsx)(n.strong,{children:"create objects"}),"  (like drinks, users, or shapes) without specifying the exact class/type to create."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Analogy:"}),(0,t.jsx)(n.br,{}),"\n","Like a barista who can make any drink you order (\u201clatte,\u201d \u201cespresso,\u201d \u201ctea\u201d)-you just tell them what you want, not how to make it."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Why use it:"}),(0,t.jsx)(n.br,{}),"\n","To make it easy to add new types of objects without changing lots of code."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'interface Drink { serve(): void; }\nclass Latte implements Drink { serve() { console.log("Latte!"); } }\nclass Espresso implements Drink { serve() { console.log("Espresso!"); } }\nclass DrinkFactory {\n  static createDrink(type: string): Drink {\n    if (type === "latte") return new Latte();\n    if (type === "espresso") return new Espresso();\n    throw new Error("Unknown drink");\n  }\n}\n// Usage:\nconst drink = DrinkFactory.createDrink("latte");\ndrink.serve(); // "Latte!"\n\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Key point:"}),(0,t.jsx)(n.br,{}),"\n","You can add new drinks (types) without rewriting the whole menu."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"c-observer",children:"c. Observer"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"What it is:"}),(0,t.jsx)(n.br,{}),"\n","Lets one object (the \u201csubject\u201d)  ",(0,t.jsx)(n.strong,{children:"notify many other objects"}),"  (the \u201cobservers\u201d) when something changes."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Analogy:"}),(0,t.jsx)(n.br,{}),"\n","Like a barista ringing a bell when a drink is ready-everyone who cares (inventory, customer, promotion system) hears the bell and reacts."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Why use it:"}),(0,t.jsx)(n.br,{}),"\n","To keep different parts of your system in sync without tightly coupling them."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'interface Observer { update(msg: string): void; }\nclass Customer implements Observer { update(msg: string) { console.log("Customer:", msg); } }\nclass Inventory implements Observer { update(msg: string) { console.log("Inventory:", msg); } }\nclass DrinkOrder {\n  private observers: Observer[] = [];\n  addObserver(obs: Observer) { this.observers.push(obs); }\n  notifyAll(msg: string) { this.observers.forEach(obs => obs.update(msg)); }\n  completeOrder() { this.notifyAll("Order complete!"); }\n}\n// Usage:\nconst order = new DrinkOrder();\norder.addObserver(new Customer());\norder.addObserver(new Inventory());\norder.completeOrder();\n// Output: Customer: Order complete! Inventory: Order complete!\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Key point:"}),(0,t.jsx)(n.br,{}),"\n","When something important happens, everyone who needs to know is notified automatically."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"4-strategy",children:"4. Strategy"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"What it is:"}),(0,t.jsx)(n.br,{}),"\n","Lets you  ",(0,t.jsx)(n.strong,{children:"swap out different ways of doing something"}),"  (an \u201calgorithm\u201d) without changing the object that uses it."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Analogy:"}),(0,t.jsx)(n.br,{}),"\n","Like a barista choosing how to prepare a drink: fast, eco-friendly, or extra strong-just swap the recipe card."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Why use it:"}),(0,t.jsx)(n.br,{}),"\n","To change behavior on the fly, or to keep your code flexible and clean."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'interface PrepStrategy { prepare(): void; }\nclass FastPrep implements PrepStrategy { prepare() { console.log("Fast prep!"); } }\nclass EcoPrep implements PrepStrategy { prepare() { console.log("Eco prep!"); } }\nclass Barista {\n  constructor(private strategy: PrepStrategy) {}\n  setStrategy(strategy: PrepStrategy) { this.strategy = strategy; }\n  makeDrink() { this.strategy.prepare(); }\n}\n// Usage:\nconst barista = new Barista(new FastPrep());\nbarista.makeDrink(); // "Fast prep!"\nbarista.setStrategy(new EcoPrep());\nbarista.makeDrink(); // "Eco prep!"\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Key point:"}),(0,t.jsx)(n.br,{}),"\n","You can switch how things are done without rewriting the barista."]}),"\n"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Pattern"}),(0,t.jsx)(n.th,{children:"What It Solves"}),(0,t.jsx)(n.th,{children:"Analogy"}),(0,t.jsx)(n.th,{children:"When to Use"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Singleton"}),(0,t.jsx)(n.td,{children:"Only one instance needed"}),(0,t.jsx)(n.td,{children:"One caf\xe9 manager"}),(0,t.jsx)(n.td,{children:"Global settings, logging, config"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Factory"}),(0,t.jsx)(n.td,{children:"Flexible object creation"}),(0,t.jsx)(n.td,{children:"Barista makes any drink"}),(0,t.jsx)(n.td,{children:"Many types, easy to add new ones"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Observer"}),(0,t.jsx)(n.td,{children:"Notify many when something changes"}),(0,t.jsx)(n.td,{children:"Bell rings, all react"}),(0,t.jsx)(n.td,{children:"Events, updates, notifications"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Strategy"}),(0,t.jsx)(n.td,{children:"Swap algorithms/behaviors easily"}),(0,t.jsx)(n.td,{children:"Swap recipe cards"}),(0,t.jsx)(n.td,{children:"Change behavior at runtime"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"6-challenge",children:"6. Challenge"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Your Turn!"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Implement a  ",(0,t.jsx)(n.code,{children:"PromotionSystem"}),"  observer that announces special offers to customers when a drink is served."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Add it to the  ",(0,t.jsx)(n.code,{children:"DrinkOrder"}),"  notification list and test it."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"7-quick-recap--key-takeaways",children:"7. Quick Recap & Key Takeaways"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Singleton:"}),"  Ensures only one manager is in charge."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Factory:"}),"  Makes adding new drinks simple and safe."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Observer:"}),"  Instantly updates all staff and customers about important events."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Strategy:"}),"  Lets baristas switch preparation methods as needed."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"8-optional-programmers-workflow-checklist",children:"8. (Optional) Programmer\u2019s Workflow Checklist"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Need only one instance? Use Singleton."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Want to create objects flexibly? Use Factory."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Need to notify many parties? Use Observer."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Want to swap behaviors easily? Use Strategy."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"9-coming-up-next",children:"9. Coming up next:"}),"\n",(0,t.jsxs)(n.p,{children:["Master  ",(0,t.jsx)(n.strong,{children:"Dependency Injection"}),"-the secret ingredient for building flexible, testable, and loosely coupled systems.",(0,t.jsx)(n.br,{}),"\n","Imagine your caf\xe9\u2019s staff and machines always getting the right tools, ingredients, and helpers-automatically!"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);