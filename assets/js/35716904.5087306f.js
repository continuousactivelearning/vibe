"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6644],{3933:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Mongo DB/Aggregation Framework","title":"Aggregation Framework","description":"MongoDB Aggregation Framework: $match, $group, $project, and Pipeline Stages","source":"@site/newdocs/Mongo DB/Aggregation Framework.md","sourceDirName":"Mongo DB","slug":"/Mongo DB/Aggregation Framework","permalink":"/vibe/newdocs/Mongo DB/Aggregation Framework","draft":false,"unlisted":false,"editUrl":"https://github.com/your-org/\u2026/newdocs/Mongo DB/Aggregation Framework.md","tags":[],"version":"current","frontMatter":{},"sidebar":"newSidebar","previous":{"title":"Github Tutorial 5","permalink":"/vibe/newdocs/Github Tutorial/Github Tutorial 5"},"next":{"title":"CRUD Operations","permalink":"/vibe/newdocs/Mongo DB/CRUD Operations"}}');var r=s(7968),t=s(9880);const l={},a=void 0,o={},c=[{value:"1. Problem Statement",id:"1-problem-statement",level:2},{value:"<strong>Case Study: MovieFlix Analytics</strong>",id:"case-study-movieflix-analytics",level:2},{value:"2. Learning Objectives",id:"2-learning-objectives",level:2},{value:"3. Concept Introduction with Analogy",id:"3-concept-introduction-with-analogy",level:2},{value:"<strong>Analogy: The Data Conveyor Belt</strong>",id:"analogy-the-data-conveyor-belt",level:2},{value:"4. Technical Deep Dive",id:"4-technical-deep-dive",level:2},{value:"<strong>B. Key Pipeline Stages</strong>",id:"b-key-pipeline-stages",level:2},{value:"<strong>1. $match: Filtering Documents</strong>",id:"1-match-filtering-documents",level:2},{value:"5. Step-by-Step Data Modeling &amp; Code Walkthrough",id:"5-step-by-step-data-modeling--code-walkthrough",level:2},{value:"6. Interactive Challenge / Mini-Project",id:"6-interactive-challenge--mini-project",level:2},{value:"7. Common Pitfalls &amp; Best Practices",id:"7-common-pitfalls--best-practices",level:2},{value:"8. Optional: Programmer\u2019s Workflow Checklist",id:"8-optional-programmers-workflow-checklist",level:2}];function d(e){const n={br:"br",code:"code",h2:"h2",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"MongoDB Aggregation Framework: $match, $group, $project, and Pipeline Stages"}),"\n",(0,r.jsx)(n.h2,{id:"1-problem-statement",children:"1. Problem Statement"}),"\n",(0,r.jsx)(n.h2,{id:"case-study-movieflix-analytics",children:(0,r.jsx)(n.strong,{children:"Case Study: MovieFlix Analytics"})}),"\n",(0,r.jsx)(n.p,{children:"MovieFlix, a global movie streaming platform, wants to:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Find the most popular genres and top-rated movies in each country."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Calculate average watch times, total views per genre, and revenue by region."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Generate business dashboards and user recommendations, all from millions of viewing records."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://i.postimg.cc/Y9DY4NVg/react.png",alt:"Sample Image"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"The challenge:"}),(0,r.jsx)(n.br,{}),"\n","How can MovieFlix efficiently analyze, summarize, and transform huge volumes of streaming data\u2014without exporting it to another system or writing complex, slow code?"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"2-learning-objectives",children:"2. Learning Objectives"}),"\n",(0,r.jsx)(n.p,{children:"By the end of this tutorial, you will:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Understand what the MongoDB Aggregation Framework is and why it\u2019s powerful."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"-   Build multi-stage aggregation pipelines using  `$match`,  `$group`,  `$project`, and more.\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Use pipeline stages to filter, group, reshape, and analyze data."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Apply best practices for performance and maintainability."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"3-concept-introduction-with-analogy",children:"3. Concept Introduction with Analogy"}),"\n",(0,r.jsx)(n.h2,{id:"analogy-the-data-conveyor-belt",children:(0,r.jsx)(n.strong,{children:"Analogy: The Data Conveyor Belt"})}),"\n",(0,r.jsx)(n.p,{children:"Imagine MovieFlix\u2019s analytics as a high-tech conveyor belt in a mailroom:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"-   Each letter (document) passes through a series of stations (pipeline stages).\n    \n-   Some stations filter out junk mail (`$match`).\n    \n-   Others sort mail into bins by city or sender (`$group`).\n    \n-   Some reformat addresses or add labels (`$project`).\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"At the end, you have exactly the summary or report you need."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"The aggregation pipeline is this conveyor belt\u2014each stage transforms or filters the data, step by step, until you get your answer."})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"4-technical-deep-dive",children:"4. Technical Deep Dive"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"A. What is the Aggregation Framework?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The Aggregation Framework is MongoDB\u2019s built-in tool for advanced data analysis and transformation."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["It uses a  ",(0,r.jsx)(n.strong,{children:"pipeline"}),": an array of stages, each performing a specific operation on the documents."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Each stage\u2019s output becomes the next stage\u2019s input\u2014like a series of assembly line steps."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Pipeline Syntax:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"db.collection.aggregate([\n  { $match: { ... } },\n  { $group: { ... } },\n  { $project: { ... } },\n  // ...more stages\n])\n\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Pipelines can have any number of stages, in any order"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"b-key-pipeline-stages",children:(0,r.jsx)(n.strong,{children:"B. Key Pipeline Stages"})}),"\n",(0,r.jsx)(n.h2,{id:"1-match-filtering-documents",children:(0,r.jsx)(n.strong,{children:"1. $match: Filtering Documents"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Like a query filter; selects only documents that meet criteria."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Should be placed early for efficiency."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'{ $match: { country: "USA", "rating": { $gte: 8 } } }\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Filters for US movies with rating 8 or higher."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"2. $group: Aggregating Data"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Groups documents by a field (or expression) and computes aggregates (sum, avg, count, etc.)."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The  ",(0,r.jsx)(n.code,{children:"_id"}),"  field specifies the group key."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'{ $group: {\n    _id: "$genre",\n    totalViews: { $sum: "$views" },\n    avgRating: { $avg: "$rating" }\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Groups by genre, calculates total views and average rating per genre."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"3. $project: Shaping Output"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Reshapes documents, includes/excludes fields, computes new fields."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Can rename, transform, or format fields."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'{ $project: {\n    _id: 0,\n    genre: "$_id",\n    totalViews: 1,\n    avgRating: { $round: ["$avgRating", 2] }\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Outputs only genre, totalViews, and a rounded avgRating."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"4. Other Useful Stages"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"-   `$sort`: Orders documents (e.g., by totalViews descending).\n    \n-   `$limit`: Restricts the number of output documents.\n    \n-   `$unwind`: Deconstructs arrays into separate documents.\n    \n-   `$addFields`: Adds computed fields.\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"5. How the Pipeline Works"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Documents flow through each stage in order."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Each stage can filter, group, sort, or reshape data."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The output of the last stage is your final result."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"C. Aggregation Pipeline Example"})}),"\n",(0,r.jsx)(n.p,{children:"Suppose MovieFlix wants to find the top 3 genres by total views in 2024:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'db.watchHistory.aggregate([\n  // 1. Only 2024 records\n  { $match: { year: 2024 } },\n  // 2. Group by genre, sum views\n  { $group: { _id: "$genre", totalViews: { $sum: "$views" } } },\n  // 3. Sort by totalViews descending\n  { $sort: { totalViews: -1 } },\n  // 4. Limit to top 3\n  { $limit: 3 },\n  // 5. Project clean output\n  { $project: { _id: 0, genre: "$_id", totalViews: 1 } }\n])\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"-   `$match`: Filters for 2024.\n    \n-   `$group`: Sums up views per genre.\n    \n-   `$sort`  and  `$limit`: Gets top 3 genres.\n    \n-   `$project`: Formats output for reporting.\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"D. Best Practices for Aggregation Pipelines"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"-   **Place  `$match`  early**  to reduce data volume for later stages.\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Use indexes"}),"  on fields used in  ",(0,r.jsx)(n.code,{children:"$match"}),"  for performance."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Keep documents small"}),"\u2014avoid unnecessary fields with  ",(0,r.jsx)(n.code,{children:"$project"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Test each stage"}),"  separately to debug and optimize."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Limit pipeline complexity"}),"  for maintainability."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"5-step-by-step-data-modeling--code-walkthrough",children:"5. Step-by-Step Data Modeling & Code Walkthrough"}),"\n",(0,r.jsx)(n.p,{children:"Let\u2019s build a real MovieFlix aggregation pipeline."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"A. Sample Document Structure"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "_id": ObjectId("..."),\n  "movie": "Edge of Tomorrow",\n  "genre": "Sci-Fi",\n  "country": "USA",\n  "views": 15000,\n  "rating": 8.2,\n  "year": 2024\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"B. Find the Average Rating and Total Views per Genre in the USA"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'db.watchHistory.aggregate([\n  { $match: { country: "USA" } },\n  { $group: {\n      _id: "$genre",\n      totalViews: { $sum: "$views" },\n      avgRating: { $avg: "$rating" }\n    }\n  },\n  { $project: {\n      _id: 0,\n      genre: "$_id",\n      totalViews: 1,\n      avgRating: { $round: ["$avgRating", 2] }\n    }\n  }\n])\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Filters for USA records."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Groups by genre."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Sums views and averages ratings."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Projects a clean, rounded output."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"C. Find Top 5 Movies by Views in 2024"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:"db.watchHistory.aggregate([\n  { $match: { year: 2024 } },\n  { $sort: { views: -1 } },\n  { $limit: 5 },\n  { $project: { _id: 0, movie: 1, views: 1 } }\n])\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"D. Count Movies per Genre with $group and $project"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'db.watchHistory.aggregate([\n  { $group: { _id: "$genre", count: { $sum: 1 } } },\n  { $project: { _id: 0, genre: "$_id", count: 1 } }\n])\n'})}),"\n",(0,r.jsx)(n.h2,{id:"6-interactive-challenge--mini-project",children:"6. Interactive Challenge / Mini-Project"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Your Turn!"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Write an aggregation pipeline to find the average rating for each genre in 2024, but only include genres with more than 10,000 total views."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Output should show genre, average rating (rounded to 1 decimal), and total views."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"7-common-pitfalls--best-practices",children:"7. Common Pitfalls & Best Practices"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Pitfall"}),(0,r.jsx)(n.th,{children:"Best Practice"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["Placing ",(0,r.jsx)(n.code,{children:"$match"})," late"]}),(0,r.jsxs)(n.td,{children:["Put ",(0,r.jsx)(n.code,{children:"$match"})," early to reduce data volume"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Returning too many fields"}),(0,r.jsxs)(n.td,{children:["Use ",(0,r.jsx)(n.code,{children:"$project"})," to limit output"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Not using indexes"}),(0,r.jsxs)(n.td,{children:["Index fields used in ",(0,r.jsx)(n.code,{children:"$match"})," for speed"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Complex pipelines in one go"}),(0,r.jsx)(n.td,{children:"Build and test one stage at a time"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"8-optional-programmers-workflow-checklist",children:"8. Optional: Programmer\u2019s Workflow Checklist"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Define your output and work backwards to design stages."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Place  ",(0,r.jsx)(n.code,{children:"$match"}),"  as early as possible."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Use  ",(0,r.jsx)(n.code,{children:"$group"}),"  for aggregation,  ",(0,r.jsx)(n.code,{children:"$project"}),"  for shaping output."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Test each stage\u2019s output before adding the next."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Use  ",(0,r.jsx)(n.code,{children:"$sort"}),"  and  ",(0,r.jsx)(n.code,{children:"$limit"}),"  for ranking and pagination."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Optimize with indexes and by limiting unnecessary fields."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},9880:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var i=s(4700);const r={},t=i.createContext(r);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);