"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7397],{715:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"React/TSX & Typed Components_","title":"TSX & Typed Components_","description":"TSX & Typed Components in React: Props Interfaces, State Typing, Functional & Class Components","source":"@site/newdocs/React/TSX & Typed Components_.md","sourceDirName":"React","slug":"/React/TSX & Typed Components_","permalink":"/vibe/newdocs/React/TSX & Typed Components_","draft":false,"unlisted":false,"editUrl":"https://github.com/your-org/\u2026/newdocs/React/TSX & Typed Components_.md","tags":[],"version":"current","frontMatter":{},"sidebar":"newSidebar","previous":{"title":"State Management in React","permalink":"/vibe/newdocs/React/State Management in React"},"next":{"title":"TSX & Typed Components_Type  Safety","permalink":"/vibe/newdocs/React/TSX & Typed Components_Type  Safety"}}');var r=s(7968),a=s(9880);const i={},l=void 0,o={},c=[{value:"1. Problem Statement",id:"1-problem-statement",level:2},{value:"<strong>Case Study: Smart Portfolio Dashboard</strong>",id:"case-study-smart-portfolio-dashboard",level:2},{value:"2. Learning Objectives",id:"2-learning-objectives",level:2},{value:"3. Concept Introduction with Analogy",id:"3-concept-introduction-with-analogy",level:2},{value:"<strong>Analogy: The Portfolio Ledger</strong>",id:"analogy-the-portfolio-ledger",level:2},{value:"4. Technical Deep Dive",id:"4-technical-deep-dive",level:2},{value:"5. Step-by-Step Data Modeling &amp; Code Walkthrough",id:"5-step-by-step-data-modeling--code-walkthrough",level:2},{value:"6. Interactive Challenge / Mini-Project",id:"6-interactive-challenge--mini-project",level:2},{value:"7. Common Pitfalls &amp; Best Practices",id:"7-common-pitfalls--best-practices",level:2},{value:"8. Optional: Programmer\u2019s Workflow Checklist",id:"8-optional-programmers-workflow-checklist",level:2}];function d(e){const n={br:"br",code:"code",h2:"h2",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"TSX & Typed Components in React: Props Interfaces, State Typing, Functional & Class Components"}),"\n",(0,r.jsx)(n.h2,{id:"1-problem-statement",children:"1. Problem Statement"}),"\n",(0,r.jsx)(n.h2,{id:"case-study-smart-portfolio-dashboard",children:(0,r.jsx)(n.strong,{children:"Case Study: Smart Portfolio Dashboard"})}),"\n",(0,r.jsx)(n.p,{children:"You\u2019re building a financial portfolio dashboard:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Each asset card must show a name, symbol, current value, and percentage change\u2014all with strict type safety."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Users can add, remove, or update assets, and the UI must prevent type errors (e.g., mixing up numbers and strings, missing props)."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Some components are stateless (just display data), others manage complex, interactive state (adding assets, editing values)."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The team wants to avoid runtime bugs from missing or mistyped props, and ensure state is always managed correctly."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)("img",{src:"https://i.postimg.cc/BnMKw9cs/react8.png",alt:"Sample Image",width:"400"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"The challenge:"}),(0,r.jsx)(n.br,{}),"\n","How do you ensure every React component\u2014functional or class\u2014has strictly typed props and state, so the UI is robust, maintainable, and error-free?"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"2-learning-objectives",children:"2. Learning Objectives"}),"\n",(0,r.jsx)(n.p,{children:"By the end of this tutorial, you will:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Define and use  ",(0,r.jsx)(n.strong,{children:"props interfaces"}),"  for both functional and class components."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Strongly type component state (with  ",(0,r.jsx)(n.code,{children:"useState"}),",  ",(0,r.jsx)(n.code,{children:"useReducer"}),", and class state)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Know when to use interfaces vs. type aliases for props/state."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Understand typing for event handlers, children, and generics."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Compare typing in functional vs. class components."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Avoid common pitfalls like implicit  ",(0,r.jsx)(n.code,{children:"any"}),", missing props, and state mutation."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"3-concept-introduction-with-analogy",children:"3. Concept Introduction with Analogy"}),"\n",(0,r.jsx)(n.h2,{id:"analogy-the-portfolio-ledger",children:(0,r.jsx)(n.strong,{children:"Analogy: The Portfolio Ledger"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Props"}),"  are like asset forms: Each field (name, value, change) must be filled out with the correct type\u2014no mixing up numbers and text."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"State"}),"  is the running ledger: It tracks all changes and must always be accurate and up-to-date."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Functional Components"}),"  are like calculators: They process data quickly, and can keep memory (state) with hooks."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Class Components"}),"  are like portfolio managers: They manage more complex workflows, with a clear structure for their data and methods."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"TypeScript is the auditor:"}),(0,r.jsx)(n.br,{}),"\n","It catches every type mismatch before it becomes a costly bug."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"4-technical-deep-dive",children:"4. Technical Deep Dive"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"A. Typing Props: Interfaces and Type Aliases"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"1. Defining Props with Interfaces"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Use  ",(0,r.jsx)(n.code,{children:"interface"}),"  or  ",(0,r.jsx)(n.code,{children:"type"}),"  to declare the shape of props."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Interfaces are extensible and ideal for public APIs."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// AssetCard.tsx\ninterface AssetCardProps {\n  name: string;\n  symbol: string;\n  value: number;\n  change: number;\n  onRemove: (symbol: string) => void;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"2. Using Type Aliases for Props"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"-   Type aliases are great for unions or when you want to combine types.\n\ntype AssetType = 'stock' | 'bond' | 'crypto';\ntype AssetProps = {\n  type: AssetType;\n  value: number;\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"3. Optional and Default Props"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Use  ",(0,r.jsx)(n.code,{children:"?"}),"  for optional props."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Provide default values in destructuring or with  ",(0,r.jsx)(n.code,{children:"defaultProps"}),"  (class components)."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const AssetCard: React.FC<AssetCardProps> = ({\n  name,\n  symbol,\n  value,\n  change,\n  onRemove\n}) => (\n  <div>\n    <span>{name} ({symbol})</span>\n    <span>${value}</span>\n    <span style={{ color: change >= 0 ? 'green' : 'red' }}>\n      {change > 0 ? '+' : ''}{change}%\n    </span>\n    <button onClick={() => onRemove(symbol)}>Remove</button>\n  </div>\n);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"If you pass a prop not in the interface, TypeScript will error."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"B. Typing State in Functional Components"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"1. useState with Explicit Types"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const [selectedSymbol, setSelectedSymbol] = useState<string | null>(null);\nconst [filters, setFilters] = useState<{ type: AssetType; minValue: number }>({ type: 'stock', minValue: 0 });\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"TypeScript infers the type from the initial value, but you can specify explicitly for clarity"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"2. Complex State with useReducer"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"interface PortfolioState {\n  assets: { name: string; symbol: string; value: number; change: number }[];\n}\ntype PortfolioAction =\n  | { type: 'add'; asset: PortfolioState['assets'][number] }\n  | { type: 'remove'; symbol: string };\n\nfunction portfolioReducer(state: PortfolioState, action: PortfolioAction): PortfolioState {\n  switch (action.type) {\n    case 'add':\n      return { ...state, assets: [...state.assets, action.asset] };\n    case 'remove':\n      return { ...state, assets: state.assets.filter(a => a.symbol !== action.symbol) };\n    default:\n      return state;\n  }\n}\nconst [state, dispatch] = useReducer(portfolioReducer, { assets: [] });\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Useful for non-trivial, multi-field state."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"C. Typing Functional Components"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"1. With React.FC or Explicit Props"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"React.FC<Props>"}),"  adds  ",(0,r.jsx)(n.code,{children:"children"}),"  by default, but explicit typing is often clearer."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const AssetCard: React.FC<AssetCardProps> = (props) => { /* ... */ };\n// or\nconst AssetCard = ({ name, symbol, value, change, onRemove }: AssetCardProps) => { /* ... */ };\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"2. Typing Event Handlers"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n  setFilters({ ...filters, minValue: Number(e.target.value) });\n};\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use React\u2019s event types for safety."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"3. Typing Children"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"interface WrapperProps {\n  children: React.ReactNode;\n}\nconst Wrapper: React.FC<WrapperProps> = ({ children }) => <div>{children}</div>;\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"D. Typing Class Components"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"1. Props and State Generics"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"React.Component<Props, State>"}),"  gives full type safety."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"interface AssetFormProps { onAdd: (asset: AssetCardProps) => void; }\ninterface AssetFormState { name: string; symbol: string; value: string; change: string; }\n\nclass AssetForm extends React.Component<AssetFormProps, AssetFormState> {\n  state: AssetFormState = { name: '', symbol: '', value: '', change: '' };\n\n  handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ [e.target.name]: e.target.value } as Pick<AssetFormState, keyof AssetFormState>);\n  };\n\n  handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    this.props.onAdd({\n      name: this.state.name,\n      symbol: this.state.symbol,\n      value: parseFloat(this.state.value),\n      change: parseFloat(this.state.change),\n      onRemove: () => {}\n    });\n    this.setState({ name: '', symbol: '', value: '', change: '' });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input name=\"name\" value={this.state.name} onChange={this.handleChange} />\n        <input name=\"symbol\" value={this.state.symbol} onChange={this.handleChange} />\n        <input name=\"value\" value={this.state.value} onChange={this.handleChange} type=\"number\" />\n        <input name=\"change\" value={this.state.change} onChange={this.handleChange} type=\"number\" />\n        <button type=\"submit\">Add Asset</button>\n      </form>\n    );\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"E. Best Practices and Pitfalls"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Pitfall"}),(0,r.jsx)(n.th,{children:"Best Practice"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["Using ",(0,r.jsx)(n.code,{children:"any"})]}),(0,r.jsx)(n.td,{children:"Always type props and state explicitly"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["Implicit ",(0,r.jsx)(n.code,{children:"any"})," in events"]}),(0,r.jsx)(n.td,{children:"Use React types for event handlers"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Optional props w/o default"}),(0,r.jsxs)(n.td,{children:["Provide defaults or handle ",(0,r.jsx)(n.code,{children:"undefined"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Mutating state directly"}),(0,r.jsx)(n.td,{children:"Use state setters and immutable patterns"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Not exporting interfaces"}),(0,r.jsx)(n.td,{children:"Export for reuse and testing"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"5-step-by-step-data-modeling--code-walkthrough",children:"5. Step-by-Step Data Modeling & Code Walkthrough"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"A. Functional Component: Asset List"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"interface Asset {\n  name: string;\n  symbol: string;\n  value: number;\n  change: number;\n}\ninterface AssetListProps {\n  assets: Asset[];\n  onRemove: (symbol: string) => void;\n}\nconst AssetList: React.FC<AssetListProps> = ({ assets, onRemove }) => (\n  <ul>\n    {assets.map(a => (\n      <li key={a.symbol}>\n        {a.name} ({a.symbol}): ${a.value} ({a.change > 0 ? '+' : ''}{a.change}%)\n        <button onClick={() => onRemove(a.symbol)}>Remove</button>\n      </li>\n    ))}\n  </ul>\n);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"B. Class Component: Asset Form"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"interface AssetFormProps { onAdd: (asset: Asset) => void; }\ninterface AssetFormState { name: string; symbol: string; value: string; change: string; }\n\nclass AssetForm extends React.Component<AssetFormProps, AssetFormState> {\n  state: AssetFormState = { name: '', symbol: '', value: '', change: '' };\n\n  handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ [e.target.name]: e.target.value } as Pick<AssetFormState, keyof AssetFormState>);\n  };\n\n  handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    this.props.onAdd({\n      name: this.state.name,\n      symbol: this.state.symbol,\n      value: parseFloat(this.state.value),\n      change: parseFloat(this.state.change)\n    });\n    this.setState({ name: '', symbol: '', value: '', change: '' });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input name=\"name\" value={this.state.name} onChange={this.handleChange} />\n        <input name=\"symbol\" value={this.state.symbol} onChange={this.handleChange} />\n        <input name=\"value\" value={this.state.value} onChange={this.handleChange} type=\"number\" />\n        <input name=\"change\" value={this.state.change} onChange={this.handleChange} type=\"number\" />\n        <button type=\"submit\">Add Asset</button>\n      </form>\n    );\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"C. State Typing with useReducer (Portfolio Management)"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"interface PortfolioState {\n  assets: Asset[];\n}\ntype PortfolioAction =\n  | { type: 'add'; asset: Asset }\n  | { type: 'remove'; symbol: string };\n\nfunction portfolioReducer(state: PortfolioState, action: PortfolioAction): PortfolioState {\n  switch (action.type) {\n    case 'add':\n      return { ...state, assets: [...state.assets, action.asset] };\n    case 'remove':\n      return { ...state, assets: state.assets.filter(a => a.symbol !== action.symbol) };\n    default:\n      return state;\n  }\n}\nconst [state, dispatch] = useReducer(portfolioReducer, { assets: [] });\n"})}),"\n",(0,r.jsx)(n.h2,{id:"6-interactive-challenge--mini-project",children:"6. Interactive Challenge / Mini-Project"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Your Turn!"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Create a  ",(0,r.jsx)(n.code,{children:"PortfolioSummary"}),"  functional component that:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Receives a typed array of assets (",(0,r.jsx)(n.code,{children:"Asset[]"}),") as props."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Renders the total value and average percentage change."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Create an  ",(0,r.jsx)(n.code,{children:"AssetEditor"}),"  class component that:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Has typed state for  ",(0,r.jsx)(n.code,{children:"name"}),",  ",(0,r.jsx)(n.code,{children:"symbol"}),",  ",(0,r.jsx)(n.code,{children:"value"}),", and  ",(0,r.jsx)(n.code,{children:"change"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Accepts a callback prop  ",(0,r.jsx)(n.code,{children:"onUpdate"}),"  (typed) to update an asset."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Resets the form after submission."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"7-common-pitfalls--best-practices",children:"7. Common Pitfalls & Best Practices"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Pitfall"}),(0,r.jsx)(n.th,{children:"Best Practice"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["Using ",(0,r.jsx)(n.code,{children:"any"})," for props/state"]}),(0,r.jsx)(n.td,{children:"Always define explicit types"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Not handling optional props"}),(0,r.jsxs)(n.td,{children:["Provide defaults or handle ",(0,r.jsx)(n.code,{children:"undefined"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Mutating state directly"}),(0,r.jsx)(n.td,{children:"Use state setters and immutable patterns"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Not exporting interfaces/types"}),(0,r.jsx)(n.td,{children:"Export for reuse and testing"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Mixing up functional and class patterns"}),(0,r.jsx)(n.td,{children:"Be consistent and clear"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"8-optional-programmers-workflow-checklist",children:"8. Optional: Programmer\u2019s Workflow Checklist"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Define interfaces/types for all props and state."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Use explicit types for event handlers and refs."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Use functional components for most new code, but type class components when needed."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Use  ",(0,r.jsx)(n.code,{children:"useReducer"}),"  for complex state logic."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},9880:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>l});var t=s(4700);const r={},a=t.createContext(r);function i(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);