"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4529],{3116:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"Typescript/Advanced Types","title":"Advanced Types","description":"Topic 3: Advanced Types (Union, Intersection, Mapped, Conditional, Utility Types)","source":"@site/newdocs/Typescript/11. Advanced Types.md","sourceDirName":"Typescript","slug":"/Typescript/Advanced Types","permalink":"/vibe/newdocs/Typescript/Advanced Types","draft":false,"unlisted":false,"editUrl":"https://github.com/your-org/\u2026/newdocs/Typescript/11. Advanced Types.md","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{},"sidebar":"newSidebar","previous":{"title":"Generics","permalink":"/vibe/newdocs/Typescript/Generics"},"next":{"title":"Mastering Loops in TypeScript","permalink":"/vibe/newdocs/Typescript/Mastering Loops/Mastering Loops in TypeScript"}}');var r=s(7968),i=s(4318);const l={},o=void 0,a={},d=[{value:"1. Problem Statement",id:"1-problem-statement",level:2},{value:"ViBe\u2019s Dynamic Dashboard Dilemma",id:"vibes-dynamic-dashboard-dilemma",level:2},{value:"2. Learning Objectives",id:"2-learning-objectives",level:2},{value:"3. Concept Introduction with Analogy",id:"3-concept-introduction-with-analogy",level:2},{value:"The Swiss Army Knife Analogy",id:"the-swiss-army-knife-analogy",level:2},{value:"<strong>Union Types</strong>",id:"union-types",level:2},{value:"<strong>How They  Work</strong>",id:"how-they--work",level:2},{value:"<strong>Intersection Types</strong>",id:"intersection-types",level:2},{value:"<strong>How They Work</strong>",id:"how-they-work",level:2},{value:"<strong>Mapped Types</strong>",id:"mapped-types",level:2},{value:"<strong>How They Work</strong>",id:"how-they-work-1",level:2},{value:"<strong>Conditional Types</strong>",id:"conditional-types",level:2},{value:"<strong>What Are They?</strong>",id:"what-are-they",level:2},{value:"4. Step-by-Step Data Modeling",id:"4-step-by-step-data-modeling",level:2},{value:"5. Live Code Walkthrough (Step-by-Step, Explained)",id:"5-live-code-walkthrough-step-by-step-explained",level:2},{value:"<strong>A. Union Types: One or the Other</strong>",id:"a-union-types-one-or-the-other",level:2},{value:"<strong>B. Intersection Types: Both at Once</strong>",id:"b-intersection-types-both-at-once",level:2},{value:"<strong>C. Mapped Types: Transform Data Shapes</strong>",id:"c-mapped-types-transform-data-shapes",level:2},{value:"<strong>D. Conditional Types: Adapting to Data</strong>",id:"d-conditional-types-adapting-to-data",level:2},{value:"<strong>E. Utility Types: Quick Type Transformations</strong>",id:"e-utility-types-quick-type-transformations",level:2},{value:"6. Challenge",id:"6-challenge",level:2},{value:"7. Quick Recap &amp; Key Takeaways",id:"7-quick-recap--key-takeaways",level:2},{value:"8. (Optional) Programmer\u2019s Workflow Checklist",id:"8-optional-programmers-workflow-checklist",level:2},{value:"9. Coming up Next",id:"9-coming-up-next",level:2}];function c(e){const n={br:"br",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Topic 3: Advanced Types (Union, Intersection, Mapped, Conditional, Utility Types)"}),"\n",(0,r.jsx)(n.h2,{id:"1-problem-statement",children:"1. Problem Statement"}),"\n",(0,r.jsx)(n.h2,{id:"vibes-dynamic-dashboard-dilemma",children:"ViBe\u2019s Dynamic Dashboard Dilemma"}),"\n",(0,r.jsx)(n.p,{children:"ViBe\u2019s dashboard must show:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Each learner\u2019s progress (quizzes, videos, assignments, etc.)"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Each instructor\u2019s engagement (courses taught, feedback given)"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Each admin\u2019s reports (user stats, revenue, system alerts)"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"But the data is always changing:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Some learners do only quizzes, others only videos."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Some instructors are also learners."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Admins want to combine, filter, and transform data for custom reports."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)("img",{src:"https://i.postimg.cc/mr8yGgjc/vibe-fin.png",width:"400px"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"The problem:"}),(0,r.jsx)(n.br,{}),"\n","How do you build a system that can:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Combine different data shapes safely?"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Handle users with multiple roles?"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Transform or filter data for any report, without rewriting code for every new dashboard feature?"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Expected outcome:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Flexible, type-safe code that adapts to real-world data complexity."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Reports and features that are easy to extend, without bugs or duplication."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"2-learning-objectives",children:"2. Learning Objectives"}),"\n",(0,r.jsx)(n.p,{children:"By the end of this lesson, you\u2019ll be able to:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Use union and intersection types to model flexible data."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Use mapped types to transform or generate new data shapes."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Use conditional types to make types adapt to situations."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Use utility types to quickly adjust existing types."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Build robust, future-proof code for ViBe\u2019s dynamic needs."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"3-concept-introduction-with-analogy",children:"3. Concept Introduction with Analogy"}),"\n",(0,r.jsx)(n.h2,{id:"the-swiss-army-knife-analogy",children:"The Swiss Army Knife Analogy"}),"\n",(0,r.jsx)(n.p,{children:"Imagine your code is a Swiss Army knife:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Sometimes you need just a knife (one type)."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Sometimes you need a knife and a screwdriver at once (combine types)."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Sometimes you want to quickly reshape a tool for a special job (transform types)."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Sometimes you want a tool that adapts itself based on the job (conditional types)."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Advanced types"}),"  let you build tools that are just as flexible and adaptable as your real-world needs."]}),"\n",(0,r.jsx)(n.h2,{id:"union-types",children:(0,r.jsx)(n.strong,{children:"Union Types"})}),"\n",(0,r.jsxs)(n.p,{children:["A union  type allows a  value to be  ",(0,r.jsx)(n.strong,{children:"one of several  types"}),".",(0,r.jsx)(n.br,{}),"\n","It\u2019s written  with the  ",(0,r.jsx)(n.code,{children:"|"}),"  (\u201cor\u201d) operator."]}),"\n",(0,r.jsx)(n.h2,{id:"how-they--work",children:(0,r.jsx)(n.strong,{children:"How They  Work"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"When  a value is a  union, TypeScript only  allows you to  use members/methods that  are common to  all types in  the union."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["To  use type-specific properties, you must  ",(0,r.jsx)(n.strong,{children:"narrow"}),"  the type  (using  ",(0,r.jsx)(n.code,{children:"typeof"}),",  ",(0,r.jsx)(n.code,{children:"in"}),", or  discriminant properties)."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'type StringOrNumber = string | number;\nlet value: StringOrNumber;\nvalue = "hello"; // OK\nvalue = 42;      // OK\nvalue = true;    // Error\n'})}),"\n",(0,r.jsx)(n.h2,{id:"intersection-types",children:(0,r.jsx)(n.strong,{children:"Intersection Types"})}),"\n",(0,r.jsxs)(n.p,{children:["An intersection type combines  ",(0,r.jsx)(n.strong,{children:"multiple types into one"}),"  using the  ",(0,r.jsx)(n.code,{children:"&"}),"  (\u201cand\u201d) operator."]}),"\n",(0,r.jsx)(n.h2,{id:"how-they-work",children:(0,r.jsx)(n.strong,{children:"How They Work"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The resulting type has  ",(0,r.jsx)(n.strong,{children:"all properties"}),"  of the intersected types."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"If there\u2019s a property with the same name but different types, TypeScript will error."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'type A = { a: number };\ntype B = { b: string };\ntype AB = A & B; // { a: number; b: string }\n\nconst obj: AB = { a: 1, b: "hi" }; // OK\n\n'})}),"\n",(0,r.jsx)(n.h2,{id:"mapped-types",children:(0,r.jsx)(n.strong,{children:"Mapped Types"})}),"\n",(0,r.jsxs)(n.p,{children:["Mapped types let you  ",(0,r.jsx)(n.strong,{children:"transform each property"}),"  in a type, often used with  ",(0,r.jsx)(n.code,{children:"keyof"}),"  and unions."]}),"\n",(0,r.jsx)(n.h2,{id:"how-they-work-1",children:(0,r.jsx)(n.strong,{children:"How They Work"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"You \u201cmap over\u201d the keys of a type or union and create a new type for each key."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Used for making all properties optional, readonly, or changing their types."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"type User = { id: string; name: string; };\ntype OptionalUser = { [K in keyof User]?: User[K] }; // All properties optional\n"})}),"\n",(0,r.jsx)(n.h2,{id:"conditional-types",children:(0,r.jsx)(n.strong,{children:"Conditional Types"})}),"\n",(0,r.jsx)(n.h2,{id:"what-are-they",children:(0,r.jsx)(n.strong,{children:"What Are They?"})}),"\n",(0,r.jsxs)(n.p,{children:["Conditional types let you  ",(0,r.jsx)(n.strong,{children:"choose a type based on a condition"}),"  at the type level, using the form  ",(0,r.jsx)(n.code,{children:"T extends U ? X : Y"}),"."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["TypeScript checks if the type on the left of  ",(0,r.jsx)(n.code,{children:"extends"}),"  is assignable to the one on the right."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"If true, the first branch is used; otherwise, the second."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"type IsString<T> = T extends string ? true : false;\n\ntype A = IsString<string>; // true\ntype B = IsString<number>; // false\n"})}),"\n",(0,r.jsx)(n.h2,{id:"4-step-by-step-data-modeling",children:"4. Step-by-Step Data Modeling"}),"\n",(0,r.jsx)(n.p,{children:"Let\u2019s model ViBe\u2019s users and reports:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'// Basic user types\ntype Learner = { id: string; quizzesCompleted: number };\ntype Instructor = { id: string; coursesTaught: number };\ntype Admin = { id: string; accessLevel: "basic" | "super" };\n\n// Some users have more than one role!\ntype MultiRoleUser = Learner & Instructor; // Intersection: both!\ntype AnyUser = Learner | Instructor | Admin; // Union: one or the other\n'})}),"\n",(0,r.jsx)(n.h2,{id:"5-live-code-walkthrough-step-by-step-explained",children:"5. Live Code Walkthrough (Step-by-Step, Explained)"}),"\n",(0,r.jsx)(n.h2,{id:"a-union-types-one-or-the-other",children:(0,r.jsx)(n.strong,{children:"A. Union Types: One or the Other"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'function printUserInfo(user: AnyUser) {\n if ("quizzesCompleted" in user) {\n   console.log(`Learner: ${user.quizzesCompleted} quizzes completed`);\n } else if ("coursesTaught" in user) {\n   console.log(`Instructor: ${user.coursesTaught} courses taught`);\n } else {\n   console.log(`Admin: Access - ${user.accessLevel}`);\n }\n}\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Union types"}),"  let you accept different shapes and handle each safely."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"b-intersection-types-both-at-once",children:(0,r.jsx)(n.strong,{children:"B. Intersection Types: Both at Once"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'const alice: MultiRoleUser = {\n id: "alice123",\n quizzesCompleted: 10,\n coursesTaught: 2\n};\n\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Intersection types"}),"  let you combine all properties for users with multiple roles."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"c-mapped-types-transform-data-shapes",children:(0,r.jsx)(n.strong,{children:"C. Mapped Types: Transform Data Shapes"})}),"\n",(0,r.jsx)(n.p,{children:"Suppose you want to track module progress for each learner:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'type ModuleStatus = "not-started" | "in-progress" | "completed";\n\n// For any list of module IDs, generate a progress map:\ntype ProgressMap<Modules extends string> = {\n [K in Modules]: ModuleStatus;\n};\n\ntype MyModules = "quiz1" | "video2" | "assignment3";\ntype MyProgress = ProgressMap<MyModules>;\n\n// Result: { quiz1: ModuleStatus; video2: ModuleStatus; assignment3: ModuleStatus }\n'})}),"\n",(0,r.jsx)(n.h2,{id:"d-conditional-types-adapting-to-data",children:(0,r.jsx)(n.strong,{children:"D. Conditional Types: Adapting to Data"})}),"\n",(0,r.jsx)(n.p,{children:"Suppose you want to allow feedback only if a module is completed:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'type FeedbackAllowed<T extends ModuleStatus> = T extends "completed" ? string : never;\n\ntype FeedbackForQuiz = FeedbackAllowed<"completed">; // string\ntype FeedbackForVideo = FeedbackAllowed<"in-progress">; // never\n'})}),"\n",(0,r.jsx)(n.h2,{id:"e-utility-types-quick-type-transformations",children:(0,r.jsx)(n.strong,{children:"E. Utility Types: Quick Type Transformations"})}),"\n",(0,r.jsx)(n.p,{children:"Suppose you want a type where all fields are optional for a draft report:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"type LearnerReport = {\n name: string;\n score: number;\n feedback: string;\n};\ntype DraftReport = Partial<LearnerReport>; // All fields now optional\n"})}),"\n",(0,r.jsx)(n.p,{children:"Or make a type where all fields are read-only:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"type ReadonlyReport = Readonly<LearnerReport>;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"6-challenge",children:"6. Challenge"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Your Turn!"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Create a  ",(0,r.jsx)(n.code,{children:"type"}),"  called  ",(0,r.jsx)(n.code,{children:"InstructorOrAdmin"}),"  that can be either an  ",(0,r.jsx)(n.code,{children:"Instructor"}),"  or an  ",(0,r.jsx)(n.code,{children:"Admin"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Given a type  ",(0,r.jsx)(n.code,{children:"Assignment = { title: string; dueDate: Date; points: number; }"}),", create a type  ",(0,r.jsx)(n.code,{children:"ReadonlyAssignment"}),"  where none of the fields can be changed."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Given a type  ",(0,r.jsx)(n.code,{children:"LearnerStats = { quizzes: number; videos: number; assignments: number; }"}),", create a type  ",(0,r.jsx)(n.code,{children:"StatsAsStrings"}),"  that has the same keys, but all values are strings."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"7-quick-recap--key-takeaways",children:"7. Quick Recap & Key Takeaways"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Unions:"}),"  When a value can be one of several types (e.g., API responses, user roles)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Intersections:"}),"  When you need a type that combines multiple behaviors or data sources."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Mapped Types:"}),"  When you want to transform or generate types based on existing ones (e.g., make all fields optional)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Conditional Types:"}),"  For type-level logic and type transformations (e.g., extracting types, enforcing rules)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Utility Types:"}),"  For common type manipulations and code reuse."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"8-optional-programmers-workflow-checklist",children:"8. (Optional) Programmer\u2019s Workflow Checklist"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Use  ",(0,r.jsx)(n.strong,{children:"union"}),"  when a value can be one of many types."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Use  ",(0,r.jsx)(n.strong,{children:"intersection"}),"  when you need all properties from multiple types."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Use  ",(0,r.jsx)(n.strong,{children:"mapped"}),"  and  ",(0,r.jsx)(n.strong,{children:"utility types"}),"  to quickly reshape data."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Use  ",(0,r.jsx)(n.strong,{children:"conditional types"}),"  for smart, rules-based types."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Test your types with real data and scenarios."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"9-coming-up-next",children:"9. Coming up Next"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Congratulations!"})}),(0,r.jsx)(n.br,{}),"\n","You\u2019ve mastered the Swiss Army knife of TypeScript types.",(0,r.jsx)(n.br,{}),"\n","Next, imagine combining all these tools to build a reporting engine that adapts to any new content or user type ViBe invents in the future!"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},4318:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var t=s(4700);const r={},i=t.createContext(r);function l(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);