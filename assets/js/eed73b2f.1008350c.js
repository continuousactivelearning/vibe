"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2685],{4146:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var i=s(4700);const r={},t=i.createContext(r);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:n},e.children)}},8336:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"Typescript/User Defined Types/7.1 User defined Types in Typescript","title":"User-Defined Types in TypeScript","description":"1. Problem Statement","source":"@site/newdocs/Typescript/7. User Defined Types/7.1 User defined Types in Typescript.md","sourceDirName":"Typescript/7. User Defined Types","slug":"/Typescript/User Defined Types/7.1 User defined Types in Typescript","permalink":"/vibe/newdocs/Typescript/User Defined Types/7.1 User defined Types in Typescript","draft":false,"unlisted":false,"editUrl":"https://github.com/your-org/\u2026/newdocs/Typescript/7. User Defined Types/7.1 User defined Types in Typescript.md","tags":[],"version":"current","frontMatter":{},"sidebar":"newSidebar","previous":{"title":"Built-in Types in TypeScript","permalink":"/vibe/newdocs/Typescript/Built-in Types/6.1 Built in Types in Typescript"},"next":{"title":"TypeScript \u2013 null vs. undefined","permalink":"/vibe/newdocs/Typescript/Null vs Undefined/8.1 Null vs Undefined"}}');var r=s(7968),t=s(4146);const l={},a="User-Defined Types in TypeScript",c={},d=[{value:"1. Problem Statement",id:"1-problem-statement",level:2},{value:"2. Learning Objectives",id:"2-learning-objectives",level:2},{value:"3. Concept Introduction with Analogy",id:"3-concept-introduction-with-analogy",level:2},{value:"Analogy: The Hospital Filing Cabinet",id:"analogy-the-hospital-filing-cabinet",level:3},{value:"4. Technical Deep Dive",id:"4-technical-deep-dive",level:2},{value:"Arrays",id:"arrays",level:2},{value:"Tuples",id:"tuples",level:2},{value:"Enums",id:"enums",level:2},{value:"Interfaces",id:"interfaces",level:2},{value:"Classes",id:"classes",level:2},{value:"5. Step-by-Step Data Modeling &amp; Code Walkthrough",id:"5-step-by-step-data-modeling--code-walkthrough",level:2},{value:"6. Interactive Challenge",id:"6-interactive-challenge",level:2},{value:"7. Common Pitfalls &amp; Best Practices",id:"7-common-pitfalls--best-practices",level:2},{value:"8. Quick Recap &amp; Key Takeaways",id:"8-quick-recap--key-takeaways",level:2},{value:"9. Optional: Programmer\u2019s Workflow Checklist",id:"9-optional-programmers-workflow-checklist",level:2}];function o(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"user-defined-types-in-typescript",children:"User-Defined Types in TypeScript"})}),"\n",(0,r.jsx)(n.h2,{id:"1-problem-statement",children:"1. Problem Statement"}),"\n",(0,r.jsx)(n.p,{children:"You are building a patient management system for a hospital."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Each patient record must track personal details, vital signs, and medical history."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Different types of staff (doctors, nurses, admins) interact with the system, each with different permissions and data needs."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The system must handle collections of patients, structured medical records, and specialized data like test results or medication schedules."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"You need to ensure that all data is organized, type-safe, and easy to extend as requirements change."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"The challenge:"}),(0,r.jsx)(n.br,{}),"\n","How do you use TypeScript\u2019s user-defined types (arrays, tuples, enums, classes, interfaces) to model complex, real-world data in a way that is safe, maintainable, and scalable?"]}),"\n",(0,r.jsx)(n.h2,{id:"2-learning-objectives",children:"2. Learning Objectives"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Create and use arrays, tuples, and enums in TypeScript."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Define custom types using interfaces and classes."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Model real-world data structures with type safety."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Use user-defined types to organize and scale your codebase."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"3-concept-introduction-with-analogy",children:"3. Concept Introduction with Analogy"}),"\n",(0,r.jsx)(n.h3,{id:"analogy-the-hospital-filing-cabinet",children:"Analogy: The Hospital Filing Cabinet"}),"\n",(0,r.jsx)(n.p,{children:"A hospital\u2019s filing cabinet contains:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Folders"}),"  for each patient (arrays)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Tabs"}),"  for specific info (tuples)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Color-coded labels"}),"  for patient status (enums)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Standard forms"}),"  for personal info and medical history (interfaces)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Specialized folders"}),"  for doctors, nurses, and admins (classes)."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This system keeps patient data organized, consistent, and easy to find-just like user-defined types in TypeScript."}),"\n",(0,r.jsx)(n.h2,{id:"4-technical-deep-dive",children:"4. Technical Deep Dive"}),"\n",(0,r.jsx)(n.h2,{id:"arrays",children:"Arrays"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Store collections of values of the same type."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Can use  ",(0,r.jsx)(n.code,{children:"type[]"}),"  or  ",(0,r.jsx)(n.code,{children:"Array<type>"}),"  syntax."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'let patientIds: number[] = [101, 102, 103];\nlet patientNames: Array<string> = ["Alice", "Bob", "Carol"];\n'})}),"\n",(0,r.jsx)(n.h2,{id:"tuples",children:"Tuples"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Arrays with a fixed number of elements, each with a specific type."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'let vitalSigns: [number, number] = [120, 80]; // [systolic, diastolic]\nlet patientInfo: [string, number] = ["Alice", 30];\n'})}),"\n",(0,r.jsx)(n.h2,{id:"enums",children:"Enums"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Named set of related values (numeric or string)."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"enum PatientStatus { Admitted, Discharged, UnderObservation }\nlet status: PatientStatus = PatientStatus.Admitted;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"interfaces",children:"Interfaces"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Define the shape of an object."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface Patient {\n  id: number;\n  name: string;\n  age: number;\n  status: PatientStatus;\n  vitals: [number, number];\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"classes",children:"Classes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Blueprint for creating objects with data and behavior."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"class Doctor {\n  constructor(public name: string, public specialty: string) {}\n  prescribe(medication: string): void {\n    console.log(`${this.name} prescribes ${medication}`);\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"5-step-by-step-data-modeling--code-walkthrough",children:"5. Step-by-Step Data Modeling & Code Walkthrough"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Define enums and interfaces:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"enum PatientStatus { Admitted, Discharged, UnderObservation }\n\ninterface Patient {\n  id: number;\n  name: string;\n  age: number;\n  status: PatientStatus;\n  vitals: [number, number];\n}\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Create an array of patients:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'let patients: Patient[] = [\n  { id: 1, name: "Alice", age: 30, status: PatientStatus.Admitted, vitals: [120, 80] },\n  { id: 2, name: "Bob", age: 45, status: PatientStatus.UnderObservation, vitals: [130, 85] }\n];\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Define a class for staff:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"class Nurse {\n  constructor(public name: string) {}\n  takeVitals(patient: Patient, vitals: [number, number]): void {\n    patient.vitals = vitals;\n    console.log(`${this.name} updated vitals for ${patient.name}`);\n  }\n}\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Use tuples and enums for structured data:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'let newVitals: [number, number] = [118, 76];\nlet nurse = new Nurse("Carol");\nnurse.takeVitals(patients[0], newVitals);\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"6-interactive-challenge",children:"6. Interactive Challenge"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Your Turn!"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Define an enum  ",(0,r.jsx)(n.code,{children:"Role"}),"  for staff roles (Doctor, Nurse, Admin)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Create an interface  ",(0,r.jsx)(n.code,{children:"Staff"}),"  with fields for  ",(0,r.jsx)(n.code,{children:"id"}),",  ",(0,r.jsx)(n.code,{children:"name"}),", and  ",(0,r.jsx)(n.code,{children:"role"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Create an array of staff members using the interface and enum."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Write a function that prints a summary of all staff, showing their name and role."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"7-common-pitfalls--best-practices",children:"7. Common Pitfalls & Best Practices"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Use interfaces to define object shapes for clarity and safety."})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Prefer enums for related constants instead of plain numbers or strings."})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Use tuples only when element order and type are fixed and meaningful."})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Organize related data in arrays for easy processing."})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Use classes for objects with both data and behavior."})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"8-quick-recap--key-takeaways",children:"8. Quick Recap & Key Takeaways"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"User-defined types (arrays, tuples, enums, interfaces, classes) help you model real-world data safely and clearly."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"They make your code more maintainable, scalable, and expressive."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Organize your data structures with type safety for fewer bugs and easier collaboration."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"9-optional-programmers-workflow-checklist",children:"9. Optional: Programmer\u2019s Workflow Checklist"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Use enums for related sets of constants."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Define interfaces for all complex objects."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Use arrays for collections of similar items."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Use tuples for fixed-structure, ordered data."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Use classes for objects that combine data and methods."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Always annotate types for clarity and safety."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);