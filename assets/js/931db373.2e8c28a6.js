"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2699],{4146:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>c});var r=s(4700);const i={},l=r.createContext(i);function a(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(l.Provider,{value:n},e.children)}},8498:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"Typescript/Variables in TypeScript/3.1 Variables in Typescript","title":"Variables in TypeScript","description":"1. Problem Statement","source":"@site/newdocs/Typescript/3. Variables in TypeScript/3.1 Variables in Typescript.md","sourceDirName":"Typescript/3. Variables in TypeScript","slug":"/Typescript/Variables in TypeScript/3.1 Variables in Typescript","permalink":"/vibe/newdocs/Typescript/Variables in TypeScript/3.1 Variables in Typescript","draft":false,"unlisted":false,"editUrl":"https://github.com/your-org/\u2026/newdocs/Typescript/3. Variables in TypeScript/3.1 Variables in Typescript.md","tags":[],"version":"current","frontMatter":{},"sidebar":"newSidebar","previous":{"title":"Basic Syntax in TypeScript","permalink":"/vibe/newdocs/Typescript/Basic Syntax/2.1 Basic Syntax in Typescript"},"next":{"title":"TypeScript \u2013 let & const","permalink":"/vibe/newdocs/Typescript/let & const/4.1 let & const"}}');var i=s(7968),l=s(4146);const a={},c="Variables in TypeScript",t={},d=[{value:"1. Problem Statement",id:"1-problem-statement",level:2},{value:"2. Learning Objectives",id:"2-learning-objectives",level:2},{value:"3. Concept Introduction with Analogy",id:"3-concept-introduction-with-analogy",level:2},{value:"Analogy: Labeled Drawers in an Organized Office",id:"analogy-labeled-drawers-in-an-organized-office",level:2},{value:"4. Technical Deep Dive",id:"4-technical-deep-dive",level:2},{value:"Naming Rules for Variables",id:"naming-rules-for-variables",level:2},{value:"Declaring Variables in TypeScript",id:"declaring-variables-in-typescript",level:2},{value:"Example: Variables in TypeScript",id:"example-variables-in-typescript",level:2},{value:"Strong Typing",id:"strong-typing",level:2},{value:"Type Assertion",id:"type-assertion",level:2},{value:"Inferred Typing",id:"inferred-typing",level:2},{value:"Variable Scope",id:"variable-scope",level:2},{value:"5. Step-by-Step Data Modeling &amp; Code Walkthrough",id:"5-step-by-step-data-modeling--code-walkthrough",level:2},{value:"6. Interactive Challenge",id:"6-interactive-challenge",level:2},{value:"7. Common Pitfalls &amp; Best Practices",id:"7-common-pitfalls--best-practices",level:2},{value:"8. Quick Recap &amp; Key Takeaways",id:"8-quick-recap--key-takeaways",level:2},{value:"9. Optional: Programmer\u2019s Workflow Checklist",id:"9-optional-programmers-workflow-checklist",level:2}];function o(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"variables-in-typescript",children:"Variables in TypeScript"})}),"\n",(0,i.jsx)(n.h2,{id:"1-problem-statement",children:"1. Problem Statement"}),"\n",(0,i.jsx)(n.p,{children:"Imagine you\u2019re developing a software system for a large company."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"You need to store data like names, scores, and settings in a way that is clear, safe, and organized."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Every piece of information in your program must have a name and a place in memory."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"You want to avoid mistakes caused by misnaming, reusing, or misusing data."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"The challenge:"}),(0,i.jsx)(n.br,{}),"\n","How do you declare, use, and manage variables in TypeScript so your code is robust, readable, and error-free?"]}),"\n",(0,i.jsx)(n.h2,{id:"2-learning-objectives",children:"2. Learning Objectives"}),"\n",(0,i.jsx)(n.p,{children:"By the end of this lesson, you will be able to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Understand how to declare and use variables in TypeScript."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Apply naming rules and best practices for variable names."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Use type annotations and type inference."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Understand variable scope (global, class, local)."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Use type assertions and recognize strong typing."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"3-concept-introduction-with-analogy",children:"3. Concept Introduction with Analogy"}),"\n",(0,i.jsx)(n.h2,{id:"analogy-labeled-drawers-in-an-organized-office",children:"Analogy: Labeled Drawers in an Organized Office"}),"\n",(0,i.jsx)(n.p,{children:"Think of variables as labeled drawers in an office:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Each drawer has a unique label (name) and holds one kind of item (value)."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"You must follow rules for labeling drawers so everyone can find what they need."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Some drawers are accessible everywhere (global), some only in certain rooms (local), and some belong to specific team members (class scope)."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Organizing your office this way prevents confusion and lost items-just like using variables correctly in TypeScript prevents bugs and errors."}),"\n",(0,i.jsx)(n.h2,{id:"4-technical-deep-dive",children:"4. Technical Deep Dive"}),"\n",(0,i.jsx)(n.h2,{id:"naming-rules-for-variables",children:"Naming Rules for Variables"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Names can include letters, numbers,  ",(0,i.jsx)(n.code,{children:"_"}),", and  ",(0,i.jsx)(n.code,{children:"$"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Cannot start with a number."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Cannot include spaces or most special characters."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Cannot be a reserved keyword."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Are case-sensitive."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Valid"}),(0,i.jsx)(n.th,{children:"Invalid"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"firstName"}),(0,i.jsx)(n.td,{children:"first name"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"first_name"}),(0,i.jsx)(n.td,{children:"1number"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"num1"}),(0,i.jsx)(n.td,{children:"first-name"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"$result"}),(0,i.jsx)(n.td,{children:"Var"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"declaring-variables-in-typescript",children:"Declaring Variables in TypeScript"}),"\n",(0,i.jsx)(n.p,{children:"You can declare variables in several ways:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Declare type and value:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'var name:  string  =  "mary";\n'})}),"\n",(0,i.jsx)(n.p,{children:"The variable stores a value of type string."}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Declare type, no value:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-css",children:"var name:  string;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The variable is a string, set to  ",(0,i.jsx)(n.code,{children:"undefined"}),"  by default."]}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Declare value, no type:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'var name =  "mary";\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The type is inferred from the value (",(0,i.jsx)(n.code,{children:"string"}),")."]}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Declare neither value nor type:"})}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"var name;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The type is  ",(0,i.jsx)(n.code,{children:"any"}),"  and the value is  ",(0,i.jsx)(n.code,{children:"undefined"}),"  by default."]}),"\n",(0,i.jsx)(n.h2,{id:"example-variables-in-typescript",children:"Example: Variables in TypeScript"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'var name: string = "John";\nvar score1: number = 50;\nvar score2: number = 42.50;\nvar sum = score1 + score2;\nconsole.log("name: " + name);\nconsole.log("first score: " + score1);\nconsole.log("second score: " + score2);\nconsole.log("sum of the scores: " + sum);\n\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"name: John\nfirst score: 50\nsecond score: 42.5\nsum of the scores: 92.5\n"})}),"\n",(0,i.jsx)(n.h2,{id:"strong-typing",children:"Strong Typing"}),"\n",(0,i.jsxs)(n.p,{children:["TypeScript enforces strong typing.",(0,i.jsx)(n.br,{}),"\n","If you try to assign a value of the wrong type, you get a compilation error:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'var num:  number  =  "hello";  // Compilation error!\n'})}),"\n",(0,i.jsx)(n.h2,{id:"type-assertion",children:"Type Assertion"}),"\n",(0,i.jsx)(n.p,{children:"TypeScript allows you to tell the compiler to treat a variable as a different type (type assertion)."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"var str = '1';\nvar str2: number = <number><any>str;\nconsole.log(typeof(str2));\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["This tells TypeScript to treat  ",(0,i.jsx)(n.code,{children:"str"}),"  as a  ",(0,i.jsx)(n.code,{children:"number"}),"  (even though it's actually a string)."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Type assertions are compile-time only and do not change the runtime type."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"inferred-typing",children:"Inferred Typing"}),"\n",(0,i.jsx)(n.p,{children:"If you declare a variable without a type, TypeScript infers the type from the first value you assign:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'var num = 2; // inferred as number\nconsole.log("value of num " + num);\nnum = "12"; // Error: Cannot assign string to number\n'})}),"\n",(0,i.jsx)(n.h2,{id:"variable-scope",children:"Variable Scope"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Global Scope:"}),"  Declared outside any class or function; accessible everywhere."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Class Scope (Field):"}),"  Declared in a class, outside methods; accessible via the object."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Local Scope:"}),"  Declared inside a method or block; accessible only there."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'var global_num = 12; // global variable\nclass Numbers {\n   num_val = 13; // class variable\n   static sval = 10; // static field\n\n   storeNum(): void {\n      var local_num = 14; // local variable\n   }\n}\nconsole.log("Global num: " + global_num);\nconsole.log(Numbers.sval); // static variable\nvar obj = new Numbers();\nconsole.log("Class num: " + obj.num_val);\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"Global num: 12\n10\nClass num: 13\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Accessing  ",(0,i.jsx)(n.code,{children:"local_num"}),"  outside its method will cause an error."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"5-step-by-step-data-modeling--code-walkthrough",children:"5. Step-by-Step Data Modeling & Code Walkthrough"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Declare variables with type and value:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'var productName: string = "Bananas";\nvar quantity: number = 25;\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Declare a variable with type only:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'var city:  string; city =  "Mumbai";` \n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Declare a variable with value only (type inferred):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"var inStock =  true;  // inferred as boolean` \n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Declare a variable with no type or value:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'var discount;\ndiscount = 10; // type is any\ndiscount = "none"; // still allowed\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Type assertion:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'var code = "123";\nvar codeNumber: number = <number><any>code;\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Variable scope:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'var globalVar = "I am global";\nclass Store {\n  storeName = "Main Branch";\n  static storeType = "Grocery";\n  show() {\n    var localVar = "I am local";\n    console.log(localVar);\n  }\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"6-interactive-challenge",children:"6. Interactive Challenge"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Your Turn!"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Declare a variable called  ",(0,i.jsx)(n.code,{children:"city"}),"  and assign it your favorite city as a string."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Declare a variable called  ",(0,i.jsx)(n.code,{children:"temperature"}),"  with type  ",(0,i.jsx)(n.code,{children:"number"}),"  and assign it a value."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Create a variable called  ",(0,i.jsx)(n.code,{children:"isRaining"}),"  and let TypeScript infer its type from the value you assign."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Write a function called  ",(0,i.jsx)(n.code,{children:"weatherReport"}),"  that takes  ",(0,i.jsx)(n.code,{children:"city"}),",  ",(0,i.jsx)(n.code,{children:"temperature"}),", and  ",(0,i.jsx)(n.code,{children:"isRaining"}),"  as parameters and prints a message like:",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.code,{children:'"In <city>, it is <temperature>\xb0C. Is it raining? <true/false>"'})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Try calling the function with your variables."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"7-common-pitfalls--best-practices",children:"7. Common Pitfalls & Best Practices"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Never start variable names with a number or use spaces."})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Use type annotations for clarity and safety."})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Don\u2019t use reserved keywords as variable names."})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Keep variable scope as small as possible to avoid bugs."})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Use type assertions only when you are sure of the type."})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"8-quick-recap--key-takeaways",children:"8. Quick Recap & Key Takeaways"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Variables are named storage locations in memory."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"TypeScript enforces naming rules and strong typing."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"You can declare variables with type, value, both, or neither."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Variable scope controls where a variable can be accessed."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Type assertion lets you tell the compiler how to treat a variable\u2019s type."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"9-optional-programmers-workflow-checklist",children:"9. Optional: Programmer\u2019s Workflow Checklist"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Use valid, descriptive variable names."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Declare types for variables when possible."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Assign values that match the declared type."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Understand and control variable scope."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Use type assertions responsibly."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Avoid using  ",(0,i.jsx)(n.code,{children:"any"}),"  unless absolutely necessary."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Test variable assignments and observe compiler errors."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}}}]);