"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7918],{5298:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"Express/Repository Pattern","title":"Repository Pattern","description":"1. Problem Statement","source":"@site/newdocs/Express/9. Repository Pattern.md","sourceDirName":"Express","slug":"/Express/Repository Pattern","permalink":"/vibe/newdocs/Express/Repository Pattern","draft":false,"unlisted":false,"editUrl":"https://github.com/your-org/\u2026/newdocs/Express/9. Repository Pattern.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{},"sidebar":"newSidebar","previous":{"title":"MVC Pattern","permalink":"/vibe/newdocs/Express/MVC Pattern"},"next":{"title":"Dependency Injection","permalink":"/vibe/newdocs/Express/Dependency Injection"}}');var i=n(7968),t=n(9880);const o={},l=void 0,c={},d=[{value:"1. Problem Statement",id:"1-problem-statement",level:2},{value:"<strong>Case Study: Riverdale University\u2019s Registration Maze</strong>",id:"case-study-riverdale-universitys-registration-maze",level:2},{value:"2. Learning Objectives",id:"2-learning-objectives",level:2},{value:"3. Concept Introduction with Analogy",id:"3-concept-introduction-with-analogy",level:2},{value:"<strong>Analogy: The University Records Office</strong>",id:"analogy-the-university-records-office",level:2},{value:"4. Technical Deep Dive",id:"4-technical-deep-dive",level:2},{value:"<strong>A. What is the Repository Pattern?</strong>",id:"a-what-is-the-repository-pattern",level:2},{value:"<strong>B. Repository Pattern in Practice</strong>",id:"b-repository-pattern-in-practice",level:2},{value:"<strong>C. Why Not Access Data Directly?</strong>",id:"c-why-not-access-data-directly",level:2},{value:"<strong>D. Best Practices</strong>",id:"d-best-practices",level:2},{value:"5. Step-by-Step Data Modeling &amp; Code Walkthrough",id:"5-step-by-step-data-modeling--code-walkthrough",level:2},{value:"<strong>A. Define the Domain Model</strong>",id:"a-define-the-domain-model",level:2},{value:"<strong>B. Create the Repository Interface</strong>",id:"b-create-the-repository-interface",level:2},{value:"<strong>C. Implement an In-Memory Repository</strong>",id:"c-implement-an-in-memory-repository",level:2},{value:"<strong>D. Implement a Database Repository (Example Outline)</strong>",id:"d-implement-a-database-repository-example-outline",level:2},{value:"<strong>E. Use the Repository in a Service</strong>",id:"e-use-the-repository-in-a-service",level:2},{value:"<strong>F. Hook Up in Your App</strong>",id:"f-hook-up-in-your-app",level:2},{value:"6. Challenge",id:"6-challenge",level:2},{value:"7. Common Pitfalls &amp; Best Practices",id:"7-common-pitfalls--best-practices",level:2},{value:"8. Optional: Programmer\u2019s Workflow Checklist",id:"8-optional-programmers-workflow-checklist",level:2},{value:"9. Coming up Next",id:"9-coming-up-next",level:2}];function a(e){const s={br:"br",code:"code",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.h2,{id:"1-problem-statement",children:"1. Problem Statement"}),"\n",(0,i.jsx)(s.h2,{id:"case-study-riverdale-universitys-registration-maze",children:(0,i.jsx)(s.strong,{children:"Case Study: Riverdale University\u2019s Registration Maze"})}),"\n",(0,i.jsx)(s.p,{children:"At Riverdale University, students race to register for classes each semester:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Some departments use spreadsheets, others use databases, and a few still keep paper records."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"When a student tries to enroll, their request is sometimes lost, or two systems accidentally double-book a seat."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"If the university wants to upgrade from spreadsheets to a new database, they worry about rewriting all their registration logic."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Testing new features is risky, because the code is tightly coupled to the current storage method."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)("img",{src:"https://i.postimg.cc/4yrPnWRr/Riverdale.png",width:"400px"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"The challenge:"}),(0,i.jsx)(s.br,{}),"\n","How can you build a course registration system where the rules and features work no matter how or where the data is stored-so you can upgrade, test, and scale without rewriting everything?"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"2-learning-objectives",children:"2. Learning Objectives"}),"\n",(0,i.jsx)(s.p,{children:"By the end of this tutorial, you will:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Understand the Repository Pattern and its purpose."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Create repository interfaces to abstract data access."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Implement repositories for different storage types (memory, file, database)."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Swap storage backends without changing business logic."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Write tests using mock repositories."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Apply best practices and avoid common pitfalls."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"3-concept-introduction-with-analogy",children:"3. Concept Introduction with Analogy"}),"\n",(0,i.jsx)(s.h2,{id:"analogy-the-university-records-office",children:(0,i.jsx)(s.strong,{children:"Analogy: The University Records Office"})}),"\n",(0,i.jsx)(s.p,{children:"Imagine the records office:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Professors and students submit requests (\u201cAdd me to Physics 101!\u201d)."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"The office staff don\u2019t care if records are in filing cabinets, spreadsheets, or a fancy database-they just use a standard form."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"If the university upgrades to a new system, the process for students and staff stays the same."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"The Repository Pattern is like this standardized records office:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"All requests go through a single interface, no matter where the data lives."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"The rest of the university never worries about how records are stored or retrieved."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"4-technical-deep-dive",children:"4. Technical Deep Dive"}),"\n",(0,i.jsx)(s.h2,{id:"a-what-is-the-repository-pattern",children:(0,i.jsx)(s.strong,{children:"A. What is the Repository Pattern?"})}),"\n",(0,i.jsx)(s.p,{children:"The Repository Pattern is a design pattern that centralizes data access logic in a single place, separating it from business logic."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Purpose:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Abstracts the details of data storage and retrieval from the rest of the application."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Provides a collection-like interface for accessing domain objects."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Makes it easy to swap storage backends (e.g., memory, file, database) without changing business logic."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Benefits:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Centralized, maintainable data access code."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Business logic is decoupled from storage details."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Easier testing (mock repositories)."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Reduces code duplication and errors."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"b-repository-pattern-in-practice",children:(0,i.jsx)(s.strong,{children:"B. Repository Pattern in Practice"})}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Key Components:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Repository Interface:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Defines the operations for a resource (CRUD, custom queries)."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:["Example:  ",(0,i.jsx)(s.code,{children:"ICourseRepository"}),"  with methods like  ",(0,i.jsx)(s.code,{children:"findAll"}),",  ",(0,i.jsx)(s.code,{children:"findById"}),",  ",(0,i.jsx)(s.code,{children:"save"}),",  ",(0,i.jsx)(s.code,{children:"enrollStudent"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Repository Implementation:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Handles the actual data access logic (memory, file, database)."}),"\n",(0,i.jsx)(s.li,{children:"Can be swapped out without changing the rest of the app."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Domain Model:"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["The data structure (e.g.,  ",(0,i.jsx)(s.code,{children:"Course"}),") the repository manages."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Business Logic Layer (Service):"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Uses the repository interface, not the implementation, to enforce rules and policies."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"c-why-not-access-data-directly",children:(0,i.jsx)(s.strong,{children:"C. Why Not Access Data Directly?"})}),"\n",(0,i.jsx)(s.p,{children:"If you mix data access and business logic:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Every change in storage (e.g., new database) forces you to rewrite all logic."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Testing is hard-you need a real database for every test."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Code is harder to read, debug, and maintain."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"d-best-practices",children:(0,i.jsx)(s.strong,{children:"D. Best Practices"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Define repository interfaces in the domain layer"}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Create one repository per aggregate root  (main entity, e.g., Course, Student)."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Never expose storage-specific types or queries (e.g., SQL, ORM objects) to business logic."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Use dependency injection to provide repository implementations."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Test business logic with mock or in-memory repositories."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"5-step-by-step-data-modeling--code-walkthrough",children:"5. Step-by-Step Data Modeling & Code Walkthrough"}),"\n",(0,i.jsx)(s.p,{children:"Let\u2019s build a robust course registration system using the Repository Pattern."}),"\n",(0,i.jsx)(s.h2,{id:"a-define-the-domain-model",children:(0,i.jsx)(s.strong,{children:"A. Define the Domain Model"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"// models/Course.ts\nexport interface Course {\n  id: string;\n  name: string;\n  capacity: number;\n  students: string[];\n}\n"})}),"\n",(0,i.jsx)(s.h2,{id:"b-create-the-repository-interface",children:(0,i.jsx)(s.strong,{children:"B. Create the Repository Interface"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"// repositories/interfaces/ICourseRepository.ts\nexport interface ICourseRepository {\n  findAll(): Promise<Course[]>;\n  findById(id: string): Promise<Course | null>;\n  save(course: Course): Promise<void>;\n  enrollStudent(courseId: string, studentId: string): Promise<void>;\n  findByStudentId(studentId: string): Promise<Course[]>;\n}\n"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Why?"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"This interface is the \u201cstandard form\u201d for the records office."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Business logic only talks to this interface, never to storage details."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"c-implement-an-in-memory-repository",children:(0,i.jsx)(s.strong,{children:"C. Implement an In-Memory Repository"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"// repositories/InMemoryCourseRepository.ts\nimport { ICourseRepository } from './interfaces/ICourseRepository';\nimport { Course } from '../models/Course';\n\nexport class InMemoryCourseRepository implements ICourseRepository {\n  private courses: Course[] = [];\n\n  async findAll(): Promise<Course[]> {\n    return this.courses;\n  }\n\n  async findById(id: string): Promise<Course | null> {\n    return this.courses.find(course => course.id === id) || null;\n  }\n\n  async save(course: Course): Promise<void> {\n    const idx = this.courses.findIndex(c => c.id === course.id);\n    if (idx >= 0) {\n      this.courses[idx] = course;\n    } else {\n      this.courses.push(course);\n    }\n  }\n\n  async enrollStudent(courseId: string, studentId: string): Promise<void> {\n    const course = await this.findById(courseId);\n    if (course && !course.students.includes(studentId)) {\n      course.students.push(studentId);\n      await this.save(course);\n    }\n  }\n\n  async findByStudentId(studentId: string): Promise<Course[]> {\n    return this.courses.filter(course => course.students.includes(studentId));\n  }\n}\n"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Why?"})}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"All data access is here."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"If you switch to a database, only this file changes."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"d-implement-a-database-repository-example-outline",children:(0,i.jsx)(s.strong,{children:"D. Implement a Database Repository (Example Outline)"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"// repositories/DatabaseCourseRepository.ts\nimport { ICourseRepository } from './interfaces/ICourseRepository';\nimport { Course } from '../models/Course';\n\nexport class DatabaseCourseRepository implements ICourseRepository {\n  // Assume db is a connected database client\n  constructor(private db: any) {}\n\n  async findAll(): Promise<Course[]> {\n    // Use real database queries here\n    return this.db.query('SELECT * FROM courses');\n  }\n\n  async findById(id: string): Promise<Course | null> {\n    // ...\n    return null; // Example\n  }\n\n  // ...implement other methods\n}\n"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Why?"})}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"You can now swap between in-memory and database storage without changing business logic."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"e-use-the-repository-in-a-service",children:(0,i.jsx)(s.strong,{children:"E. Use the Repository in a Service"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"// services/CourseService.ts\nimport { ICourseRepository } from '../repositories/interfaces/ICourseRepository';\n\nexport class CourseService {\n  constructor(private courseRepo: ICourseRepository) {}\n\n  async enroll(courseId: string, studentId: string) {\n    const course = await this.courseRepo.findById(courseId);\n    if (!course) throw new Error('Course not found');\n    if (course.students.length >= course.capacity) throw new Error('Course full');\n    await this.courseRepo.enrollStudent(courseId, studentId);\n    return { message: 'Enrolled successfully' };\n  }\n\n  async getStudentCourses(studentId: string) {\n    return this.courseRepo.findByStudentId(studentId);\n  }\n}\n"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Why?"})}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"The service only knows about the repository interface, not how data is stored."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"f-hook-up-in-your-app",children:(0,i.jsx)(s.strong,{children:"F. Hook Up in Your App"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"// app.ts\nimport express from 'express';\nimport { InMemoryCourseRepository } from './repositories/InMemoryCourseRepository';\nimport { CourseService } from './services/CourseService';\n\nconst app = express();\napp.use(express.json());\n\nconst courseRepo = new InMemoryCourseRepository();\nconst courseService = new CourseService(courseRepo);\n\napp.post('/courses/:id/enroll', async (req, res) => {\n  try {\n    const result = await courseService.enroll(req.params.id, req.body.studentId);\n    res.json(result);\n  } catch (e) {\n    res.status(400).json({ error: e.message });\n  }\n});\n\napp.get('/students/:id/courses', async (req, res) => {\n  const courses = await courseService.getStudentCourses(req.params.id);\n  res.json(courses);\n});\n\napp.listen(3000, () => console.log('Server running on port 3000'));\n"})}),"\n",(0,i.jsx)(s.h2,{id:"6-challenge",children:"6. Challenge"}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.strong,{children:"Your Turn!"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:["Implement a  ",(0,i.jsx)(s.code,{children:"delete(courseId: string)"}),"  method in the repository."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Add a service and route to allow admins to delete a course."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"7-common-pitfalls--best-practices",children:"7. Common Pitfalls & Best Practices"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:(0,i.jsx)(s.strong,{children:"Pitfall"})}),(0,i.jsx)(s.th,{children:(0,i.jsx)(s.strong,{children:"Best Practice"})})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Mixing data access in business logic"}),(0,i.jsx)(s.td,{children:"Always use repositories for storage access"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Hardcoding storage details everywhere"}),(0,i.jsx)(s.td,{children:"Depend on interfaces, not implementations"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Not testing with mocks"}),(0,i.jsx)(s.td,{children:"Use fake repositories for unit tests"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Exposing storage-specific types to logic"}),(0,i.jsx)(s.td,{children:"Only return domain models from repositories"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Not updating the repository interface"}),(0,i.jsx)(s.td,{children:"Keep interfaces up to date with business needs"})]})]})]}),"\n",(0,i.jsx)(s.h2,{id:"8-optional-programmers-workflow-checklist",children:"8. Optional: Programmer\u2019s Workflow Checklist"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Define repository interfaces for all major resources."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Implement repositories for each storage type (memory, file, database)."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Never access storage directly from services or controllers-use repositories."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Swap repository implementations easily for testing or upgrades."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Write unit tests with mock repositories."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Don\u2019t expose storage-specific types or queries to business logic."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsx)(s.p,{children:"Keep repository interfaces in the domain layer."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h2,{id:"9-coming-up-next",children:"9. Coming up Next"}),"\n",(0,i.jsx)(s.p,{children:"Learn how to use Dependency Injection to provide repositories to your services and controllers automatically-making your app even more modular, testable, and ready for growth!"}),"\n",(0,i.jsx)(s.hr,{})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},9880:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>l});var r=n(4700);const i={},t=r.createContext(i);function o(e){const s=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(t.Provider,{value:s},e.children)}}}]);