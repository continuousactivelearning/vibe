"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4215],{4318:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>o});var s=r(4700);const i={},t=s.createContext(i);function l(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(t.Provider,{value:n},e.children)}},4445:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"Express/Routing Controllers","title":"Routing Controllers","description":"1. Problem Statement: The Overwhelmed Bakery","source":"@site/newdocs/Express/5. Routing Controllers.md","sourceDirName":"Express","slug":"/Express/Routing Controllers","permalink":"/vibe/newdocs/Express/Routing Controllers","draft":false,"unlisted":false,"editUrl":"https://github.com/your-org/\u2026/newdocs/Express/5. Routing Controllers.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{},"sidebar":"newSidebar","previous":{"title":"Request_Response","permalink":"/vibe/newdocs/Express/Request_Response"},"next":{"title":"Middleware","permalink":"/vibe/newdocs/Express/Middleware"}}');var i=r(7968),t=r(4318);const l={},o=void 0,d={},a=[{value:"1. Problem Statement: The Overwhelmed Bakery",id:"1-problem-statement-the-overwhelmed-bakery",level:2},{value:"<strong>A Day at &quot;Crumb &amp; Craft Bakery&quot;</strong>",id:"a-day-at-crumb--craft-bakery",level:2},{value:"2. Learning Objectives",id:"2-learning-objectives",level:2},{value:"3. Concept Introduction with Analogy",id:"3-concept-introduction-with-analogy",level:2},{value:"<strong>Analogy: The Bakery Assembly Line</strong>",id:"analogy-the-bakery-assembly-line",level:2},{value:"<strong>What Is a Controller?</strong>",id:"what-is-a-controller",level:2},{value:"5. Step-by-Step Data Modeling &amp; Code Walkthrough",id:"5-step-by-step-data-modeling--code-walkthrough",level:2},{value:"6. Interactive Challenge / Mini-Project",id:"6-interactive-challenge--mini-project",level:2},{value:"7. Common Pitfalls &amp; Best Practices",id:"7-common-pitfalls--best-practices",level:2},{value:"8. Quick Recap &amp; Key Takeaways",id:"8-quick-recap--key-takeaways",level:2},{value:"9. Optional: Programmer\u2019s Workflow Checklist",id:"9-optional-programmers-workflow-checklist",level:2},{value:"10. Coming up next",id:"10-coming-up-next",level:2}];function c(e){const n={br:"br",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"#Routing Controllers, Middleware, and Request Validation"}),"\n",(0,i.jsx)(n.h2,{id:"1-problem-statement-the-overwhelmed-bakery",children:"1. Problem Statement: The Overwhelmed Bakery"}),"\n",(0,i.jsx)(n.h2,{id:"a-day-at-crumb--craft-bakery",children:(0,i.jsx)(n.strong,{children:'A Day at "Crumb & Craft Bakery"'})}),"\n",(0,i.jsx)(n.p,{children:"Crumb & Craft Bakery started as a cozy neighborhood shop. Orders were simple:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"A customer would walk in, ask for a cake, and the bakers would jot down details by hand."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Mistakes were rare, and everyone knew each other."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"But after becoming a city-wide sensation, things spiraled:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Lost Orders:"}),"  Staff scribbled requests on sticky notes that got misplaced."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Wrong Assignments:"}),"  Sometimes, a bread order ended up in the cake station, or a gluten-free request was missed."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"No Oversight:"}),"  New hires didn\u2019t know who handled which type of order, leading to confusion and delays."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Missed Details:"}),"  Orders with missing pickup dates or flavors slipped through, causing wasted ingredients and unhappy customers."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"The breaking point:"}),(0,i.jsx)(n.br,{}),"\n","During a holiday rush, the bakery received 500 online orders in an hour."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Missing Allergies:"}),"  A child with a nut allergy nearly got a peanut butter cake."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Inventory Chaos:"}),"  The system allowed orders for 1,000 croissants when only 100 were in stock."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Mixed Messages:"}),"  Some customers got confirmation emails; others heard nothing."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"The challenge:"}),(0,i.jsx)(n.br,{}),"\n","How do you redesign the bakery\u2019s workflow so that:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Every order goes to the right team."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Mistakes (like missing allergies or impossible quantities) are caught early."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Customers  ",(0,i.jsx)(n.em,{children:"always"}),"  get clear, timely updates."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"2-learning-objectives",children:"2. Learning Objectives"}),"\n",(0,i.jsx)(n.p,{children:"By the end of this lesson, you\u2019ll be able to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Organize workflows into specialized teams (routing controllers)."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Add checkpoints to catch errors early (middleware)."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Validate orders for accuracy before they\u2019re processed (request validation)."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"3-concept-introduction-with-analogy",children:"3. Concept Introduction with Analogy"}),"\n",(0,i.jsx)(n.h2,{id:"analogy-the-bakery-assembly-line",children:(0,i.jsx)(n.strong,{children:"Analogy: The Bakery Assembly Line"})}),"\n",(0,i.jsx)(n.p,{children:"Imagine redesigning Crumb & Craft\u2019s kitchen into a well-oiled assembly line:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Specialized Stations (Routing Controllers):"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Order Desk:"}),"  Handles new orders and customer inquiries."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Baking Team:"}),"  Manages inventory and bakes items."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Quality Control:"}),"  Inspects orders before they go out."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Checkpoints (Middleware):"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Allergy Check:"}),"  Scans every order for dietary restrictions."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Inventory Check:"}),"  Ensures stock levels are updated in real time."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Logging:"}),"  Tracks how long each order takes to complete."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Inspectors (Validation):"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Order Form Check:"}),"  Rejects forms missing flavors, dates, or quantities."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Stock Check:"}),"  Blocks orders that exceed available inventory."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"what-is-a-controller",children:(0,i.jsx)(n.strong,{children:"What Is a Controller?"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["In Express (and web frameworks in general), a  ",(0,i.jsx)(n.strong,{children:"controller"}),"  is a module (usually a class or file) that groups related request handlers together."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Each controller is responsible for a \u201cresource\u201d or \u201cfeature\u201d (e.g., orders, inventory, users)."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"This modular approach:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Makes code easier to read and maintain."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Prevents accidental overlap or confusion."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Allows teams to work on different features independently."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Without Controllers (Flat Routing):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// routes.js\napp.post("/orders", ...);\napp.get("/orders/:id", ...);\napp.post("/inventory", ...);\napp.get("/inventory/:item", ...);\n// All logic is mixed together.\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"With Controllers (Modular Routing):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// OrderController.js\nrouter.post("/", ...);\nrouter.get("/:id", ...);\n\n// InventoryController.js\nrouter.post("/", ...);\nrouter.get("/:item", ...);\n\n// Each controller is mounted at its own base route.\napp.use("/orders", OrderController);\napp.use("/inventory", InventoryController);\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"A. Organizing Workflows with Routing Controllers"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem:"}),"  Orders were handled by anyone, leading to chaos.",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Solution:"}),"  Assign specialized teams to specific tasks."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. Defining Teams (Controllers)"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// Team 1: Order Desk\n@Controller("/orders")\nexport class OrderController {\n@Post("/")\ncreateOrder(@Body() order: Order) {\n  // Forward to baking team\n}\n\n@Get("/:id")\ngetOrderStatus(@Param("id") orderId: string) {\n  // Check progress\n}\n}\n\n// Team 2: Baking Team\n@Controller("/baking")\nexport class BakingController {\n@Post("/start")\nstartBaking(@Body() order: Order) {\n  // Check inventory and bake\n}\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"2. How It Works"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:'@Controller("/orders")'}),":"]}),"  This team handles all requests starting with  ",(0,i.jsx)(n.code,{children:"/orders"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:'@Post("/")'}),":"]}),"  The order desk\u2019s form for new orders."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:'@Get("/:id")'}),":"]}),"  Lets customers check their order status."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"B. Adding Checkpoints (Middleware)"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem:"}),"  Mistakes like nut allergies or oversold stock slipped through.",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Solution:"}),"  Add checkpoints to inspect orders before they\u2019re processed."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. Types of Checkpoints"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Checkpoint"}),(0,i.jsx)(n.th,{children:"Purpose"}),(0,i.jsx)(n.th,{children:"Example"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Allergy Check"}),(0,i.jsx)(n.td,{children:"Scans for nuts, gluten, etc."}),(0,i.jsx)(n.td,{children:"allergyMiddleware"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Inventory Check"}),(0,i.jsx)(n.td,{children:"Ensures stock levels are sufficient"}),(0,i.jsx)(n.td,{children:"inventoryMiddleware"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Logging"}),(0,i.jsx)(n.td,{children:"Tracks order timelines"}),(0,i.jsx)(n.td,{children:"loggingMiddleware"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"2. Custom Checkpoint Example"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// Allergy Check Middleware\n@Middleware()\nexport class AllergyMiddleware implements ExpressMiddlewareInterface {\nuse(req: Request, res: Response, next: NextFunction) {\n  const { ingredients } = req.body;\n  if (ingredients.includes("peanuts")) {\n    throw new Error("Peanut allergy alert!");\n  }\n  next();\n}\n}\n\n// Attach to the order workflow\n@UseBefore(AllergyMiddleware)\n@Post("/orders")\ncreateOrder(@Body() order: Order) { ... }\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"C. Validating Orders (Request Validation)"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem:"}),"  Orders with missing/wrong details wasted time and ingredients.",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Solution:"}),"  Validate orders before they enter the workflow."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. Validation Rules"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"class Order {\n  @IsDate()\n  pickupDate: Date;\n\n  @IsString()\n  flavor: string;\n\n  @IsInt()\n  @Min(1)\n  @Max(100)\n  quantity: number;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"2. Automatic Validation"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'@Post("/orders")\ncreateOrder(@Body({ validate: true }) order: Order) {\n  // Only runs if validation passes\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Failed Validation Response:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'{\n  "status": "error",\n  "error": "Quantity must be at least 1"\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"5-step-by-step-data-modeling--code-walkthrough",children:"5. Step-by-Step Data Modeling & Code Walkthrough"}),"\n",(0,i.jsx)(n.p,{children:"Let\u2019s walk through how our \u201cCrumb & Craft Bakery\u201d solves its real-world chaos using controllers, step by step:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"A. Defining the Order Data Structure"})}),"\n",(0,i.jsxs)(n.p,{children:["Remember how orders were once scribbled on sticky notes and got lost?",(0,i.jsx)(n.br,{}),"\n","We\u2019ll fix that by defining a clear, digital structure for every order-so nothing is forgotten."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface Order {\n  id: string;\n  customerName: string;\n  flavor: string;\n  quantity: number;\n  pickupDate: string;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Every order must have an ID (so it never gets mixed up), the customer\u2019s name, the cake flavor, quantity, and a pickup date."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"By making these fields required, we ensure that no order is missing crucial details (no more \u201cmystery cakes\u201d or missed birthdays)."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"B. Creating a Safe Place for Orders"})}),"\n",(0,i.jsx)(n.p,{children:"Instead of sticky notes, we\u2019ll use a digital list where every order is stored and can be easily found by any team member."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'const orders: Order[] = [\n  { id: "1", customerName: "Maria", flavor: "vanilla", quantity: 2, pickupDate: "2024-07-10" },\n];\n\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"This array represents the bakery\u2019s \u201corder book\u201d-every new order gets added here, and staff can look up any order by its ID."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"C. Building the Order Controller: The New \u201cOrder Desk\u201d"})}),"\n",(0,i.jsx)(n.p,{children:"We create a dedicated \u201cOrder Desk\u201d team (controller) whose only job is to handle customer orders-no more confusion about who\u2019s responsible."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import { JsonController, Get, Post, Param, Body } from "routing-controllers";\n\n@JsonController("/orders")\nexport class OrderController {\n  @Get("/")\n  getAll() {\n    return orders;\n  }\n\n  @Get("/:id")\n  getOne(@Param("id") id: string) {\n    const order = orders.find(o => o.id === id);\n    if (!order) {\n      return { status: "error", error: "Order not found" };\n    }\n    return { status: "success", data: order };\n  }\n\n  @Post("/")\n  create(@Body() order: Omit<Order, "id">) {\n    const newOrder: Order = {\n      ...order,\n      id: (orders.length + 1).toString(),\n    };\n    orders.push(newOrder);\n    return { status: "success", data: newOrder };\n  }\n}\n\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:'@Get("/")'}),":"]}),"  Lets staff see all orders-no more lost requests."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:'@Get("/:id")'}),":"]}),"  Anyone can check the status of a specific order (e.g., \u201cIs Maria\u2019s cake ready?\u201d)."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:'@Post("/")'}),":"]}),"  New orders are added in a standard way, with all required details. The system assigns a unique ID, so two \u201cMaria\u201ds never get mixed up."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"D. Registering the Controller in the Bakery\u2019s Workflow"})}),"\n",(0,i.jsx)(n.p,{children:"Just as you\u2019d tell new staff, \u201cAll cake orders go to the Order Desk,\u201d we register our controller so Express knows where to send each request."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import { JsonController, Get, Post, Param, Body } from "routing-controllers";\n\n@JsonController("/orders")\nexport class OrderController {\n  @Get("/")\n  getAll() {\n    return orders;\n  }\n\n  @Get("/:id")\n  getOne(@Param("id") id: string) {\n    const order = orders.find(o => o.id === id);\n    if (!order) {\n      return { status: "error", error: "Order not found" };\n    }\n    return { status: "success", data: order };\n  }\n\n  @Post("/")\n  create(@Body() order: Omit<Order, "id">) {\n    const newOrder: Order = {\n      ...order,\n      id: (orders.length + 1).toString(),\n    };\n    orders.push(newOrder);\n    return { status: "success", data: newOrder };\n  }\n}\n\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"This sets up the bakery\u2019s \u201cfront counter\u201d-all order-related requests are routed to the OrderController, so nothing is misplaced."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"6-interactive-challenge--mini-project",children:"6. Interactive Challenge / Mini-Project"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Your Turn!"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Create a  ",(0,i.jsx)(n.code,{children:"BakingController"}),"  for  ",(0,i.jsx)(n.code,{children:"/baking"}),"  routes."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Add a  ",(0,i.jsx)(n.code,{children:"POST /baking/start"}),"  endpoint to start baking an order."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Add a  ",(0,i.jsx)(n.code,{children:"GET /baking/status/:id"}),"  endpoint to check the baking status of an order."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"7-common-pitfalls--best-practices",children:"7. Common Pitfalls & Best Practices"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Pitfall"}),(0,i.jsx)(n.th,{children:"Best Practice"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Mixing unrelated routes"}),(0,i.jsx)(n.td,{children:"Group related routes in controllers"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Duplicating logic"}),(0,i.jsx)(n.td,{children:"Use shared services/inject dependencies"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Not using base routes"}),(0,i.jsx)(n.td,{children:"Always prefix controllers with a base"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Inconsistent responses"}),(0,i.jsx)(n.td,{children:"Standardize response format"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"8-quick-recap--key-takeaways",children:"8. Quick Recap & Key Takeaways"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Controllers"}),"  group related routes for clarity and maintainability."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Modular routing"}),"  makes code easier to grow and debug."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Controller libraries"}),"  like  ",(0,i.jsx)(n.code,{children:"routing-controllers"}),"  add powerful features (decorators, DI, middleware)."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"9-optional-programmers-workflow-checklist",children:"9. Optional: Programmer\u2019s Workflow Checklist"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Define controllers for each major resource or workflow."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Use clear base routes (e.g.,  ",(0,i.jsx)(n.code,{children:"/orders"}),",  ",(0,i.jsx)(n.code,{children:"/baking"}),")."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Standardize response formats."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Register all controllers in your app entry point."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Test each controller independently."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"10-coming-up-next",children:"10. Coming up next"}),"\n",(0,i.jsx)(n.p,{children:"Learn how to add \u201ccheckpoints\u201d (middleware) to your workflow-catching errors, logging actions, and ensuring every order is safe before it reaches the kitchen!"})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);