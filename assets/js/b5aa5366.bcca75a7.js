"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7566],{4146:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var s=r(4700);const t={},i=s.createContext(t);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(i.Provider,{value:n},e.children)}},9766:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Github Tutorial/Github Tutorial 2","title":"Github Tutorial 2","description":"Introduction and Context","source":"@site/newdocs/Github Tutorial/Github Tutorial 2.md","sourceDirName":"Github Tutorial","slug":"/Github Tutorial/Github Tutorial 2","permalink":"/vibe/newdocs/Github Tutorial/Github Tutorial 2","draft":false,"unlisted":false,"editUrl":"https://github.com/your-org/\u2026/newdocs/Github Tutorial/Github Tutorial 2.md","tags":[],"version":"current","frontMatter":{},"sidebar":"newSidebar","previous":{"title":"Github Tutorial 1","permalink":"/vibe/newdocs/Github Tutorial/Github Tutorial 1"},"next":{"title":"Github Tutorial 3","permalink":"/vibe/newdocs/Github Tutorial/Github Tutorial 3"}}');var t=r(7968),i=r(4146);const a={},l=void 0,o={},c=[{value:"Introduction and Context",id:"introduction-and-context",level:2},{value:"Case Study Overview",id:"case-study-overview",level:2},{value:"Concepts Explained with Analogies",id:"concepts-explained-with-analogies",level:2},{value:"Step-by-Step Guided Walkthrough",id:"step-by-step-guided-walkthrough",level:2},{value:"Step 1: Clone and Create Feature Branches",id:"step-1-clone-and-create-feature-branches",level:3},{value:"Step 2: Develop Dark Mode CSS and Commit",id:"step-2-develop-dark-mode-css-and-commit",level:2},{value:"Step 3: Open Draft Pull Requests",id:"step-3-open-draft-pull-requests",level:2},{value:"Step 4: Review and Resolve Merge Conflicts",id:"step-4-review-and-resolve-merge-conflicts",level:2},{value:"Step 5: Merge Strategies",id:"step-5-merge-strategies",level:2},{value:"Step 6: Sync Local Branches",id:"step-6-sync-local-branches",level:2},{value:"Best Practices and Tips",id:"best-practices-and-tips",level:2}];function d(e){const n={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"introduction-and-context",children:"Introduction and Context"}),"\n",(0,t.jsx)(n.p,{children:"Modern web apps often offer light and dark themes to improve usability at different times of day. GitHub enables multiple developers to work on the same codebase without stepping on each other\u2019s toes by using branches, pull requests, and merge workflows. By the end of this tutorial, you\u2019ll understand how to create feature/fix branches, merge with fast-forward and squash strategies, manage draft versus standard pull requests, resolve conflicts manually, and synchronize local work with the remote repository."}),"\n",(0,t.jsx)(n.h2,{id:"case-study-overview",children:"Case Study Overview"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Problem Statement"}),(0,t.jsx)(n.br,{}),"\n","BrightUI maintains a public website. Designers have requested a Dark Mode toggle. Two front-end engineers, Jamie and Priya, will each implement parts of the Dark Mode CSS on separate branches. They must collaborate without overwriting one another, review each other\u2019s work, handle any merge conflicts when both edit the same CSS file, and merge into  ",(0,t.jsx)(n.code,{children:"main"}),"  using both fast-forward and squash strategies. Success means shipping Dark Mode with a clean commit history and no lost changes."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Learning Objectives"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Create and use feature branches for isolated development"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Merge branches with fast-forward and squash techniques"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Open draft and standard pull requests and conduct reviews"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Identify and resolve merge conflicts manually"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Keep local branches synchronized via pull, push, and fetch workflows"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"concepts-explained-with-analogies",children:"Concepts Explained with Analogies"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Branching"}),(0,t.jsx)(n.br,{}),"\n","Analogy: Working on a photocopy of a blueprint so you can sketch changes without altering the original drawing.",(0,t.jsx)(n.br,{}),"\n","Technical: A branch is a pointer to a series of commits. Creating a feature branch isolates work until it\u2019s ready to merge back into  ",(0,t.jsx)(n.code,{children:"main"}),"\n",(0,t.jsx)(n.strong,{children:"Merging"}),(0,t.jsx)(n.br,{}),"\n","Analogy: Gluing your sketch back onto the master blueprint, either by appending your changes (fast-forward) or by consolidating your entire sketch into one neat overview (squash).",(0,t.jsx)(n.br,{}),"\n","Technical: A fast-forward merge moves the base branch pointer forward when no divergent commits exist, while a squash merge condenses all feature-branch commits into a single commit on the target branch"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Pull Requests"}),(0,t.jsx)(n.br,{}),"\n","Analogy: Passing your sketch to a peer for review, initially as a draft for early feedback, then as a final version for formal approval.",(0,t.jsx)(n.br,{}),"\n","Technical: Draft pull requests signal \u201cwork in progress,\u201d preventing accidental merges, whereas standard pull requests are ready for review and merging"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Merge Conflicts"}),(0,t.jsx)(n.br,{}),"\n","Analogy: Two artists coloring the same area of a painting in different hues-you must decide which stroke to keep.",(0,t.jsx)(n.br,{}),"\n","Technical: When Git cannot reconcile competing edits on the same lines, a conflict arises; resolving it requires manual editing and committing the resolution"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Syncing"}),(0,t.jsx)(n.br,{}),"\n","Analogy: Checking if everyone\u2019s blueprints are up to date before you start drawing.",(0,t.jsx)(n.br,{}),"\n","Technical: Pulling fetches and merges remote changes, pushing shares your commits, and fetch-only lets you inspect incoming changes before integrating them"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Visualization of branching and  merging"}),(0,t.jsx)(n.br,{}),"\n","Here someone has created a branch called  ",(0,t.jsx)(n.code,{children:"feature1"}),"  from the  ",(0,t.jsx)(n.code,{children:"main"}),"  branch, and you've then created a branch called  ",(0,t.jsx)(n.code,{children:"feature2"}),"  from  ",(0,t.jsx)(n.code,{children:"feature1"}),". There are open pull requests for both branches. The arrows indicate the current base branch for each pull request. At this point,  ",(0,t.jsx)(n.code,{children:"feature1"}),"  is the base branch for  ",(0,t.jsx)(n.code,{children:"feature2"}),". If the pull request for  ",(0,t.jsx)(n.code,{children:"feature2"}),"  is merged now, the  ",(0,t.jsx)(n.code,{children:"feature2"}),"  branch will be merged into  ",(0,t.jsx)(n.code,{children:"feature1"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:"https://docs.github.com/assets/cb-2058/images/help/branches/pr-retargeting-diagram1.png",alt:"Diagram that shows a feature1 branch with a pull request targeting main, and a feature2 branch with a pull request targeting feature1."})}),"\n",(0,t.jsxs)(n.p,{children:["In the next diagram, someone has merged the pull request for  ",(0,t.jsx)(n.code,{children:"feature1"}),"  into the  ",(0,t.jsx)(n.code,{children:"main"}),"  branch, and they have deleted the  ",(0,t.jsx)(n.code,{children:"feature1"}),"  branch. As a result, GitHub has automatically retargeted the pull request for  ",(0,t.jsx)(n.code,{children:"feature2"}),"  so that its base branch is now  ",(0,t.jsx)(n.code,{children:"main"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:"https://docs.github.com/assets/cb-2581/images/help/branches/pr-retargeting-diagram2.png",alt:"Diagram that shows both feature1 and feature2 branches with pull requests targeting main."})}),"\n",(0,t.jsxs)(n.p,{children:["Now when you merge the  ",(0,t.jsx)(n.code,{children:"feature2"}),"  pull request, it'll be merged into the  ",(0,t.jsx)(n.code,{children:"main"}),"  branch."]}),"\n",(0,t.jsx)(n.h2,{id:"step-by-step-guided-walkthrough",children:"Step-by-Step Guided Walkthrough"}),"\n",(0,t.jsx)(n.h3,{id:"step-1-clone-and-create-feature-branches",children:"Step 1: Clone and Create Feature Branches"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/BrightUI/website.git     # Clone the main repo\ncd website\ngit checkout -b feature/dark-mode-toggle              # Jamie\u2019s branch\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Checkpoint:"}),"  Why avoid committing directly to  ",(0,t.jsx)(n.code,{children:"main"}),"?"]}),"\n",(0,t.jsx)(n.p,{children:"Meanwhile, Priya runs:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git fetch origin\ngit checkout -b feature/dark-mode-colors origin/main  # Priya\u2019s branch\n"})}),"\n",(0,t.jsx)(n.h2,{id:"step-2-develop-dark-mode-css-and-commit",children:"Step 2: Develop Dark Mode CSS and Commit"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Jamie"}),"  edits  ",(0,t.jsx)(n.code,{children:"styles/theme.css"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:"/* Add Dark Mode toggle */\nbody.dark-mode { background: #121212; color: #e0e0e0; }\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'git add styles/theme.css\ngit commit -m "feat: add dark-mode toggle class"      # Descriptive commit\ngit push -u origin feature/dark-mode-toggle\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Priya"}),"  edits the same file to add color variables:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:":root  {  --bg-dark: #121212;  --text-light: #e0e0e0;  }\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'git add styles/theme.css\ngit commit -m "feat: define dark mode CSS variables"\ngit push -u origin feature/dark-mode-colors\n'})}),"\n",(0,t.jsx)(n.h2,{id:"step-3-open-draft-pull-requests",children:"Step 3: Open Draft Pull Requests"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Jamie"}),"  (Draft PR):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'gh pr create --draft --base main --head feature/dark-mode-toggle \\\n  --title "WIP: Dark Mode Toggle" \\\n  --body "Initial toggle implementation; needs CSS refinements"[2]\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Priya"}),"  (Standard PR via UI):"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Navigate to  ",(0,t.jsx)(n.strong,{children:"Pull requests"}),"  \u2192  ",(0,t.jsx)(n.strong,{children:"New pull request"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Set  ",(0,t.jsx)(n.strong,{children:"base"}),": main,  ",(0,t.jsx)(n.strong,{children:"compare"}),": feature/dark-mode-colors"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Enter title \u201cAdd dark mode color variables\u201d and description"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Click  ",(0,t.jsx)(n.strong,{children:"Create pull request"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Checkpoint:"}),"  When should you mark a PR as draft versus ready?"]}),"\n",(0,t.jsx)(n.h2,{id:"step-4-review-and-resolve-merge-conflicts",children:"Step 4: Review and Resolve Merge Conflicts"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Both PRs touch  ",(0,t.jsx)(n.code,{children:"styles/theme.css"}),"-a conflict arises when merging Jamie\u2019s completed PR first."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["On GitHub, click  ",(0,t.jsx)(n.strong,{children:"Merge pull request"}),"  \u2192 conflict alert appears",(0,t.jsx)(n.a,{href:"https://docs.github.com/articles/about-merge-conflicts",children:"4"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Click  ",(0,t.jsx)(n.strong,{children:"Resolve conflicts"}),". The editor shows:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"<<<<<<< HEAD\nbody.dark-mode { background: #121212; color: #e0e0e0; }\n=======\n:root { --bg-dark: #121212; --text-light: #e0e0e0; }\n>>>>>>> feature/dark-mode-colors\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Manually combine:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:":root { --bg-dark: #121212; --text-light: #e0e0e0; }\nbody.dark-mode { background: var(--bg-dark); color: var(--text-light); }\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Click  ",(0,t.jsx)(n.strong,{children:"Mark as resolved"}),"  and  ",(0,t.jsx)(n.strong,{children:"Commit merge"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Checkpoint:"}),"  Why is manual conflict resolution necessary rather than automatic?"]}),"\n",(0,t.jsx)(n.h2,{id:"step-5-merge-strategies",children:"Step 5: Merge Strategies"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Fast-Forward Merge"}),"  (for Jamie\u2019s toggle branch if no conflicts):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git checkout main\ngit pull origin main\ngit merge --ff-only feature/dark-mode-toggle      # Moves main forward[8]\ngit push\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Squash Merge"}),"  (for Priya\u2019s combined CSS changes):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'gh pr merge feature/dark-mode-colors --squash \\\n  --title "feat: implement dark mode styling" \\\n  --delete-branch                             # Single commit on main[8]\n'})}),"\n",(0,t.jsx)(n.h2,{id:"step-6-sync-local-branches",children:"Step 6: Sync Local Branches"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git checkout main\ngit pull --rebase origin main                  # Rebase for cleaner history[5]\ngit checkout feature/dark-mode-toggle\ngit pull --ff-only                              # Fast-forward to updated main\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Checkpoint:"}),"  What\u2019s the difference between  ",(0,t.jsx)(n.code,{children:"git pull"}),"  and  ",(0,t.jsx)(n.code,{children:"git fetch"}),"?"]}),"\n",(0,t.jsx)(n.h2,{id:"best-practices-and-tips",children:"Best Practices and Tips"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Use  ",(0,t.jsx)(n.strong,{children:"descriptive branch names"}),"  (",(0,t.jsx)(n.code,{children:"feature/"}),",  ",(0,t.jsx)(n.code,{children:"fix/"}),") to clarify purpose."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Open  ",(0,t.jsx)(n.strong,{children:"draft PRs"}),"  early to share work-in-progress and gather initial feedback."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Prefer  ",(0,t.jsx)(n.strong,{children:"fast-forward"}),"  mergers for short-lived branches to avoid unnecessary merge commits."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Use  ",(0,t.jsx)(n.strong,{children:"squash merges"}),"  for feature branches with many small commits to keep  ",(0,t.jsx)(n.code,{children:"main"}),"  history tidy."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Frequently  ",(0,t.jsx)(n.strong,{children:"sync"}),"  branches with  ",(0,t.jsx)(n.code,{children:"main"}),"  to reduce conflict scope."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Review diffs carefully and  ",(0,t.jsx)(n.strong,{children:"resolve conflicts manually"}),"  to ensure intended code remains."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);