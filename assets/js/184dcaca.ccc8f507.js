"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5756],{4318:(n,e,s)=>{s.d(e,{R:()=>a,x:()=>l});var r=s(4700);const i={},t=r.createContext(i);function a(n){const e=r.useContext(t);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),r.createElement(t.Provider,{value:e},n.children)}},5678:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"Mongo DB/Transactions","title":"Transactions","description":"Transactions:  Multi-document transactions for ACID compliance.","source":"@site/newdocs/Mongo DB/Transactions.md","sourceDirName":"Mongo DB","slug":"/Mongo DB/Transactions","permalink":"/vibe/newdocs/Mongo DB/Transactions","draft":false,"unlisted":false,"editUrl":"https://github.com/your-org/\u2026/newdocs/Mongo DB/Transactions.md","tags":[],"version":"current","frontMatter":{},"sidebar":"newSidebar","previous":{"title":"CRUD Operations","permalink":"/vibe/newdocs/Mongo DB/CRUD Operations"},"next":{"title":"Advanced State Management with Zustand","permalink":"/vibe/newdocs/React/Advanced State Management with Zustand"}}');var i=s(7968),t=s(4318);const a={},l=void 0,c={},o=[{value:"1. Problem Statement",id:"1-problem-statement",level:2},{value:"<strong>Case Study: FinTrust Wallet \u2013 Secure Money Transfers</strong>",id:"case-study-fintrust-wallet--secure-money-transfers",level:2},{value:"2. Learning Objectives",id:"2-learning-objectives",level:2},{value:"3. Concept Introduction with Analogy",id:"3-concept-introduction-with-analogy",level:2},{value:"<strong>Analogy: The Bank Vault Double-Lock</strong>",id:"analogy-the-bank-vault-double-lock",level:2},{value:"4. Technical Deep Dive",id:"4-technical-deep-dive",level:2},{value:"<strong>E. ACID in Practice: Guarantees and Limitations</strong>",id:"e-acid-in-practice-guarantees-and-limitations",level:2},{value:"5. Step-by-Step Data Modeling &amp; Code Walkthrough",id:"5-step-by-step-data-modeling--code-walkthrough",level:2},{value:"<strong>C. What Happens If There\u2019s an Error?</strong>",id:"c-what-happens-if-theres-an-error",level:2},{value:"<strong>D. Best Practices for MongoDB Transactions</strong>",id:"d-best-practices-for-mongodb-transactions",level:2},{value:"6. Interactive Challenge / Mini-Project",id:"6-interactive-challenge--mini-project",level:2},{value:"7. Common Pitfalls &amp; Best Practices",id:"7-common-pitfalls--best-practices",level:2},{value:"8. Optional: Programmer\u2019s Workflow Checklist",id:"8-optional-programmers-workflow-checklist",level:2}];function d(n){const e={br:"br",code:"code",em:"em",h2:"h2",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.p,{children:"Transactions:  Multi-document transactions for ACID compliance."}),"\n",(0,i.jsx)(e.h2,{id:"1-problem-statement",children:"1. Problem Statement"}),"\n",(0,i.jsx)(e.h2,{id:"case-study-fintrust-wallet--secure-money-transfers",children:(0,i.jsx)(e.strong,{children:"Case Study: FinTrust Wallet \u2013 Secure Money Transfers"})}),"\n",(0,i.jsx)(e.p,{children:"FinTrust is a digital wallet platform where users can:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Transfer money to each other instantly."}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Pay for purchases and receive refunds."}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Store balances and transaction histories."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Critical challenges:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["When Alice sends $100 to Bob, Alice\u2019s balance must decrease and Bob\u2019s must increase\u2014",(0,i.jsx)(e.strong,{children:"both or neither"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"If a payment and a transaction log update don\u2019t both succeed, the system risks lost money or double credits."}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Regulatory compliance (banking, fintech) demands that transaction records are always correct\u2014even if the server crashes or the network fails."}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:"https://i.postimg.cc/5tC8HFJk/react3.png",alt:"Sample Image"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"The challenge:"}),(0,i.jsx)(e.br,{}),"\n","How can FinTrust guarantee that every transfer, payment, or refund is always complete, correct, and never leaves the system in a broken state, even when updating multiple documents or collections?"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"2-learning-objectives",children:"2. Learning Objectives"}),"\n",(0,i.jsx)(e.p,{children:"By the end of this tutorial, you will:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Understand what ACID means in MongoDB and why it matters for critical data."}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Know how to use MongoDB\u2019s multi-document transactions for atomic, consistent, isolated, and durable operations."}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Learn the syntax and workflow for starting, committing, and aborting transactions."}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Apply best practices for error handling, performance, and regulatory compliance."}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Recognize when to use (and not use) transactions in MongoDB."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"3-concept-introduction-with-analogy",children:"3. Concept Introduction with Analogy"}),"\n",(0,i.jsx)(e.h2,{id:"analogy-the-bank-vault-double-lock",children:(0,i.jsx)(e.strong,{children:"Analogy: The Bank Vault Double-Lock"})}),"\n",(0,i.jsx)(e.p,{children:"Imagine a bank transfer:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"The teller must take $100 from Alice\u2019s vault and add $100 to Bob\u2019s vault."}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["If the teller can\u2019t open Bob\u2019s vault, Alice\u2019s money must be put back\u2014",(0,i.jsx)(e.strong,{children:"no partial moves allowed"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Every step is logged, and if the power fails mid-transfer, the system automatically reverses everything."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"MongoDB\u2019s multi-document transactions are like this double-lock vault system:"}),(0,i.jsx)(e.br,{}),"\n","They guarantee that all related changes succeed or none do, keeping everyone\u2019s money safe."]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"4-technical-deep-dive",children:"4. Technical Deep Dive"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"A. What is ACID?"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"ACID"}),"  stands for:"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Atomicity"}),": All operations in a transaction succeed or none do.",(0,i.jsx)(e.br,{}),"\n",(0,i.jsx)(e.em,{children:"If Alice\u2019s balance decreases, Bob\u2019s must increase, or both are rolled back."})]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Consistency"}),": Transactions always leave the database in a valid state.",(0,i.jsx)(e.br,{}),"\n",(0,i.jsx)(e.em,{children:"No user can have a negative balance after a transfer."})]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Isolation"}),": Transactions don\u2019t interfere; each sees a consistent snapshot.",(0,i.jsx)(e.br,{}),"\n",(0,i.jsx)(e.em,{children:"No one sees Bob\u2019s balance increase until Alice\u2019s decrease is committed."})]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Durability"}),": Once committed, the changes survive crashes or power failures."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Why is this important?"}),(0,i.jsx)(e.br,{}),"\n","Without ACID, financial systems can lose money, double-spend, or create audit nightmares\u2014unacceptable in banking, fintech, and regulated industries."]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"B. MongoDB Transactions: How They Work"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Before MongoDB 4.0"}),": Only single-document operations were ACID-compliant."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"MongoDB 4.0+"}),": Multi-document transactions are supported, just like relational databases."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"How it works"}),":"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Start a session."}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Begin a transaction."}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Perform multiple reads/writes across collections."}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Commit to apply all changes, or abort to roll everything back."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Snapshot Isolation"}),": Each transaction sees a consistent view of the data, unaffected by others."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"C. When Should You Use Transactions?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Best for:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Financial transfers (wallets, payments, refunds)."}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Inventory management (reserve stock and update orders together)."}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Any workflow where multiple documents/collections must be updated as a unit."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Not always needed:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Analytics, reporting, or mostly read-only operations."}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Single-document updates (already atomic in MongoDB)."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"D. Transaction Syntax and Workflow"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"1. Start a session:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"const session = db.getMongo().startSession();\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"2. Start a transaction:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"session.startTransaction();\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"3. Perform operations (all must use the session):"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"db.users.updateOne(\n  { _id: aliceId },\n  { $inc: { balance: -100 } },\n  { session }\n);\ndb.users.updateOne(\n  { _id: bobId },\n  { $inc: { balance: 100 } },\n  { session }\n);\ndb.transactions.insertOne(\n  { from: aliceId, to: bobId, amount: 100, date: new Date() },\n  { session }\n);\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"4. Commit or abort:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"try {\n  session.commitTransaction();\n} catch (e) {\n  session.abortTransaction();\n  throw e;\n} finally {\n  session.endSession();\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Key Notes:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"If any operation fails, abort the transaction\u2014no changes are saved."}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"All operations must use the same session object."}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Transactions can span collections and (since MongoDB 4.2) sharded clusters."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"e-acid-in-practice-guarantees-and-limitations",children:(0,i.jsx)(e.strong,{children:"E. ACID in Practice: Guarantees and Limitations"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Atomicity"}),": All or nothing\u2014no partial changes."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Consistency"}),": Schema rules and business logic enforced at commit."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Isolation"}),": Other operations don\u2019t see changes until commit."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Durability"}),": Once committed, data is safe even after crashes."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Performance Consideration:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Transactions add overhead; use only when needed for business logic and regulatory compliance."}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"5-step-by-step-data-modeling--code-walkthrough",children:"5. Step-by-Step Data Modeling & Code Walkthrough"}),"\n",(0,i.jsx)(e.p,{children:"Let\u2019s walk through a real FinTrust wallet transfer:"}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"A. User and Transaction Document Models"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"User:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:'{\n  "_id": ObjectId("665f4d7e8b3e6c1e24a7b3e1"),\n  "name": "Alice",\n  "balance": 500.00\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Transaction:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:'{\n  "_id": ObjectId("..."),\n  "from": ObjectId("665f4d7e8b3e6c1e24a7b3e1"),\n  "to": ObjectId("665f4d7e8b3e6c1e24a7b3e2"),\n  "amount": 100.00,\n  "date": ISODate("2025-05-30T10:00:00Z"),\n  "status": "completed"\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"B. Atomic Money Transfer with Transaction"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:'const session = db.getMongo().startSession();\nsession.startTransaction();\n\ntry {\n  // 1. Deduct from Alice\n  db.users.updateOne(\n    { _id: ObjectId("665f4d7e8b3e6c1e24a7b3e1") },\n    { $inc: { balance: -100 } },\n    { session }\n  );\n\n  // 2. Add to Bob\n  db.users.updateOne(\n    { _id: ObjectId("665f4d7e8b3e6c1e24a7b3e2") },\n    { $inc: { balance: 100 } },\n    { session }\n  );\n\n  // 3. Log the transaction\n  db.transactions.insertOne(\n    {\n      from: ObjectId("665f4d7e8b3e6c1e24a7b3e1"),\n      to: ObjectId("665f4d7e8b3e6c1e24a7b3e2"),\n      amount: 100,\n      date: new Date(),\n      status: "completed"\n    },\n    { session }\n  );\n\n  // 4. Commit\n  session.commitTransaction();\n} catch (e) {\n  session.abortTransaction();\n  throw e;\n} finally {\n  session.endSession();\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Explanation:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"If any step fails (e.g., Alice doesn\u2019t have enough balance), all changes are rolled back\u2014no partial transfers or missing logs."}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"c-what-happens-if-theres-an-error",children:(0,i.jsx)(e.strong,{children:"C. What Happens If There\u2019s an Error?"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["If the server crashes or a write fails before  ",(0,i.jsx)(e.code,{children:"commitTransaction()"}),", MongoDB automatically aborts and rolls back all changes."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["If  ",(0,i.jsx)(e.code,{children:"commitTransaction()"}),"  succeeds, all changes are durable and visible to others."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"d-best-practices-for-mongodb-transactions",children:(0,i.jsx)(e.strong,{children:"D. Best Practices for MongoDB Transactions"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Keep transactions short"}),"  to reduce lock contention and improve performance."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Always check for errors"}),"  and handle aborts gracefully."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Use transactions only when necessary"}),"\u2014single-document updates don\u2019t need them."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Monitor performance"}),"  and tune write concerns for your business needs"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"6-interactive-challenge--mini-project",children:"6. Interactive Challenge / Mini-Project"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Your Turn!"}),(0,i.jsx)(e.br,{}),"\n","You\u2019re building a new feature for FinTrust:"]}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Refund a payment:"}),"  If a user disputes a payment, you must:"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Add the refund amount back to the sender\u2019s balance."}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Subtract the amount from the recipient\u2019s balance."}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Update the original transaction\u2019s status to \u201crefunded.\u201d"}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Log a new transaction record as a refund."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Ensure:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"If any step fails (e.g., recipient doesn\u2019t have enough balance to refund), no changes are made."}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"All operations are ACID-compliant."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Write a MongoDB transaction (pseudo-code or JavaScript) to implement this."})}),"\n",(0,i.jsx)(e.h2,{id:"7-common-pitfalls--best-practices",children:"7. Common Pitfalls & Best Practices"}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:"Pitfall"}),(0,i.jsx)(e.th,{children:"Best Practice"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Forgetting to use session in all ops"}),(0,i.jsxs)(e.td,{children:["Always pass ",(0,i.jsx)(e.code,{children:"{ session }"})," to each operation"]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Long-running transactions"}),(0,i.jsx)(e.td,{children:"Keep transactions short and focused"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Not handling errors/aborts"}),(0,i.jsxs)(e.td,{children:["Always use ",(0,i.jsx)(e.code,{children:"try/catch/finally"})," and abort on error"]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Using transactions for simple updates"}),(0,i.jsx)(e.td,{children:"Use only when needed for multi-document changes"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Not checking preconditions (e.g., balance)"}),(0,i.jsx)(e.td,{children:"Validate inside the transaction"})]})]})]}),"\n",(0,i.jsx)(e.h2,{id:"8-optional-programmers-workflow-checklist",children:"8. Optional: Programmer\u2019s Workflow Checklist"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Start a session and transaction for multi-document updates."}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["Pass  ",(0,i.jsx)(e.code,{children:"{ session }"}),"  to every read/write in the transaction."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Use try/catch/finally to commit or abort as needed."}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Validate all business logic inside the transaction."}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Test failure scenarios to ensure rollback works."}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Monitor performance and adjust write concerns as needed."}),"\n"]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}}}]);