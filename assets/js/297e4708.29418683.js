"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8639],{4146:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var s=i(4700);const r={},t=s.createContext(r);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(t.Provider,{value:n},e.children)}},8857:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Github Tutorial/Github Tutorial 1","title":"Github Tutorial 1","description":"Introduction and Context","source":"@site/newdocs/Github Tutorial/Github Tutorial 1.md","sourceDirName":"Github Tutorial","slug":"/Github Tutorial/Github Tutorial 1","permalink":"/vibe/newdocs/Github Tutorial/Github Tutorial 1","draft":false,"unlisted":false,"editUrl":"https://github.com/your-org/\u2026/newdocs/Github Tutorial/Github Tutorial 1.md","tags":[],"version":"current","frontMatter":{},"sidebar":"newSidebar","next":{"title":"Github Tutorial 2","permalink":"/vibe/newdocs/Github Tutorial/Github Tutorial 2"}}');var r=i(7968),t=i(4146);const o={},l=void 0,a={},c=[{value:"Introduction and Context",id:"introduction-and-context",level:2},{value:"Case Study Overview",id:"case-study-overview",level:2},{value:"Concepts Explained with Analogies",id:"concepts-explained-with-analogies",level:2},{value:"Step-by-Step Guided Walkthrough",id:"step-by-step-guided-walkthrough",level:2},{value:"Step 1: Create the Repository",id:"step-1-create-the-repository",level:2},{value:"Step 2: Create a Feature Branch",id:"step-2-create-a-feature-branch",level:2},{value:"Creating a branch",id:"creating-a-branch",level:3},{value:"Step 3: Make and Commit Changes",id:"step-3-make-and-commit-changes",level:2},{value:"Step 4: Open a Pull Request",id:"step-4-open-a-pull-request",level:2},{value:"Step 5: Merge Your Pull Request",id:"step-5-merge-your-pull-request",level:2},{value:"Best Practices and Tips",id:"best-practices-and-tips",level:2},{value:"Real-World Application and Extension",id:"real-world-application-and-extension",level:2}];function d(e){const n={br:"br",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"introduction-and-context",children:"Introduction and Context"}),"\n",(0,r.jsx)(n.p,{children:"GitHub is a web-based platform for hosting Git repositories, enabling teams to track changes, review code, and manage projects collaboratively.  By the end of this tutorial, you\u2019ll be able to initialize a repository, work on feature branches, record changes with commits, propose updates via pull requests, and merge them into your main code line."}),"\n",(0,r.jsx)(n.h2,{id:"case-study-overview",children:"Case Study Overview"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Problem Statement"}),"\nAlex has just joined TechStart\u2019s engineering team and must demonstrate proficiency with GitHub\u2019s core workflows. Their task is to set up a public \u201chello-world\u201d repository, collaborate with remote teammates, and maintain a clear, auditable history. This exercise ensures all new hires follow a standardized development process, reducing merge conflicts and fostering consistent code quality across the organization. Success looks like a clean commit history, a merged pull request, and removal of the feature branch once work is complete."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Learning Objectives"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Create and configure a GitHub repository (public vs. private)"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Clone and initialize projects locally"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Create and switch branches"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Make and commit changes with descriptive messages"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Open, review, and merge pull requests"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Use both GUI (GitHub website) and CLI (Git, GitHub CLI) methods"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"concepts-explained-with-analogies",children:"Concepts Explained with Analogies"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Repository"}),(0,r.jsx)(n.br,{}),"\n","Analogy: A digital folder that holds every version of your project-like a library that archives all book editions.",(0,r.jsx)(n.br,{}),"\n","Technical: A Git repository stores files, history, and branches in a single project container on GitHub"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Branch"}),(0,r.jsx)(n.br,{}),"\n","Analogy: A recipe variant-like making a gluten-free version of a cake without altering the original.",(0,r.jsx)(n.br,{}),"\n","Technical: A branch is an independent line of development, isolated from the default  ",(0,r.jsx)(n.code,{children:"main"}),"  branch until merged"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Commit"}),(0,r.jsx)(n.br,{}),"\n","Analogy: A journal entry describing the changes you\u2019ve made since the last entry.",(0,r.jsx)(n.br,{}),"\n","Technical: A commit captures a snapshot of staged changes with a message explaining why they were made"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Pull Request"}),(0,r.jsx)(n.br,{}),"\n","Analogy: Submitting your edited chapter to an editor for review before it\u2019s added to the final book.",(0,r.jsx)(n.br,{}),"\n","Technical: A pull request (PR) proposes merging one branch into another, shows diffs, and facilitates discussion and reviews"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Merge"}),(0,r.jsx)(n.br,{}),"\n","Analogy: Integrating your recipe variant back into the main cookbook, combining all approved changes.",(0,r.jsx)(n.br,{}),"\n","Technical: A merge incorporates commits from a feature branch into another branch, often the default  ",(0,r.jsx)(n.code,{children:"main"})]}),"\n",(0,r.jsx)(n.h2,{id:"step-by-step-guided-walkthrough",children:"Step-by-Step Guided Walkthrough"}),"\n",(0,r.jsx)(n.h2,{id:"step-1-create-the-repository",children:"Step 1: Create the Repository"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"GUI Method"}),"  (GitHub Website)"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["In the upper-right corner of any page, select  , then click  ",(0,r.jsx)(n.strong,{children:"New repository"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://docs.github.com/assets/cb-29762/images/help/repository/repo-create-global-nav-update.png",alt:'Screenshot of a GitHub dropdown menu showing options to create new items. The menu item "New repository" is outlined in dark orange.'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:['In the "Repository name" box, type  ',(0,r.jsx)(n.code,{children:"hello-world"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:'In the "Description" box, type a short description. For example, type "This repository is for practicing the GitHub Flow."'}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Select whether your repository will be  ",(0,r.jsx)(n.strong,{children:"Public"}),"  or  ",(0,r.jsx)(n.strong,{children:"Private"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Select  ",(0,r.jsx)(n.strong,{children:"Add a README file"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Click  ",(0,r.jsx)(n.strong,{children:"Create repository"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"CLI Method"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'#Create local folder and initialize Git\nmkdir hello-world && cd hello-world\ngit init                                        # Initialize local repo\n#Add remote origin and push initial commit\ngit remote add origin https://github.com/<you>/hello-world.git\necho "# hello-world" > README.md\ngit add README.md\ngit commit -m "feat: initial commit with README" # Stage and commit\ngit push -u origin main                         # Push to GitHub\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Checkpoint"}),": What is the purpose of the README file in your repo?"]}),"\n",(0,r.jsx)(n.h2,{id:"step-2-create-a-feature-branch",children:"Step 2: Create a Feature Branch"}),"\n",(0,r.jsx)(n.p,{children:"This diagram shows:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The  ",(0,r.jsx)(n.code,{children:"main"}),"  branch"]}),"\n",(0,r.jsxs)(n.li,{children:["A new branch called  ",(0,r.jsx)(n.code,{children:"feature"})]}),"\n",(0,r.jsxs)(n.li,{children:["The journey that  ",(0,r.jsx)(n.code,{children:"feature"}),'  takes through stages for "Commit changes," "Submit pull request," and "Discuss proposed changes" before it\'s merged into  ',(0,r.jsx)(n.code,{children:"main"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://docs.github.com/assets/cb-23923/images/help/repository/branching.png",alt:'Diagram of the two branches. The "feature" branch diverges from the "main" branch and is then merged back into main.'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"GUI Method"})}),"\n",(0,r.jsx)(n.h3,{id:"creating-a-branch",children:"Creating a branch"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Click the  ",(0,r.jsx)(n.strong,{children:"Code"}),"  tab of your  ",(0,r.jsx)(n.code,{children:"hello-world"}),"  repository."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Above the file list, click the dropdown menu that says  ",(0,r.jsx)(n.strong,{children:"main"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://docs.github.com/assets/cb-16584/images/help/branches/branch-selection-dropdown-global-nav-update.png",alt:'Screenshot of the repository page. A dropdown menu, labeled with a branch icon and "main", is highlighted with an orange outline.'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Type a branch name,  ",(0,r.jsx)(n.code,{children:"readme-edits"}),", into the text box."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Click  ",(0,r.jsx)(n.strong,{children:"Create branch: readme-edits from main"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://docs.github.com/assets/cb-31023/images/help/repository/new-branch.png",alt:"Screenshot of the branch dropdown for a repository. \"Create branch: readme-edits from 'main'\" is outlined in dark orange."})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Now you have two branches,  ",(0,r.jsx)(n.code,{children:"main"}),"  and  ",(0,r.jsx)(n.code,{children:"readme-edits"}),". Right now, they look exactly the same. Next you'll add changes to the new  ",(0,r.jsx)(n.code,{children:"readme-edits"}),"  branch."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"CLI Method"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"git fetch origin && git checkout -b readme-edits origin/main  # Create & switch to branch\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Checkpoint"}),": Why work on a branch instead of directly committing to  ",(0,r.jsx)(n.code,{children:"main"}),"?"]}),"\n",(0,r.jsx)(n.h2,{id:"step-3-make-and-commit-changes",children:"Step 3: Make and Commit Changes"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"GUI Method"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Under your  ",(0,r.jsx)(n.code,{children:"readme-edits"}),"  branch, open  ",(0,r.jsx)(n.strong,{children:"README.md"}),"  and click the pencil icon."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Edit content (e.g., add a personal bio), scroll down, enter a commit message like \u201cdocs: add personal bio\u201d, and click  ",(0,r.jsx)(n.strong,{children:"Commit changes"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"CLI Method"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'nano README.md                         # Edit file locally\ngit add README.md                     # Stage changes[15]\ngit commit -m "docs: add personal bio" # Commit with message[15]\ngit push -u origin readme-edits       # Push branch to GitHub[15]\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Checkpoint"}),": How does staging (",(0,r.jsx)(n.code,{children:"git add"}),") differ from committing?"]}),"\n",(0,r.jsx)(n.h2,{id:"step-4-open-a-pull-request",children:"Step 4: Open a Pull Request"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"GUI Method"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Click the  ",(0,r.jsx)(n.strong,{children:"Pull requests"}),"  tab of your  ",(0,r.jsx)(n.code,{children:"hello-world"}),"  repository."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Click  ",(0,r.jsx)(n.strong,{children:"New pull request"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["In the  ",(0,r.jsx)(n.strong,{children:"Example Comparisons"}),"  box, select the branch you made,  ",(0,r.jsx)(n.code,{children:"readme-edits"}),", to compare with  ",(0,r.jsx)(n.code,{children:"main"}),"  (the original)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Look over your changes in the diffs on the Compare page, make sure they're what you want to submit."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://docs.github.com/assets/cb-32937/images/help/repository/diffs.png",alt:"Screenshot of a diff for the README.md file. 3 red lines list the text that's being removed, and 3 green lines list the text being added."})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Click  ",(0,r.jsx)(n.strong,{children:"Create pull request"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Give your pull request a title and write a brief description of your changes. You can include emojis and drag and drop images and gifs."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Click  ",(0,r.jsx)(n.strong,{children:"Create pull request"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"CLI Method"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'gh pr create --base main --head readme-edits \\\n  --title "Update README with bio" \\\n  --body "Adds a short bio for practice"        # Create PR via GitHub CLI\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Checkpoint"}),": What key information should you include in a pull request description?"]}),"\n",(0,r.jsx)(n.h2,{id:"step-5-merge-your-pull-request",children:"Step 5: Merge Your Pull Request"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"GUI Method"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Scroll to the bottom of the PR, click  ",(0,r.jsx)(n.strong,{children:"Merge pull request"}),", then  ",(0,r.jsx)(n.strong,{children:"Confirm merge"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Click  ",(0,r.jsx)(n.strong,{children:"Delete branch"}),"  to remove  ",(0,r.jsx)(n.code,{children:"readme-edits"}),"  after merging"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"CLI Method"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"gh pr merge readme-edits --merge --delete-branch  # Merge and delete branch\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Checkpoint"}),": Why delete feature branches after merging?"]}),"\n",(0,r.jsx)(n.h2,{id:"best-practices-and-tips",children:"Best Practices and Tips"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Use  ",(0,r.jsx)(n.strong,{children:"imperative, concise commit messages"}),"  (e.g., \u201cfix: typo in README\u201d) following community standards"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Keep branches  ",(0,r.jsx)(n.strong,{children:"short-lived"}),"  and focused on a single task to minimize merge conflicts"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Always  ",(0,r.jsx)(n.strong,{children:"pull"}),"  the latest  ",(0,r.jsx)(n.code,{children:"main"}),"  before creating or updating a branch (",(0,r.jsx)(n.code,{children:"git pull origin main"}),")."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Leverage  ",(0,r.jsx)(n.strong,{children:"code reviews"}),"  in pull requests to catch errors early and share knowledge"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Delete merged branches to  ",(0,r.jsx)(n.strong,{children:"reduce clutter"}),"  and indicate completed work"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"real-world-application-and-extension",children:"Real-World Application and Extension"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"CI Integration"}),": Add a GitHub Actions workflow to run tests on each PR."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Project Boards"}),": Use Issues and Projects to manage feature progress and bugs."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Community Contribution"}),": Explore \u201cgood first issues\u201d in other repos and submit PRs to real-world projects"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);