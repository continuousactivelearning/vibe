"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4782],{7630:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"Typescript/Dependency Injection","title":"Dependency Injection","description":"Topic 6: Dependency Injection in TypeScript (Constructor Injection, Interfaces for Contracts, Basic IoC)","source":"@site/newdocs/Typescript/14. Dependency Injection.md","sourceDirName":"Typescript","slug":"/Typescript/Dependency Injection","permalink":"/vibe/newdocs/Typescript/Dependency Injection","draft":false,"unlisted":false,"editUrl":"https://github.com/your-org/\u2026/newdocs/Typescript/14. Dependency Injection.md","tags":[],"version":"current","sidebarPosition":14,"frontMatter":{},"sidebar":"newSidebar","previous":{"title":"Optional and Default Parameters in TypeScript","permalink":"/vibe/newdocs/Typescript/Optional and Default Parameters/Optional and Default Parameters in TypeScript"},"next":{"title":"IoC Containers & Advanced Dependency Management","permalink":"/vibe/newdocs/Typescript/IoC Containers & Advanced Dependency Management"}}');var i=s(7968),r=s(9880);const a={},c=void 0,o={},l=[{value:"1. Problem Statement",id:"1-problem-statement",level:2},{value:"2. Learning Objectives",id:"2-learning-objectives",level:2},{value:"3. Concept Introduction with Analogy",id:"3-concept-introduction-with-analogy",level:2},{value:"Analogy: Plug-and-Play Power Sockets",id:"analogy-plug-and-play-power-sockets",level:2},{value:"<strong>What is Dependency Injection?</strong>",id:"what-is-dependency-injection",level:2},{value:"<strong>Why Use DI?</strong>",id:"why-use-di",level:2},{value:"<strong>DI in TypeScript: How It Works</strong>",id:"di-in-typescript-how-it-works",level:2},{value:"4. Step-by-Step Data Modeling &amp; Code Walkthrough",id:"4-step-by-step-data-modeling--code-walkthrough",level:2},{value:"5. Challenge",id:"5-challenge",level:2},{value:"6. Quick Recap &amp; Key Takeaways",id:"6-quick-recap--key-takeaways",level:2},{value:"7. (Optional) Programmer\u2019s Workflow Checklist",id:"7-optional-programmers-workflow-checklist",level:2},{value:"8. Coming up",id:"8-coming-up",level:2}];function d(e){const n={br:"br",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Topic 6: Dependency Injection in TypeScript (Constructor Injection, Interfaces for Contracts, Basic IoC)"}),"\n",(0,i.jsx)(n.h2,{id:"1-problem-statement",children:"1. Problem Statement"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Scenario: Modern Payment Processing System"})}),"\n",(0,i.jsx)(n.p,{children:"You\u2019re building a payment processing platform that must:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Support different payment gateways (Stripe, PayPal, BankTransfer)."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Allow easy swapping or upgrading of gateways (e.g., for new regions)."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Enable testing with fake gateways (no real transactions)."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Keep the payment logic focused and maintainable."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"The problem:"}),(0,i.jsx)(n.br,{}),"\n","How do you provide the payment module with the right gateway, swap gateways easily, and test without real payments  ",(0,i.jsx)(n.strong,{children:"while keeping your payment logic decoupled and flexible"}),"?"]}),"\n",(0,i.jsx)(n.h2,{id:"2-learning-objectives",children:"2. Learning Objectives"}),"\n",(0,i.jsx)(n.p,{children:"By the end of this lesson, you\u2019ll be able to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Understand what Dependency Injection (DI) and Inversion of Control (IoC) are."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Use constructor injection to supply dependencies."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Define interfaces as contracts for dependencies."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Build flexible, testable, and maintainable TypeScript systems using DI."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"3-concept-introduction-with-analogy",children:"3. Concept Introduction with Analogy"}),"\n",(0,i.jsx)(n.h2,{id:"analogy-plug-and-play-power-sockets",children:"Analogy: Plug-and-Play Power Sockets"}),"\n",(0,i.jsx)(n.p,{children:"Imagine a payment terminal (like a card reader) in a store:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"The terminal doesn\u2019t care what kind of plug (gateway) is used; it just needs a compatible socket."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"You can plug in a Stripe adapter, a PayPal adapter, or a test adapter for training."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"If you upgrade to a faster plug, you don\u2019t need to change the terminal-just swap the plug."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Dependency Injection"}),"  is like using a universal socket:",(0,i.jsx)(n.br,{}),"\n","You can swap adapters (dependencies) without changing the device (business logic)."]}),"\n",(0,i.jsx)(n.h2,{id:"what-is-dependency-injection",children:(0,i.jsx)(n.strong,{children:"What is Dependency Injection?"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Dependency Injection (DI)"}),"  is a design pattern where an object\u2019s dependencies are provided (\u201cinjected\u201d) from outside, rather than hardcoded inside the object."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Inversion of Control (IoC):"}),"  The control of creating and supplying dependencies is inverted-handled by an external entity, not the object itself."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"why-use-di",children:(0,i.jsx)(n.strong,{children:"Why Use DI?"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Decoupling:"}),"  The main logic doesn\u2019t depend on specific implementations."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Testability:"}),"  You can inject mocks or fakes for testing."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Flexibility:"}),"  Swap implementations without changing business logic."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Maintainability:"}),"  Changes to dependencies don\u2019t ripple through the codebase."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"di-in-typescript-how-it-works",children:(0,i.jsx)(n.strong,{children:"DI in TypeScript: How It Works"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Interfaces"}),"  define contracts for dependencies."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Constructor injection"}),"  is the most common DI method."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"IoC containers"}),"  (advanced) can automate dependency resolution (not covered in depth here)."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"4-step-by-step-data-modeling--code-walkthrough",children:"4. Step-by-Step Data Modeling & Code Walkthrough"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Define a Contract (Interface) for Payment Gateways"}),"\nInterfaces define the expected behavior without implementation details."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface PaymentGateway {\n  processPayment(amount: number): Promise<boolean>;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This interface ensures any payment gateway class implements the  ",(0,i.jsx)(n.code,{children:"processPayment"}),"  method."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Implement Concrete Payment Gateways"}),"\nEach gateway implements the interface with its own logic."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"class StripeGateway implements PaymentGateway {\n  async processPayment(amount: number): Promise<boolean> {\n    console.log(`Processing payment of $${amount} via Stripe.`);\n    // Simulate API call...\n    return true;\n  }\n}\n\nclass PaypalGateway implements PaymentGateway {\n  async processPayment(amount: number): Promise<boolean> {\n    console.log(`Processing payment of $${amount} via PayPal.`);\n    // Simulate API call...\n    return true;\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Create the Payment Processor Using Constructor Injection"}),"\nThe payment processor receives the gateway via its constructor."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'class PaymentProcessor {\n  constructor(private gateway: PaymentGateway) {}\n\n  async pay(amount: number): Promise<void> {\n    const success = await this.gateway.processPayment(amount);\n    if (success) {\n      console.log("Payment successful!");\n    } else {\n      console.log("Payment failed.");\n    }\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["The processor  ",(0,i.jsx)(n.strong,{children:"does not create"}),"  the gateway; it receives it."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["This allows any class implementing  ",(0,i.jsx)(n.code,{children:"PaymentGateway"}),"  to be used."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Using Different Gateways"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const stripeGateway = new StripeGateway();\nconst paypalGateway = new PaypalGateway();\n\nconst processor1 = new PaymentProcessor(stripeGateway);\nprocessor1.pay(100); // Uses Stripe\n\nconst processor2 = new PaymentProcessor(paypalGateway);\nprocessor2.pay(200); // Uses PayPal\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Testing with Mock Gateways"})}),"\n",(0,i.jsx)(n.p,{children:"For testing, inject a mock gateway that simulates payment without real transactions."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"class MockGateway implements PaymentGateway {\n  async processPayment(amount: number): Promise<boolean> {\n    console.log(`Mock processing payment of $${amount}.`);\n    return true;\n  }\n}\n\nconst mockGateway = new MockGateway();\nconst testProcessor = new PaymentProcessor(mockGateway);\ntestProcessor.pay(50); // Uses mock gateway for testing\n"})}),"\n",(0,i.jsx)(n.h2,{id:"5-challenge",children:"5. Challenge"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Implement a new gateway class  ",(0,i.jsx)(n.code,{children:"BankTransferGateway"}),"  that logs payment processing."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Use it with  ",(0,i.jsx)(n.code,{children:"PaymentProcessor"}),"  to process a payment."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Write a mock gateway that simulates failure (",(0,i.jsx)(n.code,{children:"return false"}),") and test error handling."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"6-quick-recap--key-takeaways",children:"6. Quick Recap & Key Takeaways"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Dependency Injection"}),"  means supplying dependencies from outside, not creating them inside."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Constructor Injection"}),"  is the most common DI method in TypeScript."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Interfaces"}),"  define contracts that enable swapping implementations."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["DI improves  ",(0,i.jsx)(n.strong,{children:"flexibility"}),",  ",(0,i.jsx)(n.strong,{children:"testability"}),", and  ",(0,i.jsx)(n.strong,{children:"maintainability"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"7-optional-programmers-workflow-checklist",children:"7. (Optional) Programmer\u2019s Workflow Checklist"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Identify dependencies your class needs."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Define interfaces for those dependencies."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Inject dependencies via constructors."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"For testing, inject mocks or stubs."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Avoid creating dependencies inside business logic classes."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"8-coming-up",children:"8. Coming up"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"You\u2019ve mastered Dependency Injection basics!"}),(0,i.jsx)(n.br,{}),"\n","Next, explore  ",(0,i.jsx)(n.strong,{children:"IoC Containers"}),"  (like InversifyJS) for automatic dependency management and advanced DI features."]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},9880:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>c});var t=s(4700);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);