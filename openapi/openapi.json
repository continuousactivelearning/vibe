{
  "components": {
    "schemas": {
      "SignUpBody": {
        "properties": {
          "email": {
            "format": "email",
            "type": "string",
            "title": "Email Address",
            "description": "Email address of the user, used as login identifier",
            "example": "user@example.com"
          },
          "password": {
            "minLength": 8,
            "type": "string",
            "title": "Password",
            "description": "Password for account authentication (minimum 8 characters). Must contain: <br />1. **Uppercase letters** (A–Z)  <br /> 2. **Lowercase letters** (a–z)  <br /> 3. **Numbers** (0–9)   <br />4. **Special symbols** (`! @ # $ % ^ & * ( ) – _ = + [ ] { } | ; : , . ? /`) ",
            "example": "SecureP@ssw0rd",
            "format": "password",
            "writeOnly": true
          },
          "firstName": {
            "pattern": "^[a-zA-Z]+$",
            "type": "string",
            "title": "First Name",
            "description": "User's first name (alphabetic characters only)",
            "example": "John"
          },
          "lastName": {
            "pattern": "^[a-zA-Z]+$",
            "type": "string",
            "title": "Last Name",
            "description": "User's last name (alphabetic characters only)",
            "example": "Smith"
          }
        },
        "type": "object",
        "required": [
          "email",
          "password",
          "firstName",
          "lastName"
        ]
      },
      "VerifySignUpProviderBody": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token",
            "description": "Token used for signup verification",
            "example": "43jdlsaksla;f328e9fjhsda"
          }
        },
        "type": "object",
        "required": [
          "token"
        ]
      },
      "SignUpResponse": {
        "properties": {
          "uid": {
            "type": "string",
            "minLength": 1,
            "description": "Unique identifier for the user",
            "example": "cKy6H2O04PgTh8O3DpUXjgJYUr53",
            "readOnly": true
          },
          "email": {
            "format": "email",
            "type": "string",
            "description": "Email address of the registered user",
            "example": "user@example.com",
            "readOnly": true
          },
          "firstName": {
            "type": "string",
            "description": "User's first name",
            "example": "John",
            "readOnly": true
          },
          "lastName": {
            "type": "string",
            "description": "User's last name",
            "example": "Smith",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "uid",
          "email",
          "firstName",
          "lastName"
        ]
      },
      "ChangePasswordResponse": {
        "properties": {
          "success": {
            "minLength": 1,
            "type": "boolean",
            "description": "Indicates the operation was successful",
            "example": true,
            "readOnly": true
          },
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Password changed successfully",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "success",
          "message"
        ]
      },
      "TokenVerificationResponse": {
        "properties": {
          "message": {
            "type": "string",
            "description": "Confirmation message for valid token",
            "example": "Token is valid",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "message"
        ]
      },
      "AuthErrorResponse": {
        "properties": {
          "message": {
            "type": "string",
            "minLength": 1,
            "description": "The error message",
            "example": "Invalid credentials. Please check your email and password.",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "message"
        ]
      },
      "ValidationErrorResponse": {
        "properties": {
          "target": {
            "type": "object",
            "description": "The object that was validated.",
            "readOnly": true
          },
          "property": {
            "not": {
              "type": "null"
            },
            "type": "string",
            "description": "The property that failed validation.",
            "readOnly": true
          },
          "constraints": {
            "type": "object",
            "description": "Constraints that failed validation with error messages.",
            "readOnly": true
          },
          "children": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "format": "ValidationErrorResponse",
            "description": "Contains all nested validation errors of the property.",
            "readOnly": true
          },
          "contexts": {
            "type": "object",
            "description": "Contains all nested validation errors of the property.",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "target",
          "property",
          "constraints",
          "children"
        ]
      },
      "DefaultErrorResponse": {
        "properties": {
          "message": {
            "type": "string",
            "description": "The error message.",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "message"
        ]
      },
      "BadRequestErrorResponse": {
        "properties": {
          "message": {
            "type": "string",
            "description": "The error message.",
            "readOnly": true
          },
          "errors": {
            "$ref": "#/components/schemas/ValidationErrorResponse",
            "type": "object",
            "description": "The error details.",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "message",
          "errors"
        ]
      },
      "CreateCourseBody": {
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "maxLength": 255,
            "title": "Course Name",
            "description": "Name of the course",
            "example": "Introduction to Programming"
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "minLength": 1,
            "title": "Course Description",
            "description": "Description of the course",
            "example": "This course covers the basics of programming."
          }
        },
        "type": "object",
        "required": [
          "name",
          "description"
        ]
      },
      "UpdateCourseBody": {
        "properties": {
          "name": {
            "minLength": 3,
            "type": "string",
            "maxLength": 255,
            "description": "Name of the course",
            "example": "Introduction to Programming"
          },
          "description": {
            "minLength": 3,
            "type": "string",
            "maxLength": 1000,
            "description": "Description of the course",
            "example": "This course covers the basics of programming."
          },
          "nameOrDescription": {
            "minLength": 1,
            "type": "string",
            "deprecated": true,
            "description": "[READONLY] This is a virtual field used only for validation. Do not include this field in requests.\nEither \"name\" or \"description\" must be provided.",
            "readOnly": true,
            "writeOnly": false
          }
        },
        "type": "object"
      },
      "ReadCourseParams": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "description": "Object ID of the course to read",
            "example": "60d5ec49b3f1c8e4a8f8b8c1",
            "format": "Mongo Object ID"
          }
        },
        "type": "object",
        "required": [
          "id"
        ]
      },
      "UpdateCourseParams": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "description": "Object ID of the course to update",
            "example": "60d5ec49b3f1c8e4a8f8b8c1",
            "format": "Mongo Object ID"
          }
        },
        "type": "object",
        "required": [
          "id"
        ]
      },
      "CourseDataResponse": {
        "properties": {
          "_id": {
            "minLength": 1,
            "type": "string",
            "description": "Unique identifier for the course",
            "example": "60d5ec49b3f1c8e4a8f8b8c1",
            "format": "Mongo Object ID",
            "readOnly": true
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the course",
            "example": "Introduction to Programming"
          },
          "description": {
            "minLength": 1,
            "type": "string",
            "description": "Description of the course",
            "example": "This course covers the basics of programming."
          },
          "versions": {
            "minLength": 1,
            "type": "array",
            "items": {
              "type": "string",
              "format": "Mongo Object ID"
            },
            "description": "List of course version IDs",
            "example": [
              "60d5ec49b3f1c8e4a8f8b8c2",
              "60d5ec49b3f1c8e4a8f8b8c3"
            ],
            "readOnly": true
          },
          "instructors": {
            "minLength": 1,
            "type": "array",
            "items": {
              "type": "string",
              "format": "Mongo Object ID"
            },
            "description": "List of instructor IDs associated with the course",
            "example": [
              "60d5ec49b3f1c8e4a8f8b8c4",
              "60d5ec49b3f1c8e4a8f8b8c5"
            ],
            "readOnly": true
          },
          "createdAt": {
            "minLength": 1,
            "type": "string",
            "title": "Course Created At",
            "description": "Timestamp when the course was created",
            "example": "2023-10-01T12:00:00Z",
            "format": "date-time",
            "readOnly": true
          },
          "updatedAt": {
            "minLength": 1,
            "type": "string",
            "title": "Course Updated At",
            "description": "Timestamp when the course was last updated",
            "example": "2023-10-01T12:00:00Z",
            "format": "date-time",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "_id",
          "name",
          "description",
          "versions",
          "instructors",
          "createdAt",
          "updatedAt"
        ]
      },
      "CourseNotFoundErrorResponse": {
        "properties": {
          "message": {
            "minLength": 1,
            "type": "string",
            "description": "The error message.",
            "example": "No course found with the specified ID. Please verify the ID and try again.",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "message"
        ]
      },
      "CreateCourseVersionBody": {
        "properties": {
          "courseId": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  ""
                ]
              },
              {
                "not": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    {
                      "type": "object"
                    }
                  ]
                },
                "nullable": true
              }
            ],
            "title": "Course ID",
            "description": "ID of the course this version belongs to (auto-managed)",
            "example": "60d5ec49b3f1c8e4a8f8b8c1",
            "type": "string",
            "format": "Mongo Object ID",
            "readOnly": true
          },
          "version": {
            "type": "string",
            "minLength": 1,
            "title": "Version Label",
            "description": "The version label or identifier (e.g., v1.0, Fall 2025)",
            "example": "v1.0"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "title": "Version Description",
            "description": "A brief description of the course version",
            "example": "First release of the course"
          }
        },
        "type": "object",
        "required": [
          "version",
          "description"
        ]
      },
      "CreateCourseVersionParams": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Course ID",
            "description": "ID of the course to attach the new version to",
            "example": "60d5ec49b3f1c8e4a8f8b8c1",
            "format": "Mongo Object ID"
          }
        },
        "type": "object",
        "required": [
          "id"
        ]
      },
      "ReadCourseVersionParams": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Version ID",
            "description": "ID of the course version to retrieve",
            "example": "60d5ec49b3f1c8e4a8f8b8d2",
            "format": "Mongo Object ID"
          }
        },
        "type": "object",
        "required": [
          "id"
        ]
      },
      "DeleteCourseVersionParams": {
        "properties": {
          "versionId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Version ID",
            "description": "ID of the course version to delete",
            "example": "60d5ec49b3f1c8e4a8f8b8d2",
            "format": "Mongo Object ID"
          },
          "courseId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Course ID",
            "description": "ID of the course to which the version belongs",
            "example": "60d5ec49b3f1c8e4a8f8b8c1",
            "format": "Mongo Object ID"
          }
        },
        "type": "object",
        "required": [
          "versionId",
          "courseId"
        ]
      },
      "CreateModuleBody": {
        "properties": {
          "name": {
            "maxLength": 255,
            "type": "string",
            "minLength": 1,
            "title": "Module Name",
            "description": "Name/title of the module",
            "example": "Introduction to Data Structures"
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "minLength": 1,
            "title": "Module Description",
            "description": "Detailed description of the module content",
            "example": "This module covers fundamental data structures including arrays, linked lists, stacks, and queues."
          },
          "afterModuleId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "After Module ID",
            "description": "Optional: Position the new module after this module ID",
            "example": "60d5ec49b3f1c8e4a8f8b8c3",
            "format": "Mongo Object ID"
          },
          "beforeModuleId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Before Module ID",
            "description": "Optional: Position the new module before this module ID",
            "example": "60d5ec49b3f1c8e4a8f8b8c4",
            "format": "Mongo Object ID"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description"
        ]
      },
      "UpdateModuleBody": {
        "properties": {
          "name": {
            "maxLength": 255,
            "type": "string",
            "title": "Module Name",
            "description": "Updated name of the module",
            "example": "Advanced Data Structures"
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "title": "Module Description",
            "description": "Updated description of the module content",
            "example": "This module covers advanced data structures including trees, graphs, and hash tables."
          },
          "nameOrDescription": {
            "minLength": 1,
            "type": "string",
            "deprecated": true,
            "description": "[READONLY] This is a virtual field used only for validation. Do not include this field in requests.\nEither \"name\" or \"description\" must be provided.",
            "readOnly": true,
            "writeOnly": false
          }
        },
        "type": "object"
      },
      "MoveModuleBody": {
        "properties": {
          "afterModuleId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "After Module ID",
            "description": "Move the module after this module ID",
            "example": "60d5ec49b3f1c8e4a8f8b8c3",
            "format": "Mongo Object ID"
          },
          "beforeModuleId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Before Module ID",
            "description": "Move the module before this module ID",
            "example": "60d5ec49b3f1c8e4a8f8b8c4",
            "format": "Mongo Object ID"
          },
          "onlyOneAllowed": {
            "minLength": 1,
            "type": "string",
            "deprecated": true,
            "description": "[READONLY] Validation helper. Either afterModuleId or beforeModuleId must be provided.",
            "readOnly": true
          },
          "bothNotAllowed": {
            "minLength": 1,
            "type": "string",
            "deprecated": true,
            "description": "[READONLY] Validation helper. Both afterModuleId and beforeModuleId should not be provided together.",
            "readOnly": true
          }
        },
        "type": "object"
      },
      "CreateModuleParams": {
        "properties": {
          "versionId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Version ID",
            "description": "ID of the course version to which the module will be added",
            "example": "60d5ec49b3f1c8e4a8f8b8d5",
            "format": "Mongo Object ID"
          }
        },
        "type": "object",
        "required": [
          "versionId"
        ]
      },
      "UpdateModuleParams": {
        "properties": {
          "versionId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Version ID",
            "description": "ID of the course version containing the module",
            "example": "60d5ec49b3f1c8e4a8f8b8d5",
            "format": "Mongo Object ID"
          },
          "moduleId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Module ID",
            "description": "ID of the module to be updated",
            "example": "60d5ec49b3f1c8e4a8f8b8e6",
            "format": "Mongo Object ID"
          }
        },
        "type": "object",
        "required": [
          "versionId",
          "moduleId"
        ]
      },
      "MoveModuleParams": {
        "properties": {
          "versionId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Version ID",
            "description": "ID of the course version containing the module",
            "example": "60d5ec49b3f1c8e4a8f8b8d5",
            "format": "Mongo Object ID"
          },
          "moduleId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Module ID",
            "description": "ID of the module to move",
            "example": "60d5ec49b3f1c8e4a8f8b8e6",
            "format": "Mongo Object ID"
          }
        },
        "type": "object",
        "required": [
          "versionId",
          "moduleId"
        ]
      },
      "DeleteModuleParams": {
        "properties": {
          "versionId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Version ID",
            "description": "ID of the course version containing the module",
            "example": "60d5ec49b3f1c8e4a8f8b8d5",
            "format": "Mongo Object ID"
          },
          "moduleId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Module ID",
            "description": "ID of the module to delete",
            "example": "60d5ec49b3f1c8e4a8f8b8e6",
            "format": "Mongo Object ID"
          }
        },
        "type": "object",
        "required": [
          "versionId",
          "moduleId"
        ]
      },
      "ModuleDataResponse": {
        "properties": {
          "version": {
            "minLength": 1,
            "type": "object",
            "description": "The updated course version data containing modules",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "version"
        ]
      },
      "ModuleNotFoundErrorResponse": {
        "properties": {
          "message": {
            "minLength": 1,
            "type": "string",
            "description": "The error message",
            "example": "No module found with the specified ID. Please verify the ID and try again.",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "message"
        ]
      },
      "ModuleDeletedResponse": {
        "properties": {
          "message": {
            "minLength": 1,
            "type": "string",
            "description": "Deletion confirmation message",
            "example": "Module with the ID 60d5ec49b3f1c8e4a8f8b8e6 in Version 60d5ec49b3f1c8e4a8f8b8d5 has been deleted successfully.",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "message"
        ]
      },
      "CreateSectionBody": {
        "properties": {
          "name": {
            "maxLength": 255,
            "type": "string",
            "minLength": 1,
            "title": "Section Name",
            "description": "Name/title of the section",
            "example": "Introduction to Algorithms"
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "minLength": 1,
            "title": "Section Description",
            "description": "Description or purpose of the section",
            "example": "This section covers fundamental algorithmic concepts including time complexity and space complexity."
          },
          "afterSectionId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "After Section ID",
            "description": "Optional: Place the new section after this section ID",
            "example": "60d5ec49b3f1c8e4a8f8b8c3",
            "format": "Mongo Object ID"
          },
          "beforeSectionId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Before Section ID",
            "description": "Optional: Place the new section before this section ID",
            "example": "60d5ec49b3f1c8e4a8f8b8c4",
            "format": "Mongo Object ID"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description"
        ]
      },
      "UpdateSectionBody": {
        "properties": {
          "name": {
            "maxLength": 255,
            "type": "string",
            "title": "Section Name",
            "description": "Updated name of the section",
            "example": "Advanced Algorithms"
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "title": "Section Description",
            "description": "Updated description of the section",
            "example": "This section covers advanced algorithmic concepts including dynamic programming and greedy algorithms."
          },
          "nameOrDescription": {
            "minLength": 1,
            "type": "string",
            "deprecated": true,
            "description": "[READONLY] This is a virtual field used only for validation. Do not include this field in requests.\nEither \"name\" or \"description\" must be provided.",
            "readOnly": true,
            "writeOnly": false
          }
        },
        "type": "object"
      },
      "MoveSectionBody": {
        "properties": {
          "afterSectionId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "After Section ID",
            "description": "Move the section after this section ID",
            "example": "60d5ec49b3f1c8e4a8f8b8c3",
            "format": "Mongo Object ID"
          },
          "beforeSectionId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Before Section ID",
            "description": "Move the section before this section ID",
            "example": "60d5ec49b3f1c8e4a8f8b8c4",
            "format": "Mongo Object ID"
          },
          "onlyOneAllowed": {
            "minLength": 1,
            "type": "string",
            "deprecated": true,
            "description": "[READONLY] Validation helper. Either afterSectionId or beforeSectionId must be provided.",
            "readOnly": true
          },
          "bothNotAllowed": {
            "minLength": 1,
            "type": "string",
            "deprecated": true,
            "description": "[READONLY] Validation helper. Both afterSectionId and beforeSectionId should not be provided together.",
            "readOnly": true
          }
        },
        "type": "object"
      },
      "CreateSectionParams": {
        "properties": {
          "versionId": {
            "minLength": 1,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Version ID",
            "description": "ID of the course version to which the module belongs",
            "example": "60d5ec49b3f1c8e4a8f8b8d5",
            "format": "Mongo Object ID"
          },
          "moduleId": {
            "minLength": 1,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Module ID",
            "description": "ID of the module where the new section will be added",
            "example": "60d5ec49b3f1c8e4a8f8b8e6",
            "format": "Mongo Object ID"
          }
        },
        "type": "object",
        "required": [
          "versionId",
          "moduleId"
        ]
      },
      "MoveSectionParams": {
        "properties": {
          "versionId": {
            "minLength": 1,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Version ID",
            "description": "ID of the course version containing the module",
            "example": "60d5ec49b3f1c8e4a8f8b8d5",
            "format": "Mongo Object ID"
          },
          "moduleId": {
            "minLength": 1,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Module ID",
            "description": "ID of the module containing the section",
            "example": "60d5ec49b3f1c8e4a8f8b8e6",
            "format": "Mongo Object ID"
          },
          "sectionId": {
            "minLength": 1,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Section ID",
            "description": "ID of the section to be moved",
            "example": "60d5ec49b3f1c8e4a8f8b8f7",
            "format": "Mongo Object ID"
          }
        },
        "type": "object",
        "required": [
          "versionId",
          "moduleId",
          "sectionId"
        ]
      },
      "UpdateSectionParams": {
        "properties": {
          "versionId": {
            "minLength": 1,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Version ID",
            "description": "ID of the course version containing the module",
            "example": "60d5ec49b3f1c8e4a8f8b8d5",
            "format": "Mongo Object ID"
          },
          "moduleId": {
            "minLength": 1,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Module ID",
            "description": "ID of the module containing the section",
            "example": "60d5ec49b3f1c8e4a8f8b8e6",
            "format": "Mongo Object ID"
          },
          "sectionId": {
            "minLength": 1,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Section ID",
            "description": "ID of the section to be updated",
            "example": "60d5ec49b3f1c8e4a8f8b8f7",
            "format": "Mongo Object ID"
          }
        },
        "type": "object",
        "required": [
          "versionId",
          "moduleId",
          "sectionId"
        ]
      },
      "SectionDataResponse": {
        "properties": {
          "version": {
            "minLength": 1,
            "type": "object",
            "description": "The updated course version data containing the section",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "version"
        ]
      },
      "SectionNotFoundErrorResponse": {
        "properties": {
          "message": {
            "minLength": 1,
            "type": "string",
            "description": "The error message",
            "example": "No section found with the specified ID. Please verify the ID and try again.",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "message"
        ]
      },
      "SectionDeletedResponse": {
        "properties": {
          "message": {
            "minLength": 1,
            "type": "string",
            "description": "Deletion confirmation message",
            "example": "Section with the ID 60d5ec49b3f1c8e4a8f8b8e6 in Version 60d5ec49b3f1c8e4a8f8b8d5 has been deleted successfully.",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "message"
        ]
      },
      "DeleteSectionParams": {
        "properties": {
          "versionId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Version ID",
            "description": "ID of the course version containing the module",
            "example": "60d5ec49b3f1c8e4a8f8b8d5",
            "format": "Mongo Object ID"
          },
          "moduleId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Module ID",
            "description": "ID of the module to delete",
            "example": "60d5ec49b3f1c8e4a8f8b8e6",
            "format": "Mongo Object ID"
          },
          "sectionId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Section ID",
            "description": "ID of the section to delete",
            "example": "60d5ec49b3f1c8e4a8f8b8e6",
            "format": "Mongo Object ID"
          }
        },
        "type": "object",
        "required": [
          "versionId",
          "moduleId",
          "sectionId"
        ]
      },
      "VideoDetailsPayloadValidator": {
        "properties": {
          "URL": {
            "format": "uri",
            "type": "string",
            "minLength": 1,
            "title": "Video URL",
            "description": "Public video URL (e.g., YouTube or Vimeo link)",
            "example": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
          },
          "startTime": {
            "pattern": "^(\\d{1,2}:)?\\d{1,2}:\\d{2}$",
            "type": "string",
            "minLength": 1,
            "title": "Start Time",
            "description": "Start time of the video clip in HH:MM:SS format",
            "example": "00:01:30"
          },
          "endTime": {
            "pattern": "^(\\d{1,2}:)?\\d{1,2}:\\d{2}$",
            "type": "string",
            "minLength": 1,
            "title": "End Time",
            "description": "End time of the video clip in HH:MM:SS format",
            "example": "00:10:15"
          },
          "points": {
            "type": "number",
            "minLength": 1,
            "title": "Video Points",
            "description": "Points assigned to the video interaction",
            "example": 10
          }
        },
        "type": "object",
        "required": [
          "URL",
          "startTime",
          "endTime",
          "points"
        ]
      },
      "QuizDetailsPayloadValidator": {
        "properties": {
          "questionVisibility": {
            "exclusiveMinimum": 0,
            "type": "integer",
            "minLength": 1,
            "title": "Question Visibility",
            "description": "Number of quiz questions visible to students at once",
            "example": 5,
            "minimum": 1
          },
          "releaseTime": {
            "pattern": "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
            "type": "string",
            "minLength": 1,
            "title": "Quiz Release Time",
            "description": "ISO date string representing quiz release time",
            "example": "2023-10-15T14:00:00Z",
            "format": "date-time"
          },
          "questions": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  ""
                ]
              },
              {
                "not": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    {
                      "type": "object"
                    }
                  ]
                },
                "nullable": true
              }
            ],
            "title": "Quiz Questions",
            "description": "List of quiz question IDs (auto-managed)",
            "example": [
              "60d5ec49b3f1c8e4a8f8b8c1",
              "60d5ec49b3f1c8e4a8f8b8c2"
            ],
            "type": "array",
            "items": {
              "type": "string",
              "format": "Mongo Object ID"
            },
            "readOnly": true
          },
          "deadline": {
            "pattern": "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
            "type": "string",
            "minLength": 1,
            "title": "Quiz Deadline",
            "description": "ISO date string for quiz deadline",
            "example": "2023-10-22T23:59:59Z",
            "format": "date-time"
          }
        },
        "type": "object",
        "required": [
          "questionVisibility",
          "releaseTime",
          "deadline"
        ]
      },
      "BlogDetailsPayloadValidator": {
        "properties": {
          "tags": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  ""
                ]
              },
              {
                "not": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    {
                      "type": "object"
                    }
                  ]
                },
                "nullable": true
              }
            ],
            "title": "Blog Tags",
            "description": "Tags for categorizing the blog (auto-managed)",
            "example": [
              "programming",
              "algorithms"
            ],
            "type": "array",
            "items": {
              "type": "string"
            },
            "readOnly": true
          },
          "content": {
            "type": "string",
            "minLength": 1,
            "title": "Blog Content",
            "description": "Full blog content in markdown or plain text",
            "example": "# Introduction\n\nThis is a sample blog post about programming..."
          },
          "points": {
            "type": "number",
            "minLength": 1,
            "title": "Blog Points",
            "description": "Points assigned to the blog submission",
            "example": 20
          },
          "estimatedReadTimeInMinutes": {
            "exclusiveMinimum": 0,
            "type": "integer",
            "minLength": 1,
            "title": "Estimated Read Time",
            "description": "Estimated time to complete reading the blog in minutes",
            "example": 15,
            "minimum": 1
          }
        },
        "type": "object",
        "required": [
          "content",
          "points",
          "estimatedReadTimeInMinutes"
        ]
      },
      "CreateItemBody": {
        "properties": {
          "_id": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  ""
                ]
              },
              {
                "not": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    {
                      "type": "object"
                    }
                  ]
                },
                "nullable": true
              }
            ],
            "title": "Item ID",
            "description": "MongoDB ID (auto-assigned)",
            "example": "60d5ec49b3f1c8e4a8f8b8c1",
            "type": "string",
            "format": "Mongo Object ID",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Item Name",
            "description": "Title of the item",
            "example": "Introduction to Data Structures"
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "title": "Item Description",
            "description": "Description of the item",
            "example": "Learn about basic data structures like arrays, linked lists, and stacks."
          },
          "sectionId": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  ""
                ]
              },
              {
                "not": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    {
                      "type": "object"
                    }
                  ]
                },
                "nullable": true
              }
            ],
            "title": "Section ID",
            "description": "Section ID to which the item belongs (auto-managed)",
            "example": "60d5ec49b3f1c8e4a8f8b8d2",
            "type": "string",
            "format": "Mongo Object ID",
            "readOnly": true
          },
          "order": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  ""
                ]
              },
              {
                "not": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    {
                      "type": "object"
                    }
                  ]
                },
                "nullable": true
              }
            ],
            "title": "Item Order",
            "description": "Order key for item placement (auto-managed)",
            "example": "a1b2c3",
            "type": "string",
            "readOnly": true
          },
          "itemDetails": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  ""
                ]
              },
              {
                "not": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    {
                      "type": "object"
                    }
                  ]
                },
                "nullable": true
              }
            ],
            "title": "Item Details",
            "description": "Item details (depends on type) – video, blog, or quiz",
            "type": "object",
            "readOnly": true
          },
          "afterItemId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "After Item ID",
            "description": "Place item after this item ID",
            "example": "60d5ec49b3f1c8e4a8f8b8c3",
            "format": "Mongo Object ID"
          },
          "beforeItemId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Before Item ID",
            "description": "Place item before this item ID",
            "example": "60d5ec49b3f1c8e4a8f8b8c4",
            "format": "Mongo Object ID"
          },
          "createdAt": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  ""
                ]
              },
              {
                "not": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    {
                      "type": "object"
                    }
                  ]
                },
                "nullable": true
              }
            ],
            "title": "Created At",
            "description": "Item creation timestamp (auto-managed)",
            "example": "2023-10-01T12:00:00Z",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updatedAt": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  ""
                ]
              },
              {
                "not": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    {
                      "type": "object"
                    }
                  ]
                },
                "nullable": true
              }
            ],
            "title": "Updated At",
            "description": "Item update timestamp (auto-managed)",
            "example": "2023-10-05T15:30:00Z",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "type": {
            "enum": [
              "VIDEO",
              "QUIZ",
              "BLOG"
            ],
            "type": "string",
            "minLength": 1,
            "title": "Item Type",
            "description": "Type of the item: VIDEO, BLOG, or QUIZ",
            "example": "VIDEO"
          },
          "videoDetails": {
            "$ref": "#/components/schemas/VideoDetailsPayloadValidator",
            "minLength": 1,
            "type": "object",
            "title": "Video Details",
            "description": "Details specific to video items"
          },
          "blogDetails": {
            "$ref": "#/components/schemas/BlogDetailsPayloadValidator",
            "minLength": 1,
            "type": "object",
            "title": "Blog Details",
            "description": "Details specific to blog items"
          },
          "quizDetails": {
            "$ref": "#/components/schemas/QuizDetailsPayloadValidator",
            "minLength": 1,
            "type": "object",
            "title": "Quiz Details",
            "description": "Details specific to quiz items"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "type"
        ]
      },
      "UpdateItemBody": {
        "properties": {
          "_id": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  ""
                ]
              },
              {
                "not": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    {
                      "type": "object"
                    }
                  ]
                },
                "nullable": true
              }
            ],
            "title": "Item ID",
            "description": "MongoDB ID (auto-assigned)",
            "example": "60d5ec49b3f1c8e4a8f8b8c1",
            "type": "string",
            "format": "Mongo Object ID",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "title": "Item Name",
            "description": "Updated title of the item",
            "example": "Advanced Data Structures"
          },
          "description": {
            "type": "string",
            "title": "Item Description",
            "description": "Updated description of the item",
            "example": "Learn about advanced data structures like trees, graphs, and hash tables."
          },
          "sectionId": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  ""
                ]
              },
              {
                "not": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    {
                      "type": "object"
                    }
                  ]
                },
                "nullable": true
              }
            ],
            "title": "Section ID",
            "description": "Section ID to which the item belongs (auto-managed)",
            "example": "60d5ec49b3f1c8e4a8f8b8d2",
            "type": "string",
            "format": "Mongo Object ID",
            "readOnly": true
          },
          "order": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  ""
                ]
              },
              {
                "not": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    {
                      "type": "object"
                    }
                  ]
                },
                "nullable": true
              }
            ],
            "title": "Item Order",
            "description": "Order key for item placement (auto-managed)",
            "example": "a1b2c3",
            "type": "string",
            "readOnly": true
          },
          "itemDetails": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  ""
                ]
              },
              {
                "not": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    {
                      "type": "object"
                    }
                  ]
                },
                "nullable": true
              }
            ],
            "title": "Item Details",
            "description": "Item details (depends on type) – video, blog, or quiz",
            "type": "object",
            "readOnly": true
          },
          "createdAt": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  ""
                ]
              },
              {
                "not": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    {
                      "type": "object"
                    }
                  ]
                },
                "nullable": true
              }
            ],
            "title": "Created At",
            "description": "Item creation timestamp (auto-managed)",
            "example": "2023-10-01T12:00:00Z",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updatedAt": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  ""
                ]
              },
              {
                "not": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    {
                      "type": "object"
                    }
                  ]
                },
                "nullable": true
              }
            ],
            "title": "Updated At",
            "description": "Item update timestamp (auto-managed)",
            "example": "2023-10-05T15:30:00Z",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "type": {
            "enum": [
              "VIDEO",
              "QUIZ",
              "BLOG"
            ],
            "type": "string",
            "title": "Item Type",
            "description": "Updated type of the item: VIDEO, BLOG, or QUIZ",
            "example": "BLOG"
          },
          "afterItemId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "After Item ID",
            "description": "Place item after this item ID",
            "example": "60d5ec49b3f1c8e4a8f8b8c3",
            "format": "Mongo Object ID"
          },
          "beforeItemId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Before Item ID",
            "description": "Place item before this item ID",
            "example": "60d5ec49b3f1c8e4a8f8b8c4",
            "format": "Mongo Object ID"
          },
          "videoDetails": {
            "$ref": "#/components/schemas/VideoDetailsPayloadValidator",
            "minLength": 1,
            "type": "object",
            "title": "Video Details",
            "description": "Updated details specific to video items"
          },
          "blogDetails": {
            "$ref": "#/components/schemas/BlogDetailsPayloadValidator",
            "minLength": 1,
            "type": "object",
            "title": "Blog Details",
            "description": "Updated details specific to blog items"
          },
          "quizDetails": {
            "$ref": "#/components/schemas/QuizDetailsPayloadValidator",
            "minLength": 1,
            "type": "object",
            "title": "Quiz Details",
            "description": "Updated details specific to quiz items"
          }
        },
        "type": "object"
      },
      "MoveItemBody": {
        "properties": {
          "afterItemId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "After Item ID",
            "description": "Move the item after this item ID",
            "example": "60d5ec49b3f1c8e4a8f8b8c3",
            "format": "Mongo Object ID"
          },
          "beforeItemId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Before Item ID",
            "description": "Move the item before this item ID",
            "example": "60d5ec49b3f1c8e4a8f8b8c4",
            "format": "Mongo Object ID"
          },
          "onlyOneAllowed": {
            "minLength": 1,
            "type": "string",
            "deprecated": true,
            "description": "[READONLY] Validation helper. Either afterItemId or beforeItemId must be provided.",
            "readOnly": true
          },
          "bothNotAllowed": {
            "minLength": 1,
            "type": "string",
            "deprecated": true,
            "description": "[READONLY] Validation helper. Both afterItemId and beforeItemId should not be provided together.",
            "readOnly": true
          }
        },
        "type": "object"
      },
      "CreateItemParams": {
        "properties": {
          "versionId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Version ID",
            "description": "ID of the course version",
            "example": "60d5ec49b3f1c8e4a8f8b8d5",
            "format": "Mongo Object ID"
          },
          "moduleId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Module ID",
            "description": "ID of the module inside the version",
            "example": "60d5ec49b3f1c8e4a8f8b8e6",
            "format": "Mongo Object ID"
          },
          "sectionId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Section ID",
            "description": "ID of the section inside the module",
            "example": "60d5ec49b3f1c8e4a8f8b8f7",
            "format": "Mongo Object ID"
          }
        },
        "type": "object",
        "required": [
          "versionId",
          "moduleId",
          "sectionId"
        ]
      },
      "ReadAllItemsParams": {
        "properties": {
          "versionId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Version ID",
            "description": "ID of the course version containing the items",
            "example": "60d5ec49b3f1c8e4a8f8b8d5",
            "format": "Mongo Object ID"
          },
          "moduleId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Module ID",
            "description": "ID of the module containing the section",
            "example": "60d5ec49b3f1c8e4a8f8b8e6",
            "format": "Mongo Object ID"
          },
          "sectionId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Section ID",
            "description": "ID of the section containing the items",
            "example": "60d5ec49b3f1c8e4a8f8b8f7",
            "format": "Mongo Object ID"
          }
        },
        "type": "object",
        "required": [
          "versionId",
          "moduleId",
          "sectionId"
        ]
      },
      "UpdateItemParams": {
        "properties": {
          "versionId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Version ID",
            "description": "ID of the course version containing the item",
            "example": "60d5ec49b3f1c8e4a8f8b8d5",
            "format": "Mongo Object ID"
          },
          "moduleId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Module ID",
            "description": "ID of the module containing the section",
            "example": "60d5ec49b3f1c8e4a8f8b8e6",
            "format": "Mongo Object ID"
          },
          "sectionId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Section ID",
            "description": "ID of the section containing the item",
            "example": "60d5ec49b3f1c8e4a8f8b8f7",
            "format": "Mongo Object ID"
          },
          "itemId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Item ID",
            "description": "ID of the item to be updated",
            "example": "60d5ec49b3f1c8e4a8f8b8f8",
            "format": "Mongo Object ID"
          }
        },
        "type": "object",
        "required": [
          "versionId",
          "moduleId",
          "sectionId",
          "itemId"
        ]
      },
      "MoveItemParams": {
        "properties": {
          "versionId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Version ID",
            "description": "ID of the course version containing the item",
            "example": "60d5ec49b3f1c8e4a8f8b8d5",
            "format": "Mongo Object ID"
          },
          "moduleId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Module ID",
            "description": "ID of the module containing the section",
            "example": "60d5ec49b3f1c8e4a8f8b8e6",
            "format": "Mongo Object ID"
          },
          "sectionId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Section ID",
            "description": "ID of the section containing the item",
            "example": "60d5ec49b3f1c8e4a8f8b8f7",
            "format": "Mongo Object ID"
          },
          "itemId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Item ID",
            "description": "ID of the item to be moved",
            "example": "60d5ec49b3f1c8e4a8f8b8f8",
            "format": "Mongo Object ID"
          }
        },
        "type": "object",
        "required": [
          "versionId",
          "moduleId",
          "sectionId",
          "itemId"
        ]
      },
      "DeleteItemParams": {
        "properties": {
          "itemsGroupId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Items Group ID",
            "description": "ID of the items group containing the item",
            "example": "60d5ec49b3f1c8e4a8f8b8g9",
            "format": "Mongo Object ID"
          },
          "itemId": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "title": "Item ID",
            "description": "ID of the item to delete",
            "example": "60d5ec49b3f1c8e4a8f8b8f8",
            "format": "Mongo Object ID"
          }
        },
        "type": "object",
        "required": [
          "itemsGroupId",
          "itemId"
        ]
      },
      "ItemNotFoundErrorResponse": {
        "properties": {
          "message": {
            "minLength": 1,
            "type": "string",
            "description": "The error message",
            "example": "No item found with the specified ID. Please verify the ID and try again.",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "message"
        ]
      },
      "ItemDataResponse": {
        "properties": {
          "itemsGroup": {
            "minLength": 1,
            "type": "object",
            "description": "The item data",
            "readOnly": true
          },
          "version": {
            "description": "The updated version data (when applicable)",
            "type": "object",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "itemsGroup"
        ]
      },
      "DeletedItemResponse": {
        "properties": {
          "deletedItem": {
            "minLength": 1,
            "type": "object",
            "description": "The deleted item data",
            "readOnly": true
          },
          "updatedItemsGroup": {
            "minLength": 1,
            "type": "object",
            "description": "The updated items group after deletion",
            "readOnly": true
          }
        },
        "type": "object",
        "required": [
          "deletedItem",
          "updatedItemsGroup"
        ]
      },
      "GetUserProgressParams": {
        "properties": {
          "userId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "User ID to retrieve progress for",
            "example": "60d5ec49b3f1c8e4a8f8b8c1",
            "format": "Mongo Object ID"
          },
          "courseId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "Course ID to retrieve progress for",
            "example": "60d5ec49b3f1c8e4a8f8b8c2",
            "format": "Mongo Object ID"
          },
          "courseVersionId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "Course version ID to retrieve progress for",
            "example": "60d5ec49b3f1c8e4a8f8b8c3",
            "format": "Mongo Object ID"
          }
        },
        "type": "object",
        "required": [
          "userId",
          "courseId",
          "courseVersionId"
        ]
      },
      "StartItemBody": {
        "properties": {
          "itemId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "ID of the course item to start",
            "example": "60d5ec49b3f1c8e4a8f8b8c4",
            "format": "Mongo Object ID"
          },
          "moduleId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "ID of the module containing the item",
            "example": "60d5ec49b3f1c8e4a8f8b8c5",
            "format": "Mongo Object ID"
          },
          "sectionId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "ID of the section containing the item",
            "example": "60d5ec49b3f1c8e4a8f8b8c6",
            "format": "Mongo Object ID"
          }
        },
        "type": "object",
        "required": [
          "itemId",
          "moduleId",
          "sectionId"
        ]
      },
      "StartItemParams": {
        "properties": {
          "userId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "User ID to track progress for",
            "example": "60d5ec49b3f1c8e4a8f8b8c1",
            "format": "Mongo Object ID"
          },
          "courseId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "Course ID to track progress for",
            "example": "60d5ec49b3f1c8e4a8f8b8c2",
            "format": "Mongo Object ID"
          },
          "courseVersionId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "Course version ID to track progress for",
            "example": "60d5ec49b3f1c8e4a8f8b8c3",
            "format": "Mongo Object ID"
          }
        },
        "type": "object",
        "required": [
          "userId",
          "courseId",
          "courseVersionId"
        ]
      },
      "StartItemResponse": {
        "properties": {
          "watchItemId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "Watch item ID for tracking progress",
            "example": "60d5ec49b3f1c8e4a8f8b8c7",
            "format": "Mongo Object ID"
          }
        },
        "type": "object",
        "required": [
          "watchItemId"
        ]
      },
      "StopItemParams": {
        "properties": {
          "userId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "User ID to stop tracking progress for",
            "example": "60d5ec49b3f1c8e4a8f8b8c1",
            "format": "Mongo Object ID"
          },
          "courseId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "Course ID to stop tracking progress for",
            "example": "60d5ec49b3f1c8e4a8f8b8c2",
            "format": "Mongo Object ID"
          },
          "courseVersionId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "Course version ID to stop tracking progress for",
            "example": "60d5ec49b3f1c8e4a8f8b8c3",
            "format": "Mongo Object ID"
          }
        },
        "type": "object",
        "required": [
          "userId",
          "courseId",
          "courseVersionId"
        ]
      },
      "StopItemBody": {
        "properties": {
          "watchItemId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "Watch item ID used for tracking progress",
            "example": "60d5ec49b3f1c8e4a8f8b8c7",
            "format": "Mongo Object ID"
          },
          "itemId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "ID of the course item to stop tracking",
            "example": "60d5ec49b3f1c8e4a8f8b8c4",
            "format": "Mongo Object ID"
          },
          "sectionId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "ID of the section containing the item",
            "example": "60d5ec49b3f1c8e4a8f8b8c6",
            "format": "Mongo Object ID"
          },
          "moduleId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "ID of the module containing the item",
            "example": "60d5ec49b3f1c8e4a8f8b8c5",
            "format": "Mongo Object ID"
          }
        },
        "type": "object",
        "required": [
          "watchItemId",
          "itemId",
          "sectionId",
          "moduleId"
        ]
      },
      "UpdateProgressBody": {
        "properties": {
          "moduleId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "ID of the module to update progress for",
            "example": "60d5ec49b3f1c8e4a8f8b8c5",
            "format": "Mongo Object ID"
          },
          "sectionId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "ID of the section to update progress for",
            "example": "60d5ec49b3f1c8e4a8f8b8c6",
            "format": "Mongo Object ID"
          },
          "itemId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "ID of the item to update progress for",
            "example": "60d5ec49b3f1c8e4a8f8b8c4",
            "format": "Mongo Object ID"
          },
          "watchItemId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "Watch item ID used for tracking progress",
            "example": "60d5ec49b3f1c8e4a8f8b8c7",
            "format": "Mongo Object ID"
          }
        },
        "type": "object",
        "required": [
          "moduleId",
          "sectionId",
          "itemId",
          "watchItemId"
        ]
      },
      "UpdateProgressParams": {
        "properties": {
          "userId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "User ID to update progress for",
            "example": "60d5ec49b3f1c8e4a8f8b8c1",
            "format": "Mongo Object ID"
          },
          "courseId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "Course ID to update progress for",
            "example": "60d5ec49b3f1c8e4a8f8b8c2",
            "format": "Mongo Object ID"
          },
          "courseVersionId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "Course version ID to update progress for",
            "example": "60d5ec49b3f1c8e4a8f8b8c3",
            "format": "Mongo Object ID"
          }
        },
        "type": "object",
        "required": [
          "userId",
          "courseId",
          "courseVersionId"
        ]
      },
      "ResetCourseProgressParams": {
        "properties": {
          "userId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "User ID to reset progress for",
            "example": "60d5ec49b3f1c8e4a8f8b8c1",
            "format": "Mongo Object ID"
          },
          "courseId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "Course ID to reset progress for",
            "example": "60d5ec49b3f1c8e4a8f8b8c2",
            "format": "Mongo Object ID"
          },
          "courseVersionId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "Course version ID to reset progress for",
            "example": "60d5ec49b3f1c8e4a8f8b8c3",
            "format": "Mongo Object ID"
          }
        },
        "type": "object",
        "required": [
          "userId",
          "courseId",
          "courseVersionId"
        ]
      },
      "ResetCourseProgressBody": {
        "properties": {
          "moduleId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "description": "Optional module ID to reset progress to",
            "example": "60d5ec49b3f1c8e4a8f8b8c5",
            "format": "Mongo Object ID",
            "nullable": true
          },
          "sectionId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "description": "Optional section ID to reset progress to",
            "example": "60d5ec49b3f1c8e4a8f8b8c6",
            "format": "Mongo Object ID",
            "nullable": true
          },
          "itemId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "description": "Optional item ID to reset progress to",
            "example": "60d5ec49b3f1c8e4a8f8b8c4",
            "format": "Mongo Object ID",
            "nullable": true
          },
          "invalidFieldsCheck": {},
          "invalidFieldsCheck2": {}
        },
        "type": "object"
      },
      "ProgressDataResponse": {
        "properties": {
          "_id": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "description": "Unique identifier for the progress record",
            "example": "60d5ec49b3f1c8e4a8f8b8d1",
            "format": "Mongo Object ID",
            "readOnly": true
          },
          "userId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "User ID associated with this progress",
            "example": "60d5ec49b3f1c8e4a8f8b8c1",
            "format": "Mongo Object ID"
          },
          "courseId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "Course ID associated with this progress",
            "example": "60d5ec49b3f1c8e4a8f8b8c2",
            "format": "Mongo Object ID"
          },
          "courseVersionId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "Course version ID associated with this progress",
            "example": "60d5ec49b3f1c8e4a8f8b8c3",
            "format": "Mongo Object ID"
          },
          "currentModule": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "ID of the current module in progress",
            "example": "60d5ec49b3f1c8e4a8f8b8c5",
            "format": "Mongo Object ID"
          },
          "currentSection": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "ID of the current section in progress",
            "example": "60d5ec49b3f1c8e4a8f8b8c6",
            "format": "Mongo Object ID"
          },
          "currentItem": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "ID of the current item in progress",
            "example": "60d5ec49b3f1c8e4a8f8b8c4",
            "format": "Mongo Object ID"
          },
          "completed": {
            "type": "boolean",
            "minLength": 1,
            "description": "Whether the course has been completed",
            "example": false
          }
        },
        "type": "object",
        "required": [
          "_id",
          "userId",
          "courseId",
          "courseVersionId",
          "currentModule",
          "currentSection",
          "currentItem",
          "completed"
        ]
      },
      "EnrollmentParams": {
        "properties": {
          "userId": {
            "minLength": 1,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "description": "User ID of the student to enroll",
            "example": "60d5ec49b3f1c8e4a8f8b8c1",
            "format": "Mongo Object ID"
          },
          "courseId": {
            "minLength": 1,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "description": "ID of the course to enroll in",
            "example": "60d5ec49b3f1c8e4a8f8b8c2",
            "format": "Mongo Object ID"
          },
          "courseVersionId": {
            "minLength": 1,
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "description": "ID of the specific course version to enroll in",
            "example": "60d5ec49b3f1c8e4a8f8b8c3",
            "format": "Mongo Object ID"
          }
        },
        "type": "object",
        "required": [
          "userId",
          "courseId",
          "courseVersionId"
        ]
      },
      "EnrollmentDataResponse": {
        "properties": {
          "_id": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "description": "Unique identifier for the enrollment record",
            "example": "60d5ec49b3f1c8e4a8f8b8d2",
            "format": "Mongo Object ID",
            "readOnly": true
          },
          "userId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "User ID associated with this enrollment",
            "example": "60d5ec49b3f1c8e4a8f8b8c1",
            "format": "Mongo Object ID"
          },
          "courseId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "Course ID associated with this enrollment",
            "example": "60d5ec49b3f1c8e4a8f8b8c2",
            "format": "Mongo Object ID"
          },
          "courseVersionId": {
            "pattern": "^[0-9a-fA-F]{24}$",
            "type": "string",
            "minLength": 1,
            "description": "Course version ID associated with this enrollment",
            "example": "60d5ec49b3f1c8e4a8f8b8c3",
            "format": "Mongo Object ID"
          },
          "status": {
            "type": "string",
            "minLength": 1,
            "description": "Status of the enrollment",
            "example": "active",
            "enum": [
              "active",
              "inactive"
            ]
          },
          "enrollmentDate": {
            "oneOf": [
              {
                "format": "date",
                "type": "string"
              },
              {
                "format": "date-time",
                "type": "string"
              }
            ],
            "minLength": 1,
            "type": "string",
            "description": "Date when the user was enrolled",
            "example": "2023-10-01T12:00:00Z",
            "format": "date-time"
          }
        },
        "type": "object",
        "required": [
          "_id",
          "userId",
          "courseId",
          "courseVersionId",
          "status",
          "enrollmentDate"
        ]
      },
      "EnrollUserResponseData": {
        "properties": {
          "enrollment": {
            "minLength": 1,
            "type": "object",
            "description": "Enrollment data for the user"
          },
          "progress": {
            "minLength": 1,
            "type": "object",
            "description": "Progress data for the user"
          }
        },
        "type": "object",
        "required": [
          "enrollment",
          "progress"
        ]
      },
      "EnrollmentResponse": {
        "properties": {
          "totalDocuments": {
            "type": "integer"
          },
          "totalPages": {
            "type": "integer"
          },
          "currentPage": {
            "type": "integer"
          },
          "enrollments": {
            "items": {
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object",
        "required": [
          "totalDocuments",
          "totalPages",
          "currentPage",
          "enrollments"
        ]
      },
      "EnrollmentNotFoundErrorResponse": {
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message indicating the enrollment was not found",
            "example": "Enrollment could not be created or found."
          }
        },
        "type": "object",
        "required": [
          "message"
        ]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "info": {
    "title": "ViBe API Documentation",
    "version": "1.0.0",
    "description": "API documentation for the ViBe platform",
    "contact": {
      "name": "ViBe Team",
      "email": "support@vibe.com"
    }
  },
  "openapi": "3.0.0",
  "paths": {
    "/auth/signup": {
      "post": {
        "operationId": "AuthController.signup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignUpBody"
              }
            }
          },
          "description": "SignUpBody",
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignUpResponse"
                }
              }
            },
            "description": "User successfully registered"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            },
            "description": "Invalid input data"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorResponse"
                }
              }
            },
            "description": "Registration failed"
          }
        },
        "summary": "Register User",
        "tags": [
          "Authentication"
        ],
        "description": "Creates a new user account with the provided credentials."
      }
    },
    "/auth/signup/verify": {
      "post": {
        "operationId": "AuthController.verifySignUpProvider",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifySignUpProviderBody"
              }
            }
          },
          "description": "VerifySignUpProviderBody",
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignUpResponse"
                }
              }
            },
            "description": "User successfully verified"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            },
            "description": "Invalid input data"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorResponse"
                }
              }
            },
            "description": "Registration failed"
          }
        },
        "summary": "Verify User",
        "tags": [
          "Authentication"
        ],
        "description": "Creates a new user account using the token provided."
      }
    },
    "/auth/change-password": {
      "patch": {
        "operationId": "AuthController.changePassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Schema for ChangePasswordBody (reference not found)"
              }
            }
          },
          "description": "ChangePasswordBody",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePasswordResponse"
                }
              }
            },
            "description": "Password changed successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            },
            "description": "Invalid password format or mismatch"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorResponse"
                }
              }
            },
            "description": "Password change failed"
          }
        },
        "summary": "Change Password",
        "tags": [
          "Authentication"
        ],
        "description": "Changes the authenticated user's password to the new password provided."
      }
    },
    "/auth/verify": {
      "post": {
        "operationId": "AuthController.verifyToken",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenVerificationResponse"
                }
              }
            },
            "description": "Token verification successful"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthErrorResponse"
                }
              }
            },
            "description": "Invalid or expired token"
          }
        },
        "summary": "Verify Token",
        "tags": [
          "Authentication"
        ],
        "description": "Verifies if the user's authentication token is valid and belongs to an admin user."
      }
    },
    "/courses/": {
      "post": {
        "operationId": "CourseController.create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCourseBody"
              }
            }
          },
          "description": "CreateCourseBody",
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseDataResponse"
                }
              }
            },
            "description": "Course created successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            },
            "description": "Bad Request Error"
          }
        },
        "summary": "Create Course",
        "tags": [
          "Courses"
        ],
        "description": "Creates a new course with the provided details."
      }
    },
    "/courses/{id}": {
      "get": {
        "operationId": "CourseController.read",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "description": "Object ID of the course to read",
              "example": "60d5ec49b3f1c8e4a8f8b8c1",
              "format": "Mongo Object ID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseDataResponse"
                }
              }
            },
            "description": "Course retrieved successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            },
            "description": "Bad Request Error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseNotFoundErrorResponse"
                }
              }
            },
            "description": "Course not found"
          }
        },
        "summary": "Get Course",
        "tags": [
          "Courses"
        ],
        "description": "Retrieves the course details for the specified course ID."
      },
      "put": {
        "operationId": "CourseController.update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "description": "Object ID of the course to update",
              "example": "60d5ec49b3f1c8e4a8f8b8c1",
              "format": "Mongo Object ID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCourseBody"
              }
            }
          },
          "description": "UpdateCourseBody",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseDataResponse"
                }
              }
            },
            "description": "Course updated successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            },
            "description": "Bad Request Error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseNotFoundErrorResponse"
                }
              }
            },
            "description": "Course not found"
          }
        },
        "summary": "Update Course",
        "tags": [
          "Courses"
        ],
        "description": "Updates the course details for the specified course ID."
      }
    },
    "/courses/{id}/versions": {
      "post": {
        "operationId": "CourseVersionController.create",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Course ID",
              "description": "ID of the course to attach the new version to",
              "example": "60d5ec49b3f1c8e4a8f8b8c1",
              "format": "Mongo Object ID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCourseVersionBody"
              }
            }
          },
          "description": "CreateCourseVersionBody",
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Schema for CreateCourseVersionResponse (reference not found)"
                }
              }
            },
            "description": "Course version created successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            },
            "description": "Bad Request Error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Schema for CourseVersionNotFoundErrorResponse (reference not found)"
                }
              }
            },
            "description": "Course not found"
          }
        },
        "summary": "Create Course Version",
        "tags": [
          "Course Versions"
        ],
        "description": "Creates a new version for a specific course."
      }
    },
    "/courses/versions/{id}": {
      "get": {
        "operationId": "CourseVersionController.read",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Version ID",
              "description": "ID of the course version to retrieve",
              "example": "60d5ec49b3f1c8e4a8f8b8d2",
              "format": "Mongo Object ID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Schema for CourseVersionDataResponse (reference not found)"
                }
              }
            },
            "description": "Course version retrieved successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            },
            "description": "Bad Request Error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Schema for CourseVersionNotFoundErrorResponse (reference not found)"
                }
              }
            },
            "description": "Course version not found"
          }
        },
        "summary": "Get Course Version",
        "tags": [
          "Course Versions"
        ],
        "description": "Retrieves a course version by its ID."
      }
    },
    "/courses/{courseId}/versions/{versionId}": {
      "delete": {
        "operationId": "CourseVersionController.delete",
        "parameters": [
          {
            "in": "path",
            "name": "versionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Version ID",
              "description": "ID of the course version to delete",
              "example": "60d5ec49b3f1c8e4a8f8b8d2",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "courseId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Course ID",
              "description": "ID of the course to which the version belongs",
              "example": "60d5ec49b3f1c8e4a8f8b8c1",
              "format": "Mongo Object ID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteCourseVersionParams"
                }
              }
            },
            "description": "Course version deleted successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            },
            "description": "Bad Request Error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Schema for CourseVersionNotFoundErrorResponse (reference not found)"
                }
              }
            },
            "description": "Course or version not found"
          }
        },
        "summary": "Delete Course Version",
        "tags": [
          "Course Versions"
        ],
        "description": "Deletes a course version by its ID."
      }
    },
    "/courses/versions/{versionId}/modules": {
      "post": {
        "operationId": "ModuleController.create",
        "parameters": [
          {
            "in": "path",
            "name": "versionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Version ID",
              "description": "ID of the course version to which the module will be added",
              "example": "60d5ec49b3f1c8e4a8f8b8d5",
              "format": "Mongo Object ID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateModuleBody"
              }
            }
          },
          "description": "CreateModuleBody",
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModuleDataResponse"
                }
              }
            },
            "description": "Module created successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            },
            "description": "Bad Request Error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModuleNotFoundErrorResponse"
                }
              }
            },
            "description": "Module not found"
          }
        },
        "summary": "Create Module",
        "tags": [
          "Course Modules"
        ],
        "description": "Creates a new module in the specified course version with the provided details."
      }
    },
    "/courses/versions/{versionId}/modules/{moduleId}": {
      "put": {
        "operationId": "ModuleController.update",
        "parameters": [
          {
            "in": "path",
            "name": "versionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Version ID",
              "description": "ID of the course version containing the module",
              "example": "60d5ec49b3f1c8e4a8f8b8d5",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "moduleId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Module ID",
              "description": "ID of the module to be updated",
              "example": "60d5ec49b3f1c8e4a8f8b8e6",
              "format": "Mongo Object ID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateModuleBody"
              }
            }
          },
          "description": "UpdateModuleBody",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModuleDataResponse"
                }
              }
            },
            "description": "Module updated successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            },
            "description": "Bad Request Error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModuleNotFoundErrorResponse"
                }
              }
            },
            "description": "Module not found"
          }
        },
        "summary": "Update Module",
        "tags": [
          "Course Modules"
        ],
        "description": "Updates an existing module's name or description within a course version."
      },
      "delete": {
        "operationId": "ModuleController.delete",
        "parameters": [
          {
            "in": "path",
            "name": "versionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Version ID",
              "description": "ID of the course version containing the module",
              "example": "60d5ec49b3f1c8e4a8f8b8d5",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "moduleId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Module ID",
              "description": "ID of the module to delete",
              "example": "60d5ec49b3f1c8e4a8f8b8e6",
              "format": "Mongo Object ID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModuleDeletedResponse"
                }
              }
            },
            "description": "Module deleted successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            },
            "description": "Bad Request Error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModuleNotFoundErrorResponse"
                }
              }
            },
            "description": "Module not found"
          }
        },
        "summary": "Delete Module",
        "tags": [
          "Course Modules"
        ],
        "description": "Permanently removes a module from a course version."
      }
    },
    "/courses/versions/{versionId}/modules/{moduleId}/move": {
      "put": {
        "operationId": "ModuleController.move",
        "parameters": [
          {
            "in": "path",
            "name": "versionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Version ID",
              "description": "ID of the course version containing the module",
              "example": "60d5ec49b3f1c8e4a8f8b8d5",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "moduleId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Module ID",
              "description": "ID of the module to move",
              "example": "60d5ec49b3f1c8e4a8f8b8e6",
              "format": "Mongo Object ID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MoveModuleBody"
              }
            }
          },
          "description": "MoveModuleBody",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModuleDataResponse"
                }
              }
            },
            "description": "Module moved successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            },
            "description": "Bad Request Error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModuleNotFoundErrorResponse"
                }
              }
            },
            "description": "Module not found"
          }
        },
        "summary": "Move Module",
        "tags": [
          "Course Modules"
        ],
        "description": "Reorders a module within its course version by placing it before or after another module."
      }
    },
    "/courses/versions/{versionId}/modules/{moduleId}/sections": {
      "post": {
        "operationId": "SectionController.create",
        "parameters": [
          {
            "in": "path",
            "name": "versionId",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Version ID",
              "description": "ID of the course version to which the module belongs",
              "example": "60d5ec49b3f1c8e4a8f8b8d5",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "moduleId",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Module ID",
              "description": "ID of the module where the new section will be added",
              "example": "60d5ec49b3f1c8e4a8f8b8e6",
              "format": "Mongo Object ID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSectionBody"
              }
            }
          },
          "description": "CreateSectionBody",
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionDataResponse"
                }
              }
            },
            "description": "Section created successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            },
            "description": "Bad Request Error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionNotFoundErrorResponse"
                }
              }
            },
            "description": "Section not found"
          }
        },
        "summary": "Create Section",
        "tags": [
          "Course Sections"
        ],
        "description": "Creates a new section in the specified module and automatically generates an associated items group."
      }
    },
    "/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}": {
      "put": {
        "operationId": "SectionController.update",
        "parameters": [
          {
            "in": "path",
            "name": "versionId",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Version ID",
              "description": "ID of the course version containing the module",
              "example": "60d5ec49b3f1c8e4a8f8b8d5",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "moduleId",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Module ID",
              "description": "ID of the module containing the section",
              "example": "60d5ec49b3f1c8e4a8f8b8e6",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "sectionId",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Section ID",
              "description": "ID of the section to be updated",
              "example": "60d5ec49b3f1c8e4a8f8b8f7",
              "format": "Mongo Object ID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSectionBody"
              }
            }
          },
          "description": "UpdateSectionBody",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionDataResponse"
                }
              }
            },
            "description": "Section updated successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            },
            "description": "Bad Request Error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionNotFoundErrorResponse"
                }
              }
            },
            "description": "Section not found"
          }
        },
        "summary": "Update Section",
        "tags": [
          "Course Sections"
        ],
        "description": "Updates an existing section's name or description within a module."
      },
      "delete": {
        "operationId": "SectionController.delete",
        "parameters": [
          {
            "in": "path",
            "name": "versionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Version ID",
              "description": "ID of the course version containing the module",
              "example": "60d5ec49b3f1c8e4a8f8b8d5",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "moduleId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Module ID",
              "description": "ID of the module to delete",
              "example": "60d5ec49b3f1c8e4a8f8b8e6",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "sectionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Section ID",
              "description": "ID of the section to delete",
              "example": "60d5ec49b3f1c8e4a8f8b8e6",
              "format": "Mongo Object ID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionDeletedResponse"
                }
              }
            },
            "description": "Section deleted successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            },
            "description": "Bad Request Error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionNotFoundErrorResponse"
                }
              }
            },
            "description": "Section not found"
          }
        },
        "summary": "Delete Section",
        "tags": [
          "Course Sections"
        ],
        "description": "Permanently removes a section from a module."
      }
    },
    "/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/move": {
      "put": {
        "operationId": "SectionController.move",
        "parameters": [
          {
            "in": "path",
            "name": "versionId",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Version ID",
              "description": "ID of the course version containing the module",
              "example": "60d5ec49b3f1c8e4a8f8b8d5",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "moduleId",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Module ID",
              "description": "ID of the module containing the section",
              "example": "60d5ec49b3f1c8e4a8f8b8e6",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "sectionId",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Section ID",
              "description": "ID of the section to be moved",
              "example": "60d5ec49b3f1c8e4a8f8b8f7",
              "format": "Mongo Object ID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MoveSectionBody"
              }
            }
          },
          "description": "MoveSectionBody",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionDataResponse"
                }
              }
            },
            "description": "Section moved successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            },
            "description": "Bad Request Error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionNotFoundErrorResponse"
                }
              }
            },
            "description": "Section not found"
          }
        },
        "summary": "Move Section",
        "tags": [
          "Course Sections"
        ],
        "description": "Reorders a section within its module by placing it before or after another section."
      }
    },
    "/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items": {
      "post": {
        "operationId": "ItemController.create",
        "parameters": [
          {
            "in": "path",
            "name": "versionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Version ID",
              "description": "ID of the course version",
              "example": "60d5ec49b3f1c8e4a8f8b8d5",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "moduleId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Module ID",
              "description": "ID of the module inside the version",
              "example": "60d5ec49b3f1c8e4a8f8b8e6",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "sectionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Section ID",
              "description": "ID of the section inside the module",
              "example": "60d5ec49b3f1c8e4a8f8b8f7",
              "format": "Mongo Object ID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateItemBody"
              }
            }
          },
          "description": "CreateItemBody",
          "required": false
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemDataResponse"
                }
              }
            },
            "description": "Item created successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            },
            "description": "Bad Request Error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemNotFoundErrorResponse"
                }
              }
            },
            "description": "Item not found"
          }
        },
        "summary": "Create Item",
        "tags": [
          "Items"
        ],
        "description": "Creates a new item in the specified section with the provided details."
      },
      "get": {
        "operationId": "ItemController.readAll",
        "parameters": [
          {
            "in": "path",
            "name": "versionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Version ID",
              "description": "ID of the course version containing the items",
              "example": "60d5ec49b3f1c8e4a8f8b8d5",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "moduleId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Module ID",
              "description": "ID of the module containing the section",
              "example": "60d5ec49b3f1c8e4a8f8b8e6",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "sectionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Section ID",
              "description": "ID of the section containing the items",
              "example": "60d5ec49b3f1c8e4a8f8b8f7",
              "format": "Mongo Object ID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemDataResponse"
                }
              }
            },
            "description": "Items retrieved successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            },
            "description": "Bad Request Error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemNotFoundErrorResponse"
                }
              }
            },
            "description": "Item not found"
          }
        },
        "summary": "Get All Items",
        "tags": [
          "Items"
        ],
        "description": "Retrieves all items from the specified section of a module in a course version."
      }
    },
    "/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items/{itemId}": {
      "put": {
        "operationId": "ItemController.update",
        "parameters": [
          {
            "in": "path",
            "name": "versionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Version ID",
              "description": "ID of the course version containing the item",
              "example": "60d5ec49b3f1c8e4a8f8b8d5",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "moduleId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Module ID",
              "description": "ID of the module containing the section",
              "example": "60d5ec49b3f1c8e4a8f8b8e6",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "sectionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Section ID",
              "description": "ID of the section containing the item",
              "example": "60d5ec49b3f1c8e4a8f8b8f7",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Item ID",
              "description": "ID of the item to be updated",
              "example": "60d5ec49b3f1c8e4a8f8b8f8",
              "format": "Mongo Object ID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateItemBody"
              }
            }
          },
          "description": "UpdateItemBody",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemDataResponse"
                }
              }
            },
            "description": "Item updated successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            },
            "description": "Bad Request Error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemNotFoundErrorResponse"
                }
              }
            },
            "description": "Item not found"
          }
        },
        "summary": "Update Item",
        "tags": [
          "Items"
        ],
        "description": "Updates an existing item in the specified section with the provided details."
      }
    },
    "/courses/itemGroups/{itemsGroupId}/items/{itemId}": {
      "delete": {
        "operationId": "ItemController.delete",
        "parameters": [
          {
            "in": "path",
            "name": "itemsGroupId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Items Group ID",
              "description": "ID of the items group containing the item",
              "example": "60d5ec49b3f1c8e4a8f8b8g9",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Item ID",
              "description": "ID of the item to delete",
              "example": "60d5ec49b3f1c8e4a8f8b8f8",
              "format": "Mongo Object ID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedItemResponse"
                }
              }
            },
            "description": "Item deleted successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            },
            "description": "Bad Request Error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemNotFoundErrorResponse"
                }
              }
            },
            "description": "Item not found"
          }
        },
        "summary": "Delete Item",
        "tags": [
          "Items"
        ],
        "description": "Deletes an item from a course section permanently."
      }
    },
    "/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items/{itemId}/move": {
      "put": {
        "operationId": "ItemController.move",
        "parameters": [
          {
            "in": "path",
            "name": "versionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Version ID",
              "description": "ID of the course version containing the item",
              "example": "60d5ec49b3f1c8e4a8f8b8d5",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "moduleId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Module ID",
              "description": "ID of the module containing the section",
              "example": "60d5ec49b3f1c8e4a8f8b8e6",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "sectionId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Section ID",
              "description": "ID of the section containing the item",
              "example": "60d5ec49b3f1c8e4a8f8b8f7",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "title": "Item ID",
              "description": "ID of the item to be moved",
              "example": "60d5ec49b3f1c8e4a8f8b8f8",
              "format": "Mongo Object ID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MoveItemBody"
              }
            }
          },
          "description": "MoveItemBody",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemDataResponse"
                }
              }
            },
            "description": "Item moved successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            },
            "description": "Bad Request Error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemNotFoundErrorResponse"
                }
              }
            },
            "description": "Item not found"
          }
        },
        "summary": "Move Item",
        "tags": [
          "Items"
        ],
        "description": "Moves an item to a new position within its section by recalculating its order."
      }
    },
    "/users/{userId}/enrollments/courses/{courseId}/versions/{courseVersionId}": {
      "post": {
        "operationId": "EnrollmentController.enrollUser",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "description": "User ID of the student to enroll",
              "example": "60d5ec49b3f1c8e4a8f8b8c1",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "courseId",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "description": "ID of the course to enroll in",
              "example": "60d5ec49b3f1c8e4a8f8b8c2",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "courseVersionId",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "description": "ID of the specific course version to enroll in",
              "example": "60d5ec49b3f1c8e4a8f8b8c3",
              "format": "Mongo Object ID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrollUserResponseData"
                }
              }
            },
            "description": "User successfully enrolled in the course"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            },
            "description": "Bad Request Error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrollmentNotFoundErrorResponse"
                }
              }
            },
            "description": "Enrollment could not be created or found"
          }
        },
        "summary": "Enroll User in Course",
        "tags": [
          "User Enrollments"
        ],
        "description": "Enrolls a user in a specific version of a course."
      }
    },
    "/users/{userId}/enrollments/courses/{courseId}/versions/{courseVersionId}/unenroll": {
      "post": {
        "operationId": "EnrollmentController.unenrollUser",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "description": "User ID of the student to enroll",
              "example": "60d5ec49b3f1c8e4a8f8b8c1",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "courseId",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "description": "ID of the course to enroll in",
              "example": "60d5ec49b3f1c8e4a8f8b8c2",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "courseVersionId",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "description": "ID of the specific course version to enroll in",
              "example": "60d5ec49b3f1c8e4a8f8b8c3",
              "format": "Mongo Object ID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/EnrollUserResponseData"
                    },
                    {
                      "$ref": "#/components/schemas/EnrollUserResponseData"
                    }
                  ]
                }
              }
            },
            "description": "User successfully unenrolled from the course"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/BadRequestErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/BadRequestErrorResponse"
                    }
                  ]
                }
              }
            },
            "description": "Bad Request Error"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/EnrollmentNotFoundErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/EnrollmentNotFoundErrorResponse"
                    }
                  ]
                }
              }
            },
            "description": "Enrollment could not be found or already removed"
          }
        },
        "summary": "Unenroll User from Course",
        "tags": [
          "User Enrollments"
        ],
        "description": "Unenrolls a user from a specific version of a course."
      }
    },
    "/users/{userId}/enrollments": {
      "get": {
        "operationId": "EnrollmentController.getUserEnrollments",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "pattern": "[^\\/#\\?]+?",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {}
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrollmentResponse"
                }
              }
            },
            "description": "List of user enrollments"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrollmentNotFoundErrorResponse"
                }
              }
            },
            "description": "Enrollments Not Found"
          }
        },
        "summary": "Get User Enrollments",
        "tags": [
          "User Enrollments"
        ],
        "description": "Retrieves a paginated list of courses and course versions a user is enrolled in."
      }
    },
    "/users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/": {
      "get": {
        "operationId": "ProgressController.getUserProgress",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{24}$",
              "type": "string",
              "minLength": 1,
              "description": "User ID to retrieve progress for",
              "example": "60d5ec49b3f1c8e4a8f8b8c1",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "courseId",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{24}$",
              "type": "string",
              "minLength": 1,
              "description": "Course ID to retrieve progress for",
              "example": "60d5ec49b3f1c8e4a8f8b8c2",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "courseVersionId",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{24}$",
              "type": "string",
              "minLength": 1,
              "description": "Course version ID to retrieve progress for",
              "example": "60d5ec49b3f1c8e4a8f8b8c3",
              "format": "Mongo Object ID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProgressDataResponse"
                }
              }
            },
            "description": "User progress retrieved successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            },
            "description": "Bad Request Error"
          }
        },
        "summary": "Get User Progress",
        "tags": [
          "User Progress"
        ],
        "description": "Retrieves a user's progress for a specific course version."
      }
    },
    "/users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/start": {
      "post": {
        "operationId": "ProgressController.startItem",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{24}$",
              "type": "string",
              "minLength": 1,
              "description": "User ID to track progress for",
              "example": "60d5ec49b3f1c8e4a8f8b8c1",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "courseId",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{24}$",
              "type": "string",
              "minLength": 1,
              "description": "Course ID to track progress for",
              "example": "60d5ec49b3f1c8e4a8f8b8c2",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "courseVersionId",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{24}$",
              "type": "string",
              "minLength": 1,
              "description": "Course version ID to track progress for",
              "example": "60d5ec49b3f1c8e4a8f8b8c3",
              "format": "Mongo Object ID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartItemBody"
              }
            }
          },
          "description": "StartItemBody",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartItemResponse"
                }
              }
            },
            "description": "Course item started successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            },
            "description": "Bad Request Error"
          }
        },
        "summary": "Start Course Item",
        "tags": [
          "User Progress"
        ],
        "description": "Starts tracking a user's progress on a specific course item."
      }
    },
    "/users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/stop": {
      "post": {
        "operationId": "ProgressController.stopItem",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{24}$",
              "type": "string",
              "minLength": 1,
              "description": "User ID to stop tracking progress for",
              "example": "60d5ec49b3f1c8e4a8f8b8c1",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "courseId",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{24}$",
              "type": "string",
              "minLength": 1,
              "description": "Course ID to stop tracking progress for",
              "example": "60d5ec49b3f1c8e4a8f8b8c2",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "courseVersionId",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{24}$",
              "type": "string",
              "minLength": 1,
              "description": "Course version ID to stop tracking progress for",
              "example": "60d5ec49b3f1c8e4a8f8b8c3",
              "format": "Mongo Object ID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StopItemBody"
              }
            }
          },
          "description": "StopItemBody",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            },
            "description": "Bad Request Error"
          }
        },
        "summary": "Stop Course Item",
        "tags": [
          "User Progress"
        ],
        "description": "Stops tracking a user's progress on a specific course item."
      }
    },
    "/users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/update": {
      "patch": {
        "operationId": "ProgressController.updateProgress",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{24}$",
              "type": "string",
              "minLength": 1,
              "description": "User ID to update progress for",
              "example": "60d5ec49b3f1c8e4a8f8b8c1",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "courseId",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{24}$",
              "type": "string",
              "minLength": 1,
              "description": "Course ID to update progress for",
              "example": "60d5ec49b3f1c8e4a8f8b8c2",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "courseVersionId",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{24}$",
              "type": "string",
              "minLength": 1,
              "description": "Course version ID to update progress for",
              "example": "60d5ec49b3f1c8e4a8f8b8c3",
              "format": "Mongo Object ID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProgressBody"
              }
            }
          },
          "description": "UpdateProgressBody",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            },
            "description": "Bad Request Error"
          }
        },
        "summary": "Update Progress",
        "tags": [
          "User Progress"
        ],
        "description": "Updates a user's progress for a specific course item."
      }
    },
    "/users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/reset": {
      "patch": {
        "operationId": "ProgressController.resetProgress",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{24}$",
              "type": "string",
              "minLength": 1,
              "description": "User ID to reset progress for",
              "example": "60d5ec49b3f1c8e4a8f8b8c1",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "courseId",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{24}$",
              "type": "string",
              "minLength": 1,
              "description": "Course ID to reset progress for",
              "example": "60d5ec49b3f1c8e4a8f8b8c2",
              "format": "Mongo Object ID"
            }
          },
          {
            "in": "path",
            "name": "courseVersionId",
            "required": true,
            "schema": {
              "pattern": "^[0-9a-fA-F]{24}$",
              "type": "string",
              "minLength": 1,
              "description": "Course version ID to reset progress for",
              "example": "60d5ec49b3f1c8e4a8f8b8c3",
              "format": "Mongo Object ID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetCourseProgressBody"
              }
            }
          },
          "description": "ResetCourseProgressBody",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            },
            "description": "Bad Request Error"
          }
        },
        "summary": "Reset Course Progress",
        "tags": [
          "User Progress"
        ],
        "description": "Resets a user's progress for a course, module, section, or item."
      }
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "Operations for user authentication and authorization"
    },
    {
      "name": "Courses",
      "description": "Operations related to courses management",
      "x-displayName": "Courses"
    },
    {
      "name": "Course Versions",
      "description": "Operations for managing different versions of a course",
      "x-displayName": "Versions",
      "x-resourceGroup": "Courses"
    },
    {
      "name": "Course Modules",
      "description": "Operations for managing modules within a course version",
      "x-displayName": "Modules",
      "x-resourceGroup": "Courses"
    },
    {
      "name": "Course Sections",
      "description": "Operations for managing sections within a course module",
      "x-displayName": "Sections",
      "x-resourceGroup": "Courses"
    },
    {
      "name": "Course Items",
      "description": "Operations for managing individual items within a section",
      "x-displayName": "Items",
      "x-resourceGroup": "Courses"
    },
    {
      "name": "User Enrollments",
      "description": "Operations for managing user enrollments in courses"
    },
    {
      "name": "User Progress",
      "description": "Operations for tracking and managing user progress"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Authentication",
      "tags": [
        "Authentication"
      ]
    },
    {
      "name": "Course Management",
      "tags": [
        "Courses",
        "Course Versions",
        "Course Modules",
        "Course Sections",
        "Course Items"
      ]
    },
    {
      "name": "User Management",
      "tags": [
        "User Enrollments",
        "User Progress"
      ]
    },
    {
      "name": "Data Models",
      "tags": [
        "Models"
      ]
    }
  ],
  "servers": [
    {
      "url": "http://localhost:4001",
      "description": "Development server"
    },
    {
      "url": "https://api.vibe.com",
      "description": "Production server"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ]
}